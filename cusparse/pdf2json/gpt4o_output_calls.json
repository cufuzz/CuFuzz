{"pdf_page": [62, 64], "model_response": [{"head": "cusparseXcsr2bsrNnz", "head_type": "CUDA_API", "description": "Calculates the number of non-zero blocks in the BSR matrix.", "relation": "calls", "tail": "cusparseDirection_t", "tail_type": "CUDA_CLASS"}, {"head": "cusparseXcsr2bsrNnz", "head_type": "CUDA_API", "description": "Calculates the number of non-zero blocks in the BSR matrix.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "cusparseScsr2bsr", "head_type": "CUDA_API", "description": "Converts a CSR matrix into a BSR matrix with column-major order.", "relation": "calls", "tail": "cusparseDirection_t", "tail_type": "CUDA_CLASS"}, {"head": "cusparseScsr2bsr", "head_type": "CUDA_API", "description": "Converts a CSR matrix into a BSR matrix with column-major order.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "cusparseSbsrmv", "head_type": "CUDA_API", "description": "Performs matrix-vector multiplication using the BSR format.", "relation": "calls", "tail": "cusparseDirection_t", "tail_type": "CUDA_CLASS"}, {"head": "cusparseSbsrmv", "head_type": "CUDA_API", "description": "Performs matrix-vector multiplication using the BSR format.", "relation": "calls", "tail": "cudaMemcpy", "tail_type": "CUDA_API"}, {"head": "cusparseSbsrmv", "head_type": "CUDA_API", "description": "Performs matrix-vector multiplication using the BSR format.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}]}
{"pdf_page": [74, 77], "model_response": [{"head": "cusparseCreateMatDescr", "head_type": "CUDA_API", "description": "Creates a matrix descriptor.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseSetMatIndexBase", "head_type": "CUDA_API", "description": "Sets index base for matrix descriptor.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseSetMatFillMode", "head_type": "CUDA_API", "description": "Sets fill mode for matrix descriptor.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseSetMatDiagType", "head_type": "CUDA_API", "description": "Sets diagonal type for matrix descriptor.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseCreateBsrsv2Info", "head_type": "CUDA_API", "description": "Creates an empty info structure for BSR matrix solving.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseDbsrsv2_bufferSize", "head_type": "CUDA_API", "description": "Queries buffer size needed for BSR matrix solving.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "CUDA_API", "description": "Allocates device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseDbsrsv2_analysis", "head_type": "CUDA_API", "description": "Performs analysis for BSR matrix solving.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseXbsrsv2_zeroPivot", "head_type": "CUDA_API", "description": "Detects numerical zero pivot in BSR matrix solving.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseDbsrsv2_solve", "head_type": "CUDA_API", "description": "Solves a BSR matrix system.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseDestroyBsrsv2Info", "head_type": "CUDA_API", "description": "Destroys the info structure created for BSR matrix solving.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseDestroyMatDescr", "head_type": "CUDA_API", "description": "Destroys the matrix descriptor.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "CUDA_API", "description": "Frees device memory.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [98, 101], "model_response": [{"head": "cusparseScsrgeam2_bufferSizeExt", "head_type": "CUDA_API", "description": "Calculate the buffer size for cusparseScsrgeam2 operation.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "cusparseXcsrgeam2Nnz", "head_type": "CUDA_API", "description": "Determine csrRowPtrC and the total number of nonzero elements.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseScsrgeam2", "head_type": "CUDA_API", "description": "Complete sparse matrix C using combined matrix A and matrix B.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}]}
{"pdf_page": [106, 110], "model_response": [{"head": "cusparseDcsric02_bufferSize", "head_type": "CUDA_API", "description": "Queries the amount of memory required by csric02 and allocates the buffer.", "relation": "calls", "tail": "cusparseCreateMatDescr", "tail_type": "CUDA_API"}, {"head": "cusparseDcsric02_analysis", "head_type": "CUDA_API", "description": "Analyzes an incomplete Cholesky factorization pattern for sparse matrices.", "relation": "calls", "tail": "cusparseDcsrsv2_analysis", "tail_type": "CUDA_API"}, {"head": "cusparseXcsric02_zeroPivot", "head_type": "CUDA_API", "description": "Finds the position of the first zero pivot or numerical zero.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "cusparseDcsrsv2_solve", "head_type": "CUDA_API", "description": "Solves triangular sparse matrix system using CSR format.", "relation": "calls", "tail": "cusparseSpSV", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "CUDA_API", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "CUDA_API", "description": "Frees memory allocated on the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [116, 120], "model_response": [{"head": "bsric02", "head_type": "CUDA_API", "description": "Performs the solve phase of the incomplete-Cholesky factorization.", "relation": "calls", "tail": "bsric02_bufferSize", "tail_type": "CUDA_API"}, {"head": "bsric02", "head_type": "CUDA_API", "description": "Performs the solve phase of the incomplete-Cholesky factorization.", "relation": "calls", "tail": "bsric02_analysis", "tail_type": "CUDA_API"}, {"head": "bsric02", "head_type": "CUDA_API", "description": "Performs the solve phase of the incomplete-Cholesky factorization.", "relation": "calls", "tail": "cusparseXbsric02_zeroPivot", "tail_type": "CUDA_API"}, {"head": "bsric02", "head_type": "CUDA_API", "description": "Performs the solve phase of the incomplete-Cholesky factorization.", "relation": "calls", "tail": "bsr2csr", "tail_type": "CUDA_API"}, {"head": "cusparseXbsric02_zeroPivot", "head_type": "CUDA_API", "description": "Reports the first numerical zero, including a structural zero.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "cusparseDbsric02_bufferSize", "head_type": "CUDA_API", "description": "Queries how much memory is used in bsric02 and bsrsv2.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseDbsric02_analysis", "head_type": "CUDA_API", "description": "Performs analysis of incomplete Cholesky on M.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseDbsric02_solve", "head_type": "CUDA_API", "description": "Solves using M = L * L'.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseDbsrsv2_bufferSize", "head_type": "CUDA_API", "description": "Queries how much memory is used in triangular solve for L and L'.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseDbsrsv2_analysis", "head_type": "CUDA_API", "description": "Performs analysis of triangular solve on L and L'.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseDbsrsv2_solve", "head_type": "CUDA_API", "description": "Solves L*z = x and L'*y = z.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [126, 131], "model_response": [{"head": "cusparseDcsrilu02", "head_type": "CUDA_API", "description": "Function performs the solve phase of the incomplete-LU factorization.", "relation": "calls", "tail": "cusparseDcsrilu02_analysis", "tail_type": "CUDA_API"}, {"head": "cusparseDcsrilu02", "head_type": "CUDA_API", "description": "Function performs the solve phase of the incomplete-LU factorization.", "relation": "calls", "tail": "cusparseXcsrilu02_zeroPivot", "tail_type": "CUDA_API"}, {"head": "cusparseDcsrsv2_solve", "head_type": "CUDA_API", "description": "Function solves a system of linear equations with a triangular matrix.", "relation": "calls", "tail": "cusparseDcsrsv2_analysis", "tail_type": "CUDA_API"}, {"head": "cusparseDcsrsv2_solve", "head_type": "CUDA_API", "description": "Function solves a system of linear equations with a triangular matrix.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseXcsrilu02_zeroPivot", "head_type": "CUDA_API", "description": "Function reports the first numerical zero in the incomplete-LU factorization.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}]}
{"pdf_page": [138, 142], "model_response": [{"head": "cusparseDbsrilu02_bufferSize", "head_type": "CUDA_API", "description": "Query how much memory is used in bsrilu02 and allocate the buffer", "relation": "calls", "tail": "cusparseCreate", "tail_type": "CUDA_API"}, {"head": "cusparseDbsrsv2_bufferSize", "head_type": "CUDA_API", "description": "Query how much memory is used in bsrsv2 and allocate the buffer", "relation": "calls", "tail": "cusparseCreate", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "CUDA_API", "description": "Allocate memory with automatic alignment to 128 bytes", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseDbsrilu02_analysis", "head_type": "CUDA_API", "description": "Perform analysis of incomplete LU factorization", "relation": "calls", "tail": "cusparseCreate", "tail_type": "CUDA_API"}, {"head": "cusparseXbsrilu02_zeroPivot", "head_type": "CUDA_API", "description": "Detect numerical zero pivot in incomplete LU factorization and perform synchronization", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "cusparseDbsrilu02", "head_type": "CUDA_API", "description": "Perform incomplete LU factorization", "relation": "calls", "tail": "cusparseCreate", "tail_type": "CUDA_API"}, {"head": "cusparseDbsrsv2_solve", "head_type": "CUDA_API", "description": "Solve triangular systems", "relation": "calls", "tail": "cusparseCreate", "tail_type": "CUDA_API"}, {"head": "cudaFree", "head_type": "CUDA_API", "description": "Free allocated resources", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseDestroy", "head_type": "CUDA_API", "description": "Destroy the cuSPARSE library context", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [171, 173], "model_response": [{"head": "cusparseSgebsr2gebsr_bufferSize", "head_type": "CUDA_API", "description": "Determines the buffer size required for gebsr2gebsr conversion.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "CUDA_API", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseXgebsr2gebsrNnz", "head_type": "CUDA_API", "description": "Determines the number of nonzero block columns per block row of matrix C.", "relation": "calls", "tail": "cudaMemcpy", "tail_type": "CUDA_API"}, {"head": "cudaMemcpy", "head_type": "CUDA_API", "description": "Copies data between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseSgebsr2gebsr", "head_type": "CUDA_API", "description": "Completes the conversion from one BSR format to another.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [174, 176], "model_response": [{"head": "cusparseZgebsr2csr", "head_type": "CUDA_API", "description": "This function converts a sparse matrix in general BSR format into CSR format.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseSgebsr2csr", "head_type": "CUDA_API", "description": "Convert BSR formatted sparse matrix into CSR format asynchronously.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}]}
{"pdf_page": [178, 181], "model_response": [{"head": "cusparseScsr2gebsr_bufferSize", "head_type": "__device__", "description": "Calculates the size of the buffer required for CSR to BSR conversion.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "cusparseXcsr2gebsrNnz", "head_type": "__device__", "description": "Determines the number of nonzero block columns per block row in the BSR matrix.", "relation": "calls", "tail": "cudaMemcpy", "tail_type": "CUDA_API"}, {"head": "cusparseScsr2gebsr", "head_type": "__device__", "description": "Performs the conversion from CSR to BSR format.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}]}
{"pdf_page": [189, 191], "model_response": [{"head": "cusparseXcsrsort_bufferSizeExt", "head_type": "CUDA_API", "description": "This function calculates the buffer size needed for sorting the CSR format.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseCreateIdentityPermutation", "head_type": "CUDA_API", "description": "This function sets up a permutation vector P to identity.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseXcsrsort", "head_type": "CUDA_API", "description": "This function sorts the CSR format in-place.", "relation": "calls", "tail": "cusparseXcsrsort_bufferSizeExt", "tail_type": "CUDA_API"}, {"head": "cusparseDgthr", "head_type": "CUDA_API", "description": "This function gathers the sorted csrVal after sorting the CSR format.", "relation": "calls", "tail": "cusparseXcsrsort", "tail_type": "CUDA_API"}]}
{"pdf_page": [191, 193], "model_response": [{"head": "cusparseXcscsort_bufferSizeExt", "head_type": "CUDA_API", "description": "This function calculates the buffer size required for sorting a matrix in CSC format by 'cusparseXcscsort'.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "cusparseXcscsort", "head_type": "CUDA_API", "description": "This function sorts CSC format matrices by column indices and row indices and updates permutation vector.", "relation": "calls", "tail": "cusparseCreateIdentityPermutation", "tail_type": "CUDA_API"}, {"head": "cusparseXcscsort", "head_type": "CUDA_API", "description": "This function sorts CSC format matrices by column indices and row indices and updates permutation vector.", "relation": "calls", "tail": "cusparseDgthr", "tail_type": "CUDA_API"}]}
