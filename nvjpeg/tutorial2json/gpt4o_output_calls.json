{"tutorial_page": "nvjpeg_doc_c2_2.1.txt", "model_response": [{"head": "nvjpegDecode", "head_type": "__host__", "description": "Decode a single JPEG image.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "nvjpegDecode", "head_type": "__host__", "description": "Decode a single JPEG image.", "relation": "calls", "tail": "nvjpegHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "nvjpegDecode", "head_type": "__host__", "description": "Decode a single JPEG image.", "relation": "calls", "tail": "nvjpegJpegState_t", "tail_type": "CUDA_CLASS"}, {"head": "nvjpegDecode", "head_type": "__host__", "description": "Decode a single JPEG image.", "relation": "calls", "tail": "nvjpegImage_t", "tail_type": "CUDA_CLASS"}, {"head": "nvjpegDecodeBatchedInitialize", "head_type": "__host__", "description": "Initialize batched decoding.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecodeBatched", "head_type": "__host__", "description": "Perform batched image decoding.", "relation": "single", "tail": "", "tail_type": ""}]}
{"tutorial_page": "nvjpeg_doc_c2_2.2.txt", "model_response": []}
{"tutorial_page": "nvjpeg_doc_c2_2.3_2.3.1.txt", "model_response": [{"head": "nvjpegCreate", "head_type": "__host__", "description": "Allocates and initializes the library handle.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "nvjpegCreateEx", "head_type": "__host__", "description": "Allocates and initializes the library handle using the provided arguments.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "nvjpegCreateSimple", "head_type": "__host__", "description": "Allocates and initializes the library handle, with default codec implementations selected by library and default memory allocators.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegCreateExV2", "head_type": "__host__", "description": "Allocates and initializes the library handle using the provided arguments with extended allocators.", "relation": "calls", "tail": "nvjpegDevAllocatorV2_t", "tail_type": "CUDA_CLASS"}, {"head": "nvjpegDestroy", "head_type": "__host__", "description": "Releases the library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegSetDeviceMemoryPadding", "head_type": "__host__", "description": "Use the provided padding for all device memory allocations with specified library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegGetDeviceMemoryPadding", "head_type": "__host__", "description": "Retrieve the device memory padding that is currently used for the specified library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegSetPinnedMemoryPadding", "head_type": "__host__", "description": "Use the provided padding for all pinned host memory allocations with specified library handle.", "relation": "calls", "tail": "cudaHostAlloc", "tail_type": "CUDA_API"}, {"head": "nvjpegGetPinnedMemoryPadding", "head_type": "__host__", "description": "Retrieve the pinned host memory padding that is currently used for specified library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegGetHardwareDecoderInfo", "head_type": "__host__", "description": "Retrieve hardware decoder details such as number of engines and number of cores available in each engine.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStateCreate", "head_type": "__host__", "description": "Allocates and initializes the internal structure required for the JPEG processing.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStateDestroy", "head_type": "__host__", "description": "Releases the image internal structure.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecoderCreate", "head_type": "__host__", "description": "Creates a decoder handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecoderDestroy", "head_type": "__host__", "description": "Destroys the decoder handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecoderJpegSupported", "head_type": "__host__", "description": "Determines whether the decoder_handle is able to handle the bit-stream stored in jpeg_stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecoderStateCreate", "head_type": "__host__", "description": "Creates the decoder_state internal structure.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamCreate", "head_type": "__host__", "description": "Creates jpeg_stream that is used to parse the JPEG bitstream and store bitstream parameters.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamDestroy", "head_type": "__host__", "description": "Destroys the jpeg_stream structure.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegBufferPinnedCreate", "head_type": "__host__", "description": "Creates a pinned buffer handle.", "relation": "calls", "tail": "nvjpegPinnedAllocator_t", "tail_type": "CUDA_CLASS"}, {"head": "nvjpegBufferPinnedCreateV2", "head_type": "__host__", "description": "Creates a pinned buffer handle using extended allocators.", "relation": "calls", "tail": "nvjpegPinnedAllocatorV2_t", "tail_type": "CUDA_CLASS"}, {"head": "nvjpegBufferPinnedDestroy", "head_type": "__host__", "description": "Destroys a pinned buffer handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegStateAttachPinnedBuffer", "head_type": "__host__", "description": "Link the nvJPEG pinned buffer handle to decoder_state.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegBufferPinnedRetrieve", "head_type": "__host__", "description": "Retrieves the pinned memory pointer and size from the nvJPEG pinned buffer handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegBufferPinnedResize", "head_type": "__host__", "description": "Resize the pinned buffer to the specified size in bytes.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "nvjpegBufferDeviceCreate", "head_type": "__host__", "description": "Creates the device buffer handle.", "relation": "calls", "tail": "nvjpegDevAllocator_t", "tail_type": "CUDA_CLASS"}, {"head": "nvjpegBufferDeviceCreateV2", "head_type": "__host__", "description": "Creates the device buffer handle using extended allocators.", "relation": "calls", "tail": "nvjpegDevAllocatorV2_t", "tail_type": "CUDA_CLASS"}, {"head": "nvjpegBufferDeviceDestroy", "head_type": "__host__", "description": "Destroys the device buffer handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegStateAttachDeviceBuffer", "head_type": "__host__", "description": "Link the nvJPEG device buffer handle to the decoder_state.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegBufferDeviceRetrieve", "head_type": "__host__", "description": "Retrieve the device memory pointer and size from the nvJPEG device buffer handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegBufferDeviceResize", "head_type": "__host__", "description": "Resize the device buffer to the specified size in bytes.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "nvjpegDecodeParamsCreate", "head_type": "__host__", "description": "Creates a handle for the parameters.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecodeParamsDestroy", "head_type": "__host__", "description": "Destroys the decode_params handle.", "relation": "single", "tail": "", "tail_type": ""}]}
{"tutorial_page": "nvjpeg_doc_c2_2.3_2.3.2.txt", "model_response": [{"head": "nvjpegGetImageInfo", "head_type": "__host__", "description": "Decodes the JPEG header and retrieves the basic information about the image.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamParse", "head_type": "__host__", "description": "Parses the bitstream and stores the metadata in the jpeg_stream struct.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamParseHeader", "head_type": "__host__", "description": "Parses only the header of the bitstream and stores the header information in the jpeg_stream struct.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamParseTables", "head_type": "__host__", "description": "Parses the JPEG tables bitstream and stores the jpeg tables in jpeg_stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamGetFrameDimensions", "head_type": "__host__", "description": "Extracts the JPEG frame dimensions from the bitstream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamGetComponentsNum", "head_type": "__host__", "description": "Extracts the number of encoded channels in the input from the bitstream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamGetComponentDimensions", "head_type": "__host__", "description": "Extracts the component dimensions from the bitstream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamGetChromaSubsampling", "head_type": "__host__", "description": "Gets the chroma subsampling from the jpeg_stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamGetJpegEncoding", "head_type": "__host__", "description": "Obtains the JPEG encoding type from the jpeg_stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamGetExifOrientation", "head_type": "__host__", "description": "Extracts the exif orientation from the bitstream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamGetSamplePrecision", "head_type": "__host__", "description": "Extracts the sample precision (bit depth) from the bitstream.", "relation": "single", "tail": "", "tail_type": ""}]}
{"tutorial_page": "nvjpeg_doc_c2_2.3_2.3.3.txt", "model_response": [{"head": "nvjpegDecode", "head_type": "__host__", "description": "Decodes a single image and writes the decoded image in the desired format to the output buffers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecodeBatchedInitialize", "head_type": "__host__", "description": "Initializes the batched decoder state with batch size and output format.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecodeBatched", "head_type": "__host__", "description": "Decodes a batch of images and writes them to buffers described in the destination.", "relation": "calls", "tail": "nvjpegDecodeBatchedInitialize", "tail_type": "CUDA_API"}, {"head": "nvjpegDecodeBatchedEx", "head_type": "__host__", "description": "Decodes a batch of images with ROI and writes them to buffers described in the destination.", "relation": "calls", "tail": "nvjpegDecodeBatchedInitialize", "tail_type": "CUDA_API"}, {"head": "nvjpegDecodeBatchedSupported", "head_type": "__host__", "description": "Determines whether an image can be decoded by nvjpegDecodeBatched.", "relation": "calls", "tail": "nvjpegJpegStreamParseHeader", "tail_type": "CUDA_API"}, {"head": "nvjpegDecodeBatchedSupportedEx", "head_type": "__host__", "description": "Determines whether an image can be decoded by nvjpegDecodeBatched with ROI settings.", "relation": "calls", "tail": "nvjpegJpegStreamParseHeader", "tail_type": "CUDA_API"}, {"head": "nvjpegDecodeBatchedPreAllocate", "head_type": "__host__", "description": "Pre-allocates device memory for decoding batches with varying sizes and chroma subsampling.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecodeBatchedParseJpegTables", "head_type": "__host__", "description": "Parses JPEG tables bitstream to extract tables for batching decode APIs.", "relation": "single", "tail": "", "tail_type": ""}]}
{"tutorial_page": "nvjpeg_doc_c2_2.3_2.3.4.txt", "model_response": [{"head": "nvjpegDecodeJpegHost", "head_type": "__host__", "description": "First stage of the decoupled decoding process done on the host.", "relation": "calls", "tail": "nvjpegJpegStreamParse", "tail_type": "CUDA_API"}, {"head": "nvjpegDecodeJpegTransferToDevice", "head_type": "__host__", "description": "Mix of host and device operations for transferring to device.", "relation": "calls", "tail": "nvjpegStateAttachDeviceBuffer", "tail_type": "CUDA_API"}, {"head": "nvjpegDecodeJpegDevice", "head_type": "__device__", "description": "Decode operations taking place mainly on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecodeJpeg", "head_type": "__host__", "description": "Single phase API for decoding JPEG images with automatic backend selection.", "relation": "calls", "tail": "nvjpegJpegStreamParse", "tail_type": "CUDA_API"}]}
{"tutorial_page": "nvjpeg_doc_c2_2.3_2.3.5.txt", "model_response": [{"head": "nvjpegDecodeParamsSetOutputFormat", "head_type": "__host__", "description": "This function is used to set the decode output format.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecodeParamsSetROI", "head_type": "__host__", "description": "This function enables the region of interest-only (ROI-only) decode.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecodeParamsSetAllowCMYK", "head_type": "__host__", "description": "This function enables the conversion from CMYK to RGB/YUV colorspace in JPEG decoding.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecodeParamsSetScaleFactor", "head_type": "__host__", "description": "This function allows the user to scale decode output.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecodeParamsSetExifOrientation", "head_type": "__host__", "description": "This function is used to generate the decoded output based on the exif orientation parameter.", "relation": "single", "tail": "", "tail_type": ""}]}
{"tutorial_page": "nvjpeg_doc_c2_2.3_2.3.6.txt", "model_response": []}
{"tutorial_page": "nvjpeg_doc_c2_2.3_2.3.7.txt", "model_response": [{"head": "nvjpegGetImageInfo", "head_type": "CUDA_API", "description": "The nvjpegGetImageInfo function retrieves information about the chroma subsampling from the encoded JPEG image.", "relation": "single", "tail": "", "tail_type": ""}]}
{"tutorial_page": "nvjpeg_doc_c3_3.1.txt", "model_response": [{"head": "nvjpegEncoderParamsCreate", "head_type": "__host__", "description": "Create and initialize an encoding parameters structure with default parameters.", "relation": "calls", "tail": "nvjpegCreateSimple", "tail_type": "CUDA_API"}, {"head": "nvjpegEncoderStateCreate", "head_type": "__host__", "description": "Create the encoding state structure for holding intermediate buffers.", "relation": "calls", "tail": "nvjpegCreateSimple", "tail_type": "CUDA_API"}, {"head": "nvjpegEncodeImage", "head_type": "__host__", "description": "Compress the image using the nvJPEG library.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "nvjpegEncodeRetrieveBitstream", "head_type": "__host__", "description": "Retrieve the compressed JPEG stream from the encoder state.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Synchronize the stream.", "relation": "single", "tail": "", "tail_type": ""}]}
{"tutorial_page": "nvjpeg_doc_c3_3.2.txt", "model_response": [{"head": "nvjpegInputFormat_t", "head_type": "", "description": "nvjpegInputFormat_t enum is used to select the color model and pixel format of the input image.", "relation": "calls", "tail": "YCbCr", "tail_type": "CUDA_API"}, {"head": "nvjpegEncoderState_t", "head_type": "", "description": "nvjpegEncoderState_t structure stores intermediate buffers and variables used for compression.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegEncoderParams_t", "head_type": "", "description": "nvjpegEncoderParams_t structure stores JPEG encode parameters.", "relation": "single", "tail": "", "tail_type": ""}]}
{"tutorial_page": "nvjpeg_doc_c3_3.3.txt", "model_response": [{"head": "nvjpegEncoderStateCreate", "head_type": "__host__", "description": "Creates encoder state that stores intermediate buffers used in compression.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_API"}, {"head": "nvjpegEncoderStateDestroy", "head_type": "__host__", "description": "Destroys the encoder state.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegEncoderParamsCreate", "head_type": "__host__", "description": "Creates the structure that holds the compression parameters.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_API"}, {"head": "nvjpegEncoderParamsDestroy", "head_type": "__host__", "description": "Destroys the encoder parameters structure.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegEncoderParamsSetEncoding", "head_type": "__host__", "description": "Sets the encoding type in the encoder parameters structure.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_API"}, {"head": "nvjpegEncoderParamsSetQuality", "head_type": "__host__", "description": "Sets the parameter quality in the encoder parameters structure.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_API"}, {"head": "nvjpegEncoderParamsSetOptimizedHuffman", "head_type": "__host__", "description": "Sets whether or not to use optimized Huffman.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_API"}, {"head": "nvjpegEncoderParamsSetSamplingFactors", "head_type": "__host__", "description": "Sets which chroma subsampling will be used for JPEG compression.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_API"}]}
{"tutorial_page": "nvjpeg_doc_c3_3.4.txt", "model_response": [{"head": "nvjpegEncodeGetBufferSize", "head_type": "__host__", "description": "Returns the maximum possible buffer size that is needed to store the compressed JPEG stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegEncodeYUV", "head_type": "__host__", "description": "Compresses the image in YUV colorspace to JPEG stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegEncodeImage", "head_type": "__host__", "description": "Compresses the image in the provided format to the JPEG stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegEncodeRetrieveBitstream", "head_type": "__host__", "description": "Retrieves the compressed stream from the encoder state.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegEncodeRetrieveBitstreamDevice", "head_type": "__host__", "description": "Retrieves the compressed stream from the encoder state where data is stored in device memory.", "relation": "single", "tail": "", "tail_type": ""}]}
{"tutorial_page": "nvjpeg_doc_c4_4.1.txt", "model_response": [{"head": "nvjpegEncoderParamsCopyMetadata", "head_type": "__host__", "description": "Copies metadata from the parsed stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_API"}, {"head": "nvjpegEncoderParamsCopyQuantizationTables", "head_type": "__host__", "description": "Copies quantization tables from the parsed stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_API"}, {"head": "nvjpegEncoderParamsCopyHuffmanTables", "head_type": "__host__", "description": "Copies huffman tables from the parsed stream (deprecated).", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_API"}]}
{"tutorial_page": "nvjpeg_doc_c4_4.2.txt", "model_response": [{"head": "nvjpegCreateSimple", "head_type": "single", "description": "Creates a simple nvJPEG library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamCreate", "head_type": "single", "description": "Creates a JPEG stream object.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamParse", "head_type": "single", "description": "Parses a JPEG stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecoderCreate", "head_type": "single", "description": "Creates a JPEG decoder with a specified backend.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecoderStateCreate", "head_type": "single", "description": "Creates a JPEG decoder state.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecodeParamsCreate", "head_type": "single", "description": "Creates decode parameters for nvJPEG.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecodeParamsSetOutputFormat", "head_type": "single", "description": "Sets the output format for decode parameters.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegDecodeJpeg", "head_type": "single", "description": "Decodes a JPEG image using nvJPEG.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamGetJpegEncoding", "head_type": "single", "description": "Retrieves JPEG encoding from the JPEG stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegEncoderParamsSetEncoding", "head_type": "single", "description": "Sets encoding parameters for nvJPEG encoder.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegEncoderParamsCopyMetadata", "head_type": "single", "description": "Copies metadata to the encoder parameters.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegEncoderParamsCopyQuantizationTables", "head_type": "single", "description": "Copies quantization tables to the encoder parameters.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegEncoderParamsCopyHuffmanTables", "head_type": "single", "description": "Copies Huffman tables to the encoder parameters.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegJpegStreamGetFrameDimensions", "head_type": "single", "description": "Retrieves frame dimensions from JPEG stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegEncodeImage", "head_type": "single", "description": "Encodes an image using nvJPEG encoder parameters.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "nvjpegEncodeRetrieveBitstream", "head_type": "single", "description": "Retrieves the bitstream of the encoded image.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "CUDA_API", "description": "Synchronizes the specified CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}]}
