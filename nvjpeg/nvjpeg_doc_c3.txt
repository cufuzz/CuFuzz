3. JPEG Encodingï

This section describes the encoding functions of the nvJPEG Library.


3.1. Using the Encoderï

The user should perform the below prerequisite steps before calling the nvJPEG encoding functions. See also nvJPEG Encoder Helper API Reference.


3.1.1. Encoding the Parametersï

The user should create an encoding parameters structure with nvjpegEncoderParamsCreate() function. The function will be initialized with default parameters. User can use an appropriate nvjpegEncoderParamsSet*() function to set a specific parameter.
The quality parameter can be set, using the nvjpegEncoderParamsSetQuality() function, to an integer value between 1 and 100, and this quality parameter will be used as a base for generating the JPEG quantization tables.
The parameters structure should be passed to compression functions.

Note
The encoding parameters structure can be reused to compress multiple images simultaneously, but no changes to the parameters should be made during the ongoing encoding, or the encoding result will be undefined.




3.1.2. Encoding the Stateï

The user should create the encoding state structure using nvjpegEncoderStateCreate() function. This function will hold intermediate buffers for the encoding process. This state should be passed to the compression functions.

Note
The encoding state structure can be reused to encode a series of images, but no encoding should be performed on multiple images with the same encoding state at the same timeâotherwise the result of the encodings will be undefined.




3.1.3. Encoding the Imageï

The nvJPEG library provides a few interfaces for compressing the image in different formats and colorspaces. See below.


3.1.3.1. nvjpegEncodeYUVï

Input for this function is an image in YUV colorspace. See nvjpegEncodeYUV(). The source argument should be filled with the corresponding YUV planar data. The chroma_subsampling argument should have the chroma subsampling of the input data. If the chroma subsampling in the encoding parameters is the same as input chroma subsampling, then the userâs input data will be directly used in the JPEG compression. Otherwise chroma will be resampled to match the chroma subsampling of the encoding parameters.
Input data should be provided with respect to the subsampling factors. That is, the chrominance image planes should have sizes aligned to the corresponding subsamplings. For example:

Image dimensions: 123x321
Input chroma subsampling: NVJPEG_CSS_410
Chroma subsampling factor for this chroma subsampling: 4x2

Given the above, the encoder library expects the user to provide:

Y plane with size: 123 x 321
Cb and Cr plane with size: 31 x 161






3.1.3.2. nvjpegEncodeImageï

See nvjpegEncodeImage(). Input for this function, i.e., how data should be provided in the source argument, is determined by the input_format argument. For the interleaved formats (ending with I) only the first channel is used. For the non-interleaved formats, all the channels in the input format are used.
For example, if the user has interleaved the RGB image of size W x H, stored continuously, and the pointer to it is pImage, then source should be:

source.channel[0] = pImage
source.pitch[0] = W*3

When the same image is stored in planar format, with image planes pointers stored continuously in the array pImage[3], then source should be:

source.channel[0] = pImage[0]
source.channel[1] = pImage[1]
source.channel[2] = pImage[2]

The pitch values for each channel in the source parameter should be set accordingly to the data layout.
The nvJPEG library will perform the color transformation to the YCbCr, and will compress the result.




3.1.4. Retrieving the Compressed Streamï

Often it is not feasible to accurately predict the final compressed data size of the final JPEG stream for any input data and parameters. The nvJPEG library, while encoding, will calculate the size of the final stream, allocate temporary buffer in the encoder state and save the compressed data in the encoding stateâs buffer. In order to get final compressed JPEG stream, the user should provide the memory buffer large enough to store this compressed data. There are two options for how to do this:


Use the upper bound on compressed JPEG stream size for the given parameters and image dimensions:

Use the nvjpegEncodeRetrieveBitstream() function to retrieve the maximum possible JPEG stream size at any given time.
Allocate the memory buffer at any given time.
Encode the image using one of the encoding functions.
Retrieve the compressed JPEG stream from the encoder state after successful encoding, using the nvjpegEncodeRetrieveBitstream() and the allocated buffer.



Wait for the encoding to complete, and retrieve the exact size of required buffer, as below:

Encode the image using one of the encoding functions.
Use the nvjpegEncodeRetrieveBitstream() function to retrieve the size in bytes of the compressed JPEG stream.
Allocate the memory buffer of at least this size.
Use the nvjpegEncodeRetrieveBitstream() function to populate your buffer with the compressed JPEG stream.




Note
As the same encoding image state can be reused to compress a series of images, the nvjpegEncodeRetrieveBitstream() function will return the result for the last compressed image.




3.1.5. JPEG Encoding Exampleï

See below the example code, and the block diagram shown in Figure 1 <nvjpeg-encode-examples__fig-nvjpeg-encode-example>, for encoding with nvJPEG Encoder.



JPEG Encoding Using nvJPEG Encoderï



nvjpegHandle_t nv_handle;
nvjpegEncoderState_t nv_enc_state;
nvjpegEncoderParams_t nv_enc_params;
cudaStream_t stream;

// initialize nvjpeg structures
nvjpegCreateSimple(&nv_handle);
nvjpegEncoderStateCreate(nv_handle, &nv_enc_state, stream);
nvjpegEncoderParamsCreate(nv_handle, &nv_enc_params, stream);

nvjpegImage_t nv_image;
// Fill nv_image with image data, let's say 640x480 image in RGB format

// Compress image
nvjpegEncodeImage(nv_handle, nv_enc_state, nv_enc_params,
    &nv_image, NVJPEG_INPUT_RGB, 640, 480, stream);

// get compressed stream size
size_t length;
nvjpegEncodeRetrieveBitstream(nv_handle, nv_enc_state, NULL, &length, stream);
// get stream itself
cudaStreamSynchronize(stream);
std::vector<char> jpeg(length);
nvjpegEncodeRetrieveBitstream(nv_handle, nv_enc_state, jpeg.data(), &length, 0);

// write stream to file
cudaStreamSynchronize(stream);
std::ofstream output_file("test.jpg", std::ios::out | std::ios::binary);
output_file.write(jpeg.data(), length);
output_file.close();






3.2. nvJPEG Encoder Type Declarationsï

This section describes the nvJPEG Encoder Type Declarations.


3.2.1. nvjpegInputFormat_tï


typedef enum {
    NVJPEG_INPUT_RGB         = 3,
    NVJPEG_INPUT_BGR         = 4,
    NVJPEG_INPUT_RGBI        = 5,
    NVJPEG_INPUT_BGRI        = 6
} nvjpegInputFormat_t;


The nvjpegInputFormat_t enum is used to select the color model and pixel format of the input image. It is used for conversion to YCbCr during encoding.







Member
Description


NVJPEG_INPUT_RGB
Input image is in RGB color model. Pixel format is RGB.


NVJPEG_INPUT_BGR
Input image is in RGB color model. Pixel format is BGR.


NVJPEG_INPUT_RGBI
Input image is in RGB color model. Pixel format is interleaved RGB.


NVJPEG_INPUT_BGRI
Input image is in RGB color model. Pixel format is interleaved BGR.






3.2.2. nvjpegEncoderState_tï

The nvjpegEncoderState_t structure stores intermediate buffers and variables used for compression.



3.2.3. nvjpegEncoderParams_tï

The nvjpegEncoderParams_t structure stores JPEG encode parameters.




3.3. nvJPEG Encoder Helper API Referenceï

The nvJPEG Encoder helper functions are used for initializing.


3.3.1. nvjpegEncoderStateCreate()ï

Creates encoder state that stores intermediate buffers used in compression.
Signature:

nvjpegStatus_t nvjpegEncoderStateCreate(
    nvjpegHandle_t handle,
    nvjpegEncoderState_t *encoder_state,
    cudaStream_t stream);


Parameters:









Parameter
Input / Output
Memory
Description


handle
Input
Host
Library handle


encoder_state
Output
Host
Pointer to the encoder state structure, where the new state will be placed.


stream
Inputt
Host
CUDA stream where all the required device operations will be placed.






3.3.2. nvjpegEncoderStateDestroy()ï

Destroys the encoder state.
Signature:

nvjpegStatus_t nvjpegEncoderStateDestroy(
    nvjpegEncoderState_t encoder_state);


Parameters:









Parameter
Input / Output
Memory
Description


encoder_state
Input/Output
Host
Encoder state structure that will be released.






3.3.3. nvjpegEncoderParamsCreate()ï

Creates the structure that holds the compression parameters.
Signature:

nvjpegStatus_t nvjpegEncoderParamsCreate(
    nvjpegHandle_t handle,
    nvjpegEncoderParams_t *encoder_params,
    cudaStream_t stream);


Parameters:









Parameter
Input / Output
Memory
Description


handle
Input
Host
Library handle.


encoder_params
Output
Host
Pointer to the location where the new parameters structure will be placed.


stream
Inputt
Host
CUDA stream where all the required device operations will be placed.






3.3.4. nvjpegEncoderParamsDestroy()ï

Destroys the encoder parameters structure.
Signature:

nvjpegEncoderParamsDestroy(
    nvjpegEncoderParams_t encoder_params);


Parameters:









Parameter
Input / Output
Memory
Description


encoder_params
Input/Output
Host
Encoder params structure that will be released.






3.3.5. nvjpegEncoderParamsSetEncoding()ï

Sets the parameter quality in the encoder parameters structure.
Signature:

nvjpegStatus_t nvjpegEncoderParamsSetEncoding(
    nvjpegEncoderParams_t encoder_params,
    nvjpegJpegEncoding_t etype,
    cudaStream_t stream);


Parameters:









Parameter
Input / Output
Memory
Description


encoder_params
Input/Output
Host
Encoder parameters structure handle.


etype
Input
Host
Encoding type selection (Baseline/Progressive). Default is Baseline.


stream
Input
Host
CUDA stream where all the required device operations will be placed.






3.3.6. nvjpegEncoderParamsSetQuality()ï

Sets the parameter quality in the encoder parameters structure.
Signature:

nvjpegStatus_t nvjpegEncoderParamsSetQuality(
    nvjpegEncoderParams_t encoder_params,
    const int quality,
    cudaStream_t stream);


Parameters:









Parameter
Input / Output
Memory
Description


encoder_params
Input/Output
Host
Encoder parameterss structure handle.


quality
Input
Host
Integer value of quality between 1 and 100, where 100 is the highest quality. Default value is 70.


stream
Input
Host
CUDA stream where all the required device operations will be placed.






3.3.7. nvjpegEncoderParamsSetOptimizedHuffman()ï

Sets whether or not to use optimized Huffman. Using optimized Huffman produces smaller JPEG bitstream sizes with the same quality, but with slower performance.
Signature:

nvjpegStatus_t nvjpegEncoderParamsSetOptimizedHuffman(
    nvjpegEncoderParams_t encoder_params,
    const int optimized,
    cudaStream_t stream);


Parameters:









Parameter
Input / Output
Memory
Description


encoder_params
Input/Output
Host
Encoder parameters structure handle.


optimized
Input
Host
If this value is 0 then non-optimized Huffman will be used. Otherwise optimized version will be used. Default value is 0.


stream
Input
Host
CUDA stream where all the required device operations will be placed.






3.3.8. nvjpegEncoderParamsSetSamplingFactors()ï

Sets which chroma subsampling will be used for JPEG compression.
Signature:

nvjpegStatus_t nvjpegEncoderParamsSetSamplingFactors(
    nvjpegEncoderParams_t encoder_params,
    const nvjpegChromaSubsampling_t chroma_subsampling,
    cudaStream_t stream);


Parameters:









Parameter
Input / Output
Memory
Description


encoder_params
Input/Output
Host
Encoder parameters structure handle.


chroma_subsampling
Input
Host
Chroma subsampling that will be used for JPEG compression. If the input is in YUV color model and chroma_subsampling is different from the subsampling factors of source image, then the NVJPEG library will convert subsampling to the value of chroma_subsampling. Default value is 4:4:4.


stream
Input
Host
CUDA stream where all the required device operations will be placed.







3.4. nvJPEG Encoder API Referenceï

This section describes the nvJPEG Encoder API.


3.4.1. nvjpegEncodeGetBufferSize()ï

Returns the maximum possible buffer size that is needed to store the compressed JPEG stream, for the given input parameters.
Signature:

nvjpegStatus_t nvjpegEncodeGetBufferSize(
    nvjpegHandle_t handle,
    const nvjpegEncoderParams_t encoder_params,
    int image_width,
    int image_height,
    size_t *max_stream_length);


Parameters:









Parameter
Input / Output
Memory
Description


handle
Input
Host
Library handle.


encoder_params
Input/Output
Host
Encoder parameters structure handle.


image_width
Input
Host
Input image width.


image_height
Input
Host
Input image height.


stream
Input
Host
CUDA stream where all the required device operations will be placed.






3.4.2. nvjpegEncodeYUV()ï

Compresses the image in YUV colorspace to JPEG stream using the provided parameters, and stores it in the state structure.
Signature:

nvjpegStatus_t nvjpegEncodeYUV(
    nvjpegHandle_t handle,
    nvjpegEncoderState_t encoder_state,
    const nvjpegEncoderParams_t encoder_params,
    const nvjpegImage_t *source,
    nvjpegChromaSubsampling_t chroma_subsampling,
    int image_width,
    int image_height,
    cudaStream_t stream);


Parameters:









Parameter
Input / Output
Memory
Description


handle
Input
Host
Library handle.


encoder_state
Input/Output
Host
Internal structure that holds the temporary buffers required for the compression and also stores the final compressed JPEG stream.


encoder_params
Input
Host
Encoder parameters structure handle.


source
Input
Host
Pointer to the nvjpeg structure that holds the device pointers to the Y, U(Cb) and V(Cr) image planes and the respective strides.


chroma_subsampling
Input
Host
Chroma subsampling of the input data.


image_width
Input
Host
Input image width.


image_height
Input
Host
Input image height.


stream
Input
Host
CUDA stream where all the required device operations will be placed.






3.4.3. nvjpegEncodeImage()ï

Compresses the image in the provided format to the JPEG stream using the provided parameters, and stores it in the state structure.
Signature:

nvjpegStatus_t nvjpegEncodeImage(
    nvjpegHandle_t handle,
    nvjpegEncoderState_t encoder_state,
    const nvjpegEncoderParams_t encoder_params,
    const nvjpegImage_t *source,
    nvjpegInputFormat_t input_format,
    int image_width,
    int image_height,
    cudaStream_t stream);


Parameters:









Parameter
Input / Output
Memory
Description


handle
Input
Host
Library handle.


encoder_state
Input/Output
Host
Internal structure that holds the temporary buffers required for the compression and also stores the final compressed JPEG stream.


encoder_params
Input
Host
Encoder parameters structure handle.


source
Input
Host
Pointer to the nvjpeg structure that holds the device pointers to the Y, U(Cb) and V(Cr) image planes and the respective strides.


input_format
Input
Host
Value of nvjpegInputFormat_t type that describes the input data.


image_width
Input
Host
Input image width.


image_height
Input
Host
Input image height.


stream
Input
Host
CUDA stream where all the required device operations will be placed.






3.4.4. nvjpegEncodeRetrieveBitstream()ï

Retrieves the compressed stream from the encoder state that was previously used in one of the encoder functions.

If data parameter is NULL then the encoder will return compressed stream size in the length parameter.
If data is not NULL then the provided length parameter should contain the data buffer size.
If the provided length is less than compressed stream size, then an error will be returned. Otherwise the compressed stream will be stored in the data buffer and the actual compressed buffer size will be stored in the length parameter.

Signature:

nvjpegStatus_t nvjpegEncodeRetrieveBitstream(
    nvjpegHandle_t handle,
    nvjpegEncoderState_t encoder_state,
    unsigned char *data,
    size_t *length,
    cudaStream_t stream);


Parameters:









Parameter
Input / Output
Memory
Description


handle
Input
Host
Library handle.


encoder_state
Input/Output
Host
The encoder_state that was previously used in one of the encoder functions.


data
Input/Output
Host
Pointer to the buffer in the host memory where the compressed stream will be stored. Can be NULL (see description).


length
Input/Output
Host
Pointer to the input buffer size. On return the NVJPEG library will store the actual compressed stream size in this parameter.


stream
Input
Host
CUDA stream where all the required device operations will be placed.






3.4.5. nvjpegEncodeRetrieveBitstreamDevice()ï

Retrieves the compressed stream from the encoder state that was previously used in one of the encoder functions.

data parameter should be on device memory
If data parameter is NULL then the encoder will return compressed stream size in the length parameter.
If data is not NULL then the provided length parameter should contain the data buffer size.
If the provided length is less than compressed stream size, then an error will be returned. Otherwise the compressed stream will be stored in the data buffer and the actual compressed buffer size will be stored in the length parameter.

Signature:

nvjpegStatus_t nvjpegEncodeRetrieveBitstreamDevice(
    nvjpegHandle_t handle,
    nvjpegEncoderState_t encoder_state,
    unsigned char *data,
    size_t *length,
    cudaStream_t stream);


Parameters:









Parameter
Input / Output
Memory
Description


handle
Input
Host
Library handle.


encoder_state
Input/Output
Host
The encoder_state that was previously used in one of the encoder functions.


data
Input/Output
Device
Pointer to the buffer in the device memory where the compressed stream will be stored. Can be NULL (see description).


length
Input/Output
Host
Pointer to the input buffer size. On return the NVJPEG library will store the actual compressed stream size in this parameter.


stream
Input
Host
CUDA stream where all the required device operations will be placed.


