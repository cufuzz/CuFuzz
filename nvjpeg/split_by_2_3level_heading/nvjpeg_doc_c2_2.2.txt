2.2. nvJPEG Type Declarationsï



2.2.1. nvJPEG Backendï


typedef enum {
    NVJPEG_BACKEND_DEFAULT = 0,
    NVJPEG_BACKEND_HYBRID = 1,
    NVJPEG_BACKEND_GPU_HYBRID = 2,
    NVJPEG_BACKEND_HARDWARE = 3,
    NVJPEG_BACKEND_GPU_HYBRID_DEVICE = 4,
    NVJPEG_BACKEND_HARDWARE_DEVICE = 5,
    NVJPEG_BACKEND_LOSSLESS_JPEG = 6
} nvjpegBackend_t;


The nvjpegBackend_t enum is used to select either default back-end by default, or use GPU decoding for baseline JPEG images, or use CPU for Huffman decoding.







Member
Description


NVJPEG_BACKEND_DEFAULT
Back-end is selected internally.


NVJPEG_BACKEND_HYBRID
Uses CPU for Huffman decoding.


NVJPEG_BACKEND_GPU_HYBRID
Uses GPU for Huffman decoding. nvjpegDecodeBatched will use GPU decoding for baseline JPEG images with interleaved scan when batch size is greater than 50. The Decode APIâDecoupled Decoding will use GPU assisted Huffman decoding.


NVJPEG_BACKEND_HARDWARE
Uses Hardware Acceleration for decode. Supports baseline JPEG images with single scan with 1 or 3 channels. 410 and 411 chroma subsamplings are not supported.


NVJPEG_BACKEND_GPU_HYBRID_DEVICE
Supports input bitstream on device memory. Can be used only with batched decode APIs for baseline JPEG images without restart intervals.


NVJPEG_BACKEND_HARDWARE_DEVICE
Supports input bitstream on device memory. Can be used only with batched decode APIs. Uses Hardware Acceleration for decode. Supports baseline JPEG images with single scan with 1 or 3 channels. 410 and 411 chroma subsamplings are not supported.


NVJPEG_BACKEND_LOSSLESS_JPEG
Supports lossless jpeg bitstreams as defined in the jpeg 92 standard. Bitstreams with up to 2 channels and prediction mode 1 are supported.






2.2.2. nvJPEG Bitstream Handleï


struct nvjpegJpegStream;
typedef struct nvjpegJpegStream* nvjpegJpegStream_t;


This handle stores the bit-stream parameters on the host. This helps retrieve bitstream meta-data using APIs defined in nvJPEG Stream API.



2.2.3. nvJPEG Decode Device Buffer Handleï


struct nvjpegBufferDevice;
typedef struct nvjpegBufferDevice* nvjpegBufferDevice_t;


This nvjpegBufferDevice_t is used by decoder states to store the intermediate information in device memory.



2.2.4. nvJPEG Decode Parameter Handleï


struct nvjpegDecodeParams;
typedef struct nvjpegDecodeParams* nvjpegDecodeParams_t;


This decoder parameter handle stores the parameters like output format, and the ROI decode parameters that are set using APIs defined in nvJPEG Chroma Subsampling.



2.2.5. nvJPEG Decode Pinned Buffer Handleï


struct nvjpegBufferPinned;
typedef struct nvjpegBufferPinned* nvjpegBufferPinned_t;


This nvjpegBufferPinned_t handle is used by decoder states to store the intermediate information on pinned memory.



2.2.6. nvJPEG Decoder Handleï


struct nvjpegJpegDecoder;
typedef struct nvjpegJpegDecoder* nvjpegJpegDecoder_t;


This decoder handle stores the intermediate decoder data, which is shared across the decoding stages. This decoder handle is initialized for a given nvjpegBackend_t. It is used as input to the Decode APIâDecoupled Decoding.



2.2.7. nvJPEG Host Pinned Memory Allocator Interfaceï


typedef int (*tPinnedMalloc)(void**, size_t, unsigned int flags);
typedef int (*tPinnedFree)(void*);
typedef struct {
    tPinnedMalloc pinned_malloc;
    tPinnedFree pinned_free;
} nvjpegPinnedAllocator_t;


When the nvjpegPinnedAllocator_t *allocator parameter in the nvjpegCreateEx() function is set as a pointer to the above nvjpegPinnedAllocator_t structure, then this structure will be used for allocating and releasing host pinned memory for copying data to/from device. The function prototypes for the memory allocation and memory freeing functions are similar to the cudaHostAlloc() and cudaFreeHost() functions. They will return 0 in case of success, and non-zero otherwise.
However, if the nvjpegPinnedAllocator_t *allocator parameter in the nvjpegCreateEx() function is set to NULL, then the default memory allocation functions cudaHostAlloc() and cudaFreeHost() will be used. When using nvjpegCreate() or nvjpegCreateSimple() function to create library handle, the default host pinned memory allocator will be used.



2.2.8. nvJPEG Extended Host Pinned Memory Allocator Interfaceï


typedef int (*tPinnedMallocV2)(void* ctx, void **ptr, size_t size, cudaStream_t stream);
typedef int (*tPinnedFreeV2)(void* ctx, void *ptr, size_t size, cudaStream_t stream);
typedef struct
{
tPinnedMallocV2 pinned_malloc;
tPinnedFreeV2 pinned_free;
void *pinned_ctx;
} nvjpegPinnedAllocatorV2_t;


Extended pinned allocators support stream ordered allocations along with user defined context information pinned_ctx. When invoking the allocators, nvJPEG will pass pinned_ctx as input to the extended pinned allocators.



2.2.9. nvJPEG Imageï


typedef struct {
    unsigned char * channel[NVJPEG_MAX_COMPONENT];
    size_t pitch[NVJPEG_MAX_COMPONENT];
} nvjpegImage_t;


The nvjpegImage_t structure (or structures, in the case of batched decode) is used to fill with the pointers and pitches of allocated buffers. The nvjpegImage_t structure that holds the output pointers.







Member
Description


NVJPEG_MAX_COMPONENT
Maximum number of color components the nvJPEG library supports. For generic images, this is the maximum number of encoded channels that the library is able to decompress.






2.2.10. nvJPEG Device Memory Allocator Interfaceï


typedef int (*tDevMalloc)(void**, size_t);
typedef int (*tDevFree)(void*);
typedef struct {
    tDevMalloc dev_malloc;
    tDevFree dev_free;
} nvjpegDevAllocator_t;


Users can tell the library to use their own device memory allocator. The function prototypes for the memory allocation and memory freeing functions are similar to the cudaMalloc()and cudaFree() functions. They should return 0 in case of success, and non-zero otherwise. A pointer to the nvjpegDevAllocator_t structure, with properly filled fields, should be provided to the nvjpegCreate() function. NULL is accepted, in which case the default memory allocation functions cudaMalloc() and cudaFree() is used.
When the nvjpegDevAllocator_t *allocator parameter in the nvjpegCreate() or nvjpegCreateEx() function is set as a pointer to the above nvjpegDevAllocator_t structure, then this structure is used for allocating and releasing the device memory. The function prototypes for the memory allocation and memory freeing functions are similar to the cudaMalloc() and cudaFree() functions. They should return 0 in case of success, and non-zero otherwise.
However, if the nvjpegDevAllocator_t *allocator parameter in the nvjpegCreate() or nvjpegCreateEx() function is set to NULL, then the default memory allocation functions cudaMalloc() and cudaFree() will be used. When using nvjpegCreateSimple() function to create library handle the default device memory allocator will be used.



2.2.11. nvJPEG Extended Device Memory Allocator Interfaceï


typedef int (*tDevMallocV2)(void* ctx, void **ptr, size_t size, cudaStream_t stream);
typedef int (*tDevFreeV2)(void* ctx, void *ptr, size_t size, cudaStream_t stream);
typedef struct
  {
    tDevMallocV2 dev_malloc;
    tDevFreeV2 dev_free;
    void *dev_ctx;
  } nvjpegDevAllocatorV2_t;


Extended device allocators support stream ordered allocations along with user defined context information dev_ctx. When invoking the allocators, nvJPEG will pass dev_ctx as input to the extended device allocators.



2.2.12. nvJPEG Opaque JPEG Decoding State Handleï


struct nvjpegJpegState;
typedef struct nvjpegJpegState* nvjpegJpegState_t;


The nvjpegJpegState structure stores the temporary JPEG information. It should be initialized before any usage. This JPEG state handle can be reused after being used in another decoding. The same JPEG handle should be used across the decoding phases for the same image or batch. Multiple threads are allowed to share the JPEG state handle only when processing same batch during first phase (nvjpegDecodePhaseOne) .



2.2.13. nvJPEG Opaque Library Handle Structï


struct nvjpegHandle;
typedef struct nvjpegHandle* nvjpegHandle_t;


The library handle is used in any consecutive nvJPEG library calls, and should be initialized first.
The library handle is thread safe, and can be used by multiple threads simultaneously.



2.2.14. nvJPEG Output Pointer Structï


typedef struct {
    unsigned char * channel[NVJPEG_MAX_COMPONENT];
    size_t pitch[NVJPEG_MAX_COMPONENT];
} nvjpegImage_t;


The nvjpegImage_tstruct holds the pointers to the output buffers, and holds the corresponding strides of those buffers for the image decoding.
Refer to Single Image Decoding on how to set up the nvjpegImage_t struct.



2.2.15. nvJPEG Jpeg Encodingï


typedef enum {
    NVJPEG_ENCODING_UNKNOWN                         = 0x0,
    NVJPEG_ENCODING_BASELINE_DCT                    = 0xc0,
    NVJPEG_ENCODING_EXTENDED_SEQUENTIAL_DCT_HUFFMAN = 0xc1,
    NVJPEG_ENCODING_PROGRESSIVE_DCT_HUFFMAN         = 0xc2,
    NVJPEG_ENCODING_LOSSLESS_HUFFMAN                = 0xc3
} nvjpegJpegEncoding_t;


The nvjpegJpegEncoding_t enum lists the JPEG encoding types that are supported by the nvJPEG library The enum values are based on the markers defined in the JPEG specification







Member
Description


NVJPEG_ENCODING_UNKNOWN
This value is returned for all the JPEG markers not supported by the nvJPEG library.


NVJPEG_ENCODING_BASELINE_DCT
Corresponds to the JPEG marker 0xc0, refer to the JPEG spec for more details.


NVJPEG_ENCODING_EXTENDED_SEQUENTIAL_DCT_HUFFMAN
Corresponds to the JPEG marker 0xc1, refer to the JPEG spec for more details.


NVJPEG_ENCODING_PROGRESSIVE_DCT_HUFFMAN
Corresponds to the JPEG marker 0xc2, refer to the JPEG spec for more details.


NVJPEG_ENCODING_LOSSLESS_HUFFMAN
Corresponds to the JPEG marker 0xc3, refer to the JPEG spec for more details.






2.2.16. nvJPEG Scale Factorï


typedef enum {
    NVJPEG_SCALE_NONE = 0,
    NVJPEG_SCALE_1_BY_2 = 1,
    NVJPEG_SCALE_1_BY_4 = 2,
    NVJPEG_SCALE_1_BY_8 = 3
} nvjpegScaleFactor_t;


The nvjpegScaleFactor_t enum lists all the scale factors supported by the library. This feature is supported when nvjpeg handles are intstaniated using NVJPEG_BACKEND_HARDWARE







Member
Description


NVJPEG_SCALE_NONE
Decoded output is not scaled


NVJPEG_SCALE_1_BY_2
Decoded output width and height are scaled by a factor of 1/2


NVJPEG_SCALE_1_BY_4
Decoded output width and height are scaled by a factor of 1/4


NVJPEG_SCALE_1_BY_8
Decoded output width and height are scaled by a factor of 1/8






2.2.17. nvJPEG Flagsï


#define NVJPEG_FLAGS_DEFAULT 0



#define NVJPEG_FLAGS_HW_DECODE_NO_PIPELINE 1



#define NVJPEG_FLAGS_ENABLE_MEMORY_POOLS   2



#define NVJPEG_FLAGS_BITSTREAM_STRICT      4



#define NVJPEG_FLAGS_REDUCED_MEMORY_DECODE            8



#define NVJPEG_FLAGS_REDUCED_MEMORY_DECODE_ZERO_COPY 16



#define NVJPEG_FLAGS_UPSAMPLING_WITH_INTERPOLATION   32


nvJPEG flags provide additional controls when initializing the library using nvjpegCreateEx() or nvjpegCreateExV2(). It is possible to combine the flags as they are bit fields.







Member
Description


NVJPEG_FLAGS_DEFAULT
Corresponds to default library behavior.


NVJPEG_FLAGS_HW_DECODE_NO_PIPELINE
To be used when the library is initialized with NVJPEG_BACKEND_HARDWARE. It will be ignored for other back-ends. nvjpeg in batched decode mode buffers additional images to achieve optimal performance. Use this flag to disable buffering of additional images.


NVJPEG_FLAGS_ENABLE_MEMORY_POOLS [Deprecated]
Starting with CUDA 11.1 this flag will be ignored.


NVJPEG_FLAGS_BITSTREAM_STRICT
nvJPEG library will try to decode a bitstream even if it doesnât strictly follow the JPEG specification. Using this flag will return an error in such cases.


NVJPEG_FLAGS_REDUCED_MEMORY_DECODE
When using NVJPEG_BACKEND_HYBRID or NVJPEG_BACKEND_GPU_HYBRID backends, enabling this flag will reduce the memory usage of the decoding whenever possible.


NVJPEG_FLAGS_REDUCED_MEMORY_DECODE_ZERO_COPY
Using this flag enables zero-copy memory when feasible on supported platforms.


NVJPEG_FLAGS_UPSAMPLING_WITH_INTERPOLATION
Using this flag enables the decoder to use interpolation when performing chroma upsampling during the YCbCr to RGB conversion stage.






2.2.18. nvJPEG Exif Orientationï


typedef enum {
    NVJPEG_ORIENTATION_UNKNOWN = 0,
    NVJPEG_ORIENTATION_NORMAL = 1,
    NVJPEG_ORIENTATION_FLIP_HORIZONTAL = 2,
    NVJPEG_ORIENTATION_ROTATE_180 = 3,
    NVJPEG_ORIENTATION_FLIP_VERTICAL = 4,
    NVJPEG_ORIENTATION_TRANSPOSE = 5,
    NVJPEG_ORIENTATION_ROTATE_90 = 6,
    NVJPEG_ORIENTATION_TRANSVERSE = 7,
    NVJPEG_ORIENTATION_ROTATE_270 = 8
} nvjpegExifOrientation_t;


The nvjpegExifOrientation_t enum represents the exif orientation in a jfif(jpeg) file. Exif orientation information is typically used to denote the digital camera sensor orientation at the time of image capture.







Member
Description


NVJPEG_ORIENTATION_UNKNOWN
Exif orientation information is not available in the bitstream.


NVJPEG_ORIENTATION_NORMAL
Decode output remains unchanged.


NVJPEG_ORIENTATION_FLIP_HORIZONTAL
Decoded output should be mirrored/flipped horizontally.


NVJPEG_ORIENTATION_ROTATE_180
Decoded output should be rotated 180 degrees.


NVJPEG_ORIENTATION_FLIP_VERTICAL
Decoded output should be mirrored/flipped vertically.


NVJPEG_ORIENTATION_TRANSPOSE
Decoded output should be flipped/mirrored horizontally followed by a 90 degrees counter-clockwise rotation.


NVJPEG_ORIENTATION_ROTATE_90
Decoded output should be rotated 90 degrees counter-clockwise.


NVJPEG_ORIENTATION_TRANSVERSE
Decoded output should be flipped/mirrored horizontally followed by a 270 degrees counter-clockwise rotation.


NVJPEG_ORIENTATION_ROTATE_270
Decoded output should be rotated 270 degrees counter-clockwise.