2.3.3. Decode APIâSingle Phaseï

Functions for decoding single image or batched images in a single phase.


2.3.3.1. ânvjpegDecode()ï

Decodes a single image, and writes the decoded image in the desired format to the output buffers. This function is asynchronous with respect to the host. All GPU tasks for this function will be submitted to the provided stream.
From CUDA 11 onwards, nvjpegDecode() picks the best available back-end for a given image, user no longer has control on this. If there is a need to select the back-end, then consider using nvjpegDecodeJpeg(). This is a new API added in CUDA 11 which allows user to control the back-end.
Signature:

nvjpegStatus_t nvjpegDecode(
    nvjpegHandle_t          handle,
    nvjpegJpegState_t       jpeg_handle,
    const unsigned char     *data,
    size_t                  length,
    nvjpegOutputFormat_t    output_format,
    nvjpegImage_t           *destination,
    cudaStream_t            stream);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
The library handle.


nvjpegJpegState_t jpeg_handle
Input
Host
The image state handle.


const unsigned char *data
Input
Host
Pointer to the encoded data.


size_t length
Input
Host
Size of the encoded data in bytes.


nvjpegOutputFormat_t output_format
Input
Host
Format in which the decoded output will be saved.


nvjpegImage_t *destination
Input/Output
Host/Device
Pointer to the structure that describes the output destination. This structure should be on the host (CPU), but the pointers in this structure should be pointing to the device (i.e., GPU) memory. See nvjpegImage_t.


cudaStream_t stream
Input
Host
The CUDA stream where all of the GPU work will be submitted.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.3.2. ânvjpegDecodeBatchedInitialize()ï

This function initializes the batched decoder state. The initialization parameters include the batch size, the maximum number of CPU threads, and the specific output format in which the decoded image will be saved. This function should be called once, prior to decoding the batches of images. Any currently running batched decoding should be finished before calling this function.
Signature:

nvjpegStatus_t nvjpegDecodeBatchedInitialize(
    nvjpegHandle_t          handle,
    nvjpegJpegState_t       jpeg_handle,
    int                     batch_size,
    int                     max_cpu_threads,
    nvjpegOutputFormat_t    output_format);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
The library handle.


nvjpegJpegState_t jpeg_handle
Input
Host
The image state handle.


int batch_size
Input
Host
Batch size.


int max_cpu_threads
Input
Host
This parameter is no longer used by the library.


nvjpegOutputFormat_t output_format
Input
Host
Format in which the decoded output will be saved.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.3.3. ânvjpegDecodeBatched()ï

Decodes the batch of images, and writes them to the buffers described in the destination parameter in a format provided to nvjpegDecodeBatchedInitialize() function. This function is asynchronous with respect to the host. All GPU tasks for this function will be submitted to the provided stream.
Signature:

nvjpegStatus_t nvjpegDecodeBatched(
    nvjpegHandle_t             handle,
    nvjpegJpegState_t          jpeg_handle,
    const unsigned char *const *data,
    const size_t               *lengths,
    nvjpegImage_t              *destinations,
    cudaStream_t               stream);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
The library handle.


nvjpegJpegState_t jpeg_handle
Input
Host
The image state handle.


const unsigned char *const *data
Input
Host
Pointer to the first element of array of the input data. The size of the array is assumed to be batch_size provided to nvjpegDecodeBatchedInitialize() batch initialization function.


const size_t *lengths
Input
Host
Pointer to the first element of array of input sizes. Size of array is assumed to be batch_size provided to nvjpegDecodeBatchedInitialize(), the batch initialization function.


nvjpegImage_t *destinations
Input/Output
Host/Device
Pointer to the first element of array of output descriptors. The size of array is assumed to be batch_size provided to nvjpegDecodeBatchedInitialize(), the batch initialization function. See also nvjpegImage_t.


cudaStream_t stream
Input
Host
The CUDA stream where all the GPU work will be submitted.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.3.4. nvjpegDecodeBatchedEx()ï

This API helps to Decodes the batch of images with ROI, and writes them to the buffers described in the destination parameter in a format provided to nvjpegDecodeBatchedInitialize() function. This function is asynchronous with respect to the host. All GPU tasks for this function will be submitted to the provided stream.
Signature:

nvjpegStatus_t nvjpegDecodeBatchedEx(
    nvjpegHandle_t handle,
    nvjpegJpegState_t jpeg_handle,
    const unsigned char *const *data,
    const size_t *lengths,
    nvjpegImage_t *destinations,
    nvjpegDecodeParams_t *decode_params,
    cudaStream_t stream);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
nvjpeg library handle.


nvjpegJpegState_t jpeg_handle
Input
Host
The image state handle.


const unsigned char *const *data
Input
Host
Pointer to the first element of array of the input data. The size of the array is assumed to be batch_size provided to nvjpegDecodeBatchedInitialize() batch initialization function.


const size_t *lengths
Input
Host
Pointer to the first element of array of input sizes.


nvjpegImage_t *destinations
Input/Output
Host/Device
Pointer to the first element of array of output descriptors. The size of array is assumed to be batch_size provided to nvjpegDecodeBatchedInitialize(), the batch initialization function. See also nvjpegImage_t.


nvjpegDecodeParams_t *decode_params
Input
Host
Setting ROI Decode parameters


cudaStream_t stream
Input
Host
The CUDA stream where all the GPU work will be submitted.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.3.5. nvjpegDecodeBatchedSupported()ï

This API helps determine whether an image can be decoded by ânvjpegDecodeBatched(). User can parse the bitstream header using nvjpegJpegStreamParseHeader() and then call this API to determine whether the image can be decoded.
Signature:

nvjpegStatus_t nvjpegDecodeBatchedSupported(
    nvjpegHandle_t handle,
    nvjpegJpegStream_t jpeg_stream,
    int* is_supported);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
nvjpeg library handle.


nvjpegJpegStream_t jpeg_stream
Input
Host
Bit stream meta-data.


int* is_supported
Output
Host
Return value of 0 indicates bitstream can be decoded by the decoder_handle, non zero value indicates that the bitstream is not supported.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.3.6. nvjpegDecodeBatchedSupportedEx()ï

This API helps determine whether an image can be decoded by ânvjpegDecodeBatched(). User can parse the bitstream header using nvjpegJpegStreamParseHeader() and set the ROI in the decode params then call this API to determine whether the image can be decoded.
Signature:

nvjpegStatus_t nvjpegDecodeBatchedSupportedEx(
    nvjpegHandle_t handle,
    nvjpegJpegStream_t jpeg_stream,
    nvjpegDecodeParams_t decode_params,
    int* is_supported);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
nvjpeg library handle.


nvjpegJpegStream_t jpeg_stream
Input
Host
Bit stream meta-data.


nvjpegDecodeParams_t decode_params
Input
Host
Setting ROI Decode parameters.


int* is_supported
Output
Host
Return value of 0 indicates bitstream can be decoded by the decoder_handle, a non zero value indicates that the bitstream is not supported.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.3.7. nvjpegDecodeBatchedPreAllocate()ï

This is an experimental API that can be used with ânvjpegDecodeBatched(). When decoding images with varying sizes and chroma subsampling, performance is limited by the repeated cuda calls made by the library to free/allocate device memory. This API attempts to avoid this problem by allocating device memory prior to the actual decoding. Users have the option to call this API with values that are unlikely to be exceeded when ânvjpegDecodeBatched() is called.

Note
Note:
This functionality is available only when the nvjpegHandle_tis instantiated using NVJPEG_BACKEND_HARDWARE. It is currently a No Op for other backends.
This API only provides a hint for initial allocation. If the image dimensions at the time of decode exceed what was provided, then the library will resize the device buffers.
If the images being decoded have different chroma subsamplings, then the chroma_subsampling field should be set to NVJPEG_CSS_444 to ensure that the device memory can be reused.

Signature:

nvjpegStatus_t nvjpegDecodeBatchedPreAllocate(
    nvjpegHandle_t          handle,
    nvjpegJpegState_t       jpeg_handle,
    int                     batch_size,
    int                     width,
    int                     height,
    nvjpegChromaSubsampling_t chroma_subsampling,
    nvjpegOutputFormat_t    output_format);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
The library handle.


nvjpegJpegState_t jpeg_handle
Input
Host
The image state handle.


int batch_size
Input
Host
Batch size.


int width
Input
Host
Maximum width of image that will be decoded.


int height
Input
Host
Maximum height of image that will be decoded.


nvjpegChromaSubsampling_t chroma_subsampling
Input
Host
Chroma-subsampling of the images.


nvjpegOutputFormat_t output_format
Input
Host
Format in which the decoded output will be saved.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.3.8. nvjpegDecodeBatchedParseJpegTables()ï

To be used along with batched decode APIs when decoding JPEG bitstreams from a TIFF file. This function parses the JPEG tables bitstream to extract the JPEG tables. The external Huffman and quantization tables will be applied to all the JPEG bitstreams in the batch.
Signature:

nvjpegStatus_t nvjpegDecodeBatchedParseJpegTables(
    nvjpegHandle_t handle,
    nvjpegJpegState_t jpeg_handle,
    const unsigned char *data,
    const size_t length);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
The library handle.


nvjpegJpegState_t jpeg_handle
Input/Output
Host/Device
The image state handle.


const unsigned char *data
Input
Host
Pointer to the JPEG tables bitstream. Can be set to NULL to reset the jpeg tables.


size_t length
Input
Host
JPEG tables bitstream size.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.