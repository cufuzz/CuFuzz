2.3.1. nvJPEG Helper API Referenceï



2.3.1.1. nvjpegGetProperty()ï

Gets the numeric value for the major or minor version, or the patch level, of the nvJPEG library.
Signature:

nvjpegStatus_t nvjpegGetProperty(
    libraryPropertyType   type,
    int                   *value);


Parameters:









Parameter
Input / Output
Memory
Description


libraryPropertyType type
Input
Host
One of the supported libraryPropertyType values, that is, MAJOR_VERSION, MINOR_VERSION or PATCH_LEVEL.


int *value
Output
Host
The numeric value corresponding to the specific libraryPropertyType requested.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.2. nvjpegGetCudartProperty()ï

Gets the numeric value for the major version, minor version, or the patch level of the CUDA toolkit that was used to build nvJPEG library. For the same information on the nvJPEG library itself, see nvjpegGetProperty().
Signature:

nvjpegStatus_t nvjpegGetCudartProperty(
    libraryPropertyType   type,
    int                   *value);


Parameters:









Parameter
Input / Output
Memory
Description


libraryPropertyType type
Input
Host
One of the supported libraryPropertyType values, that is, MAJOR_VERSION, MINOR_VERSION or PATCH_LEVEL.


int *value
Output
Host
The numeric value corresponding to the specific libraryPropertyType requested.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.3. nvjpegCreate() [DEPRECATED]ï

Allocates and initializes the library handle.

Note
This function is deprecated. Use either nvjpegCreateSimple() or nvjpegCreateEx() functions to create the library handle.

Signature:

nvjpegStatus_t nvjpegCreate(
    nvjpegBackend_t         backend,
    nvjpegDevAllocator_t        *allocator,
    nvjpegHandle_t          *handle);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegBackend_t backend
Input
Host
Backend parameter for ânvjpegDecodeBatched() API. If this is set to DEFAULT then it automatically chooses one of the underlying algorithms.


nvjpegDevAllocator_t *allocator
Input
Host
Device memory allocator. See nvJPEG Device Memory Allocator Interface structure description. If NULL is provided, then the default CUDA runtime cudaMalloc()and cudaFree() functions will be used.


nvjpegHandle_t *handle
Input/Output
Host
The library handle.



The nvjpegBackend_t parameter is an enum type, with the below enumerated list values:

typedef enum {
    NVJPEG_BACKEND_DEFAULT = 0,
    NVJPEG_BACKEND_HYBRID = 1,
} nvjpegBackend_t;


Returns:
nvjpegStatus_t - An error code as specified in nvJPEG API Return Codes.



2.3.1.4. nvjpegCreateSimple()ï

Allocates and initializes the library handle, with default codec implementations selected by library and default memory allocators.
Signature:

nvjpegStatus_t nvjpegCreateSimple(nvjpegHandle_t *handle);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t *handle
Input/Output
Host
The library handle.



Returns:
nvjpegStatus_t - An error code as specified in nvJPEG API Return Codes.



2.3.1.5. nvjpegCreateEx()ï

Allocates and initializes the library handle using the provided arguments.
Signature:

nvjpegStatus_t nvjpegCreateEx(nvjpegBackend_t backend,
    nvjpegDevAllocator_t *dev_allocator,
    nvjpegPinnedAllocator_t *pinned_allocator,
    unsigned int flags,
    nvjpegHandle_t *handle);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegBackend_t backend
Input
Host
Backend parameter for ânvjpegDecodeBatched() API. If this is set to DEFAULT then it automatically chooses one of the underlying algorithms.


nvjpegDevAllocator_t *dev_allocator
Input
Host
Device memory allocator. See nvjpegDevAllocator_t structure description. If NULL is provided, then the default CUDA runtime functions cudaMalloc() and cudaFree() will be used.


nvjpegPinnedAllocator_t *pinned_allocator
Input
Host
Pinned host memory allocator. See nvjpegPinnedAllocator_tstructure description. If NULL is provided, then the default CUDA runtime functions cudaHostAlloc() and cudaFreeHost() will be used.


unsigned int flags
Input
Host
Refer to nvJPEG Flags for details.


nvjpegHandle_t *handle
Input/Output
Host
The library handle.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.6. nvjpegCreateExV2()ï

Allocates and initializes the library handle using the provided arguments.
Signature:

nvjpegStatus_t nvjpegCreateExV2(nvjpegBackend_t backend,
          nvjpegDevAllocatorV2_t *dev_allocator,
          nvjpegPinnedAllocatorV2_t *pinned_allocator,
          unsigned int flags,
          nvjpegHandle_t *handle);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegBackend_t backend
Input
Host
Backend parameter for ânvjpegDecodeBatched() API. If this is set to DEFAULT then it automatically chooses one of the underlying algorithms.


nvjpegDevAllocatorV2_t *dev_allocator
Input
Host
Extended device memory allocator. See nvjpegDevAllocatorV2_t_t structure description. Cannot be NULL.


nvjpegPinnedAllocatorV2_t *pinned_allocator
Input
Host
Extended pinned memory allocator. See nvjpegPinnedAllocatorV2_tstructure description. Cannot be NULL.


unsigned int flags
Input
Host
Refer to nvJPEG Flags for details.


nvjpegHandle_t *handle
Input/Output
Host
The library handle.



Returns:
nvjpegStatus_t - An error code as specified in nvJPEG API Return Codes.



2.3.1.7. nvjpegDestroy()ï

Releases the library handle.
Signature:

nvjpegStatus_t nvjpegDestroy(nvjpegHandle_t handle);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input/Output
Host
The library handle to release.



Returns:
nvjpegStatus_t - An error code as specified in nvJPEG API Return Codes.



2.3.1.8. nvjpegSetDeviceMemoryPadding()ï

Use the provided padding for all device memory allocations with specified library handle. A large number will help to amortize the need for device memory reallocations when needed.
Signature:

nvjpegStatus_t nvjpegSetDeviceMemoryPadding(
    size_t padding,
    nvjpegHandle_t handle);


Parameters:









Parameter
Input / Output
Memory
Description


size_t padding
Input
Host
Device memory padding to use for all further device memory allocations.


nvjpegHandle_t handle
Input/Output
Host
The library handle.



Returns:
nvjpegStatus_t - An error code as specified in nvJPEG API Return Codes.



2.3.1.9. nvjpegGetDeviceMemoryPadding()ï

Retrieve the device memory padding that is currently used for the specified library handle.
Signature:

nvjpegStatus_t nvjpegGetDeviceMemoryPadding(
    size_t *padding,
    nvjpegHandle_t handle);


Parameters:









Parameter
Input / Output
Memory
Description


size_t *padding
Output
Host
Device memory padding that is currently used for device memory allocations.


nvjpegHandle_t handle
Input/Output
Host
The library handle.



Returns:
nvjpegStatus_t - An error code as specified in nvJPEG API Return Codes.



2.3.1.10. nvjpegSetPinnedMemoryPadding()ï

Use the provided padding for all pinned host memory allocations with specified library handle. A large number will help to amortize the need for pinned host memory reallocations when needed.
Signature:

nvjpegStatus_t nvjpegSetPinnedMemoryPadding(
    size_t padding,
    nvjpegHandle_t handle);


Parameters:









Parameter
Input / Output
Memory
Description


size_t padding
Input
Host
Pinned host memory padding to use for all further pinned host memory allocations.


nvjpegHandle_t handle
Input/Output
Host
The library handle.



Returns:
nvjpegStatus_t - An error code as specified in nvJPEG API Return Codes.



2.3.1.11. nvjpegGetPinnedMemoryPadding()ï

Retrieve the pinned host memory padding that is currently used for specified library handle.
Signature:

nvjpegStatus_t nvjpegGetPinnedMemoryPadding(
    size_t *padding,
    nvjpegHandle_t handle);


Parameters:









Parameter
Input / Output
Memory
Description


size_t *padding
Output
Host
Pinned host memory padding that is currently used for pinned host memory allocations.


nvjpegHandle_t handle
Input/Output
Host
The library handle.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.12. nvjpegGetHardwareDecoderInfo()ï

Retrieve hardware decoder details such as number of engines and number of cores available in each engine.
Signature:

nvjpegStatus_t nvjpegGetHardwareDecoderInfo(nvjpegHandle_t handle,
        unsigned int* num_engines,
        unsigned int* num_cores_per_engine);


Parameters:









nvjpegHandle_t handle
Input
Host
The library handle.


unsigned int* num_engines
Input/Output
Host
Retrieves number of engines available for decode. Return value of 0 indicates that hardware decoder is not available.


unsigned int* num_cores_per_engine
Input/Output
Host
Retrieves number of cores per engine. Return value of 0 indicates that hardware decoder is not available.



Returns:
nvjpegStatus_t - An error code as specified in nvJPEG API Return Codes.



2.3.1.13. nvjpegJpegStateCreate()ï

Allocates and initializes the internal structure required for the JPEG processing.
Signature:

nvjpegStatus_t nvjpegJpegStateCreate(
    nvjpegHandle_t      handle,
    nvjpegJpegState_t   *jpeg_handle);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
The library handle.


nvjpegJpegState_t *jpeg_handle
Input/Output
Host
The image state handle.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.14. nvjpegJpegStateDestroy()ï

Releases the image internal structure.
Signature:

nvjpegStatus_t nvjpegJpegStateDestroy(nvjpegJpegState handle);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegJpegState handle
Input/Output
Host
The image state handle.



Returns:
nvjpegStatus_t - An error code as specified in nvJPEG API Return Codes.



2.3.1.15. nvjpegDecoderCreate()ï

Creates a decoder handle.
Signature:

nvjpegStatus_t nvjpegDecoderCreate(
    nvjpegHandle_t nvjpeg_handle,
    nvjpegBackend_t implementation,
    nvjpegJpegDecoder_t* decoder_handle);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t nvjpeg_handle
Input
Host
Library handle.


nvjpegBackend_t backend
Input
Host
Backend parameter for the decoder_handle.The back end applies to all the functions under the decoupled API, when called with this handle.


nvjpegJpegDecoder_t decoder_handle
Input/Output
Host
Decoder state handle.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.16. nvjpegDecoderDestroy()ï

Destroys the decoder handle.
Signature:

nvjpegStatus_t nvjpegDecoderDestroy(
    nvjpegJpegDecoder_t decoder_handle);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegJpegDecoder_t decoder_handle
Input/Output
Host
Decoder handle.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.17. nvjpegDecoderJpegSupported()ï

Determines whether the decoder_handle is able to handle the bit-stream stored in jpeg_stream.
Signature:

nvjpegStatus_t nvjpegDecoderJpegSupported(
    nvjpegJpegDecoder_t decoder_handle,
    nvjpegJpegStream_t jpeg_stream,
    nvjpegDecodeParams_t decode_params,
    int* is_supported);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegJpegDecoder_t decoder_handle
Input
Host
Decoder state handle


nvjpegJpegStream_t jpeg_stream
Input
Host
Bit stream meta-data


nvjpegDecodeParams_t decode_params
Input
Host
Decoder output configuration


int* is_supported
Output
Host
Return value of 0 indicates bitstream can be decoded by the decoder_handle, non zero value indicates that the bitstream is not supported



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.18. nvjpegDecoderStateCreate()ï

Creates the decoder_state internal structure. The decoder_state is associated with the nvJPEG Backend implementation that was used to create the decoder_handle.
Signature:

nvjpegStatus_t nvjpegDecoderStateCreate(
    nvjpegHandle_t nvjpeg_handle,
    nvjpegJpegDecoder_t decoder_handle,
    nvjpegJpegState_t* decoder_state);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t nvjpeg_handle
Input
Host
Library handle.


nvjpegJpegDecoder_t decoder_handle
Input
Host
Decoder handle.


nvjpegJpegState_t* decoder_state
Input/Output
Host
nvJPEG Image State Handle.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.19. nvjpegJpegStreamCreate()ï

Creates jpeg_stream that is used to parse the JPEG bitstream and store bitstream parameters.
Signature:

nvjpegStatus_t nvjpegJpegStreamCreate(
    nvjpegHandle_t handle,
    nvjpegJpegStream_t *jpeg_stream);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
Library handle


nvjpegJpegStream_t *jpeg_stream
Input
Host
Bitstream handle



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.20. nvjpegJpegStreamDestroy()ï

Destroys the jpeg_stream structure.
Signature:

nvjpegStatus_t nvjpegJpegStreamDestroy(
    nvjpegJpegStream_t *jpeg_stream);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegJpegStream_t *jpeg_stream
Input
Host
Bitstream handle



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.21. nvjpegBufferPinnedCreate()ï

Creates a pinned buffer handle.
Signature:

nvjpegStatus_t nvjpegBufferPinnedCreate(
    nvjpegHandle_t handle,
    nvjpegPinnedAllocator_t* pinned_allocator,
    nvjpegBufferPinned_t* buffer);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
Library handle.


nvjpegPinnedAllocator_t* pinned_allocator
Input
Host
Pinned host memory allocator. See nvjpegPinnedAllocator_t structure description.


nvjpegBufferPinned_t* buffer
Input/Output
Host
nvJPEG pinned buffer object.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.22. nvjpegBufferPinnedCreateV2()ï

Creates a pinned buffer handle using extended allocators.
Signature:

nvjpegStatus_t nvjpegBufferPinnedCreateV2(
    nvjpegHandle_t handle,
    nvjpegPinnedAllocatorV2_t* pinned_allocator,
    nvjpegBufferPinned_t* buffer);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
Library handle.


nvjpegPinnedAllocatorV2_t* pinned_allocator
Input
Host
Extended pinned host memory allocator. See nvJPEG Extended Host Pinned Memory Allocator Interface structure description.


nvjpegBufferPinned_t* buffer
Input/Output
Host
nvJPEG pinned buffer object.



Returns:
nvjpegStatus_t - An error code as specified in nvJPEG API Return Codes.



2.3.1.23. nvjpegBufferPinnedDestroy()ï

Destroys a pinned buffer handle.
Signature:

nvjpegStatus_t nvjpegBufferPinnedDestroy(
    nvjpegBufferPinned_t buffer);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegBufferPinned_t buffer
Input
Host
nvJPEG pinned buffer object.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.24. nvjpegStateAttachPinnedBuffer()ï

Link the nvJPEG pinned buffer handle to decoder_state. The pinned_buffer is used by the decoder to store the intermediate information that is used across the decoding stages. Pinned buffer can be attached to different decoder states, which helps to switch between implementations without allocating extra memory.
Signature:

nvjpegStatus_t nvjpegStateAttachPinnedBuffer(
    nvjpegJpegState_t decoder_state,
    nvjpegBufferPinned_t pinned_buffer);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegJpegState_t decoder_state
Input
Host
nvJPEG decoder state.


nvjpegBufferPinned_t pinned_buffer
Input
Host
nvJPEG pinned buffer container.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.25. nvjpegBufferPinnedRetrieve()ï

Retrieves the pinned memory pointer and size from the nvJPEG pinned buffer handle. Allows the application to re-use the memory once the decode is complete.
Signature:

nvjpegStatus_t nvjpegBufferPinnedRetrieve(
    nvjpegBufferPinned_t buffer,
    size_t* size, void** ptr);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegBufferPinned_t buffer
Input
Host
nvJPEG pinned buffer container.


size_t* size
Input/Output
Host
Size in bytes of the pinned buffer.


void** ptr
Input/Output
Host
Pointer to the pinned buffer.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.26. nvjpegBufferPinnedResize()ï

Resize the pinned buffer to the specified size in bytes. This API can be used to pre-allocate the pinned buffer
to a large value and avoid allocator calls during decode.
Signature:

nvjpegStatus_t nvjpegBufferPinnedResize(nvjpegBufferPinned_t buffer,
   size_t size,
   cudaStream_t stream);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegBufferPinned_t buffer
Input
Host
nvJPEG pinned buffer container.


size_t* size
Input
Host
Size in bytes of the pinned buffer.


cudaStream_t stream
Input
Host
CUDA stream to use when nvjpegBufferPinned_t buffer is initialized using stream ordered allocators.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.27. nvjpegBufferDeviceCreate()ï

Creates the device buffer handle.
Signature:

nvjpegStatus_t nvjpegBufferDeviceCreate(
    nvjpegHandle_t handle,
    nvjpegDevAllocator_t* device_allocator,
    nvjpegBufferDevice_t* buffer);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
Library handle.


nvjpegDevAllocator_t* device_allocator
Input
Host
Device memory allocator. See the nvJPEG Device Memory Allocator Interface structure description.


nvjpegBufferDevice_t* buffer
Input/Output
Host
nvJPEG device buffer container.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.28. nvjpegBufferDeviceCreateV2()ï

Creates the device buffer handle using extended allocators.
Signature:

nvjpegStatus_t nvjpegBufferDeviceCreateV2(
    nvjpegHandle_t handle,
    nvjpegDevAllocatorV2_t* device_allocator,
    nvjpegBufferDevice_t* buffer);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
Library handle.


nvjpegDevAllocatorV2_t* device_allocator
Input
Host
Extended device memory allocator. See nvjpegDevAllocatorV2_t_t structure description.


nvjpegBufferDevice_t* buffer
Input/Output
Host
nvJPEG device buffer container.



Returns:
nvjpegStatus_t - An error code as specified in nvJPEG API Return Codes.



2.3.1.29. nvjpegBufferDeviceDestroy()ï

Destroys the device buffer handle.
Signature:

nvjpegStatus_t nvjpegBufferDeviceDestroy(
    nvjpegBufferDevice_t buffer);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegBufferDevice_t buffer
Input
Host/Device
nvJPEG device buffer container. Device pointers are stored within the host structures.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.30. nvjpegStateAttachDeviceBuffer()ï

Link the nvJPEG device buffer handle to the decoder_state. The device_buffer is used by the decoder to store the intermediate information that is used across the decoding stages. Device buffer can be attached to different decoder states, which helps to switch between implementations without allocating extra memory.
Signature:

nvjpegStatus_t nvjpegStateAttachDeviceBuffer(
    nvjpegJpegState_t decoder_state,
    nvjpegBufferDevice_t device_buffer);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegJpegState_t decoder_state
Input
Host
nvJPEG decoder state.


nvjpegBufferDevice_t device buffer
Input
Host/Device
nvJPEG device buffer container. Device pointers are stored within the host structures.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.31. nvjpegBufferDeviceRetrieve()ï

Retrieve the device memory pointer and size from the nvJPEG device buffer handle. Allows the application to re-use the memory after the decode is complete.
Signature:

nvjpegStatus_t nvjpegBufferDeviceRetrieve(
    nvjpegBufferDevice_t buffer,
    size_t* size,
    void** ptr);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegBufferDevice_t buffer
Input
Host
nvJPEG device buffer container.


size_t* size
Input/Output
Host
Device buffer size in bytes.


void** ptr
Input/Output
Host
Pointer to the device buffer.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.32. nvjpegBufferDeviceResize()ï

Resize the device buffer to the specified size in bytes. This API can be used to pre-allocate the device buffer
to a large value and avoid allocator calls during decode.
Signature:

nvjpegStatus_t nvjpegBufferDeviceResize(nvjpegBufferDevice_t buffer,
   size_t size,
   cudaStream_t stream);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegBufferDevice_t buffer
Input
Host
nvJPEG device buffer container.


size_t* size
Input
Host
Size in bytes of the device buffer.


cudaStream_t stream
Input
Host
CUDA stream to use when nvjpegBufferDevice_t buffer is initialized using stream ordered allocators.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.33. nvjpegDecodeParamsCreate()ï

Creates a handle for the parameters. The parameters that can be programmed include: output format, ROI decode, CMYK to RGB conversion.
Signature:

nvjpegStatus_t nvjpegDecodeParamsCreate(
    nvjpegHandle_t handle,
    nvjpegDecodeParams_t *decode_params);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegHandle_t handle
Input
Host
Library handle.


nvjpegDecodeParams_t *decode_params
Input/Output
Host
Decode output parameters.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.



2.3.1.34. nvjpegDecodeParamsDestroy()ï

Destroys the decode_params handle.
Signature:

nvjpegStatus_t nvjpegDecodeParamsDestroy(
    nvjpegDecodeParams_t *decode_params);


Parameters:









Parameter
Input / Output
Memory
Description


nvjpegDecodeParams_t *decode_params
Input/Output
Host
Decode output parameters.



Returns:
nvjpegStatus_t â An error code as specified in nvJPEG API Return Codes.