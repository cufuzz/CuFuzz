{"cu_path": "../CUDALibrarySamples/cuSOLVER/gesvdaStridedBatched/cusolver_gesvdaStridedBatched_example.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between multiple GPUs.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between multiple GPUs.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free device workspace for multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free device workspace for multiple GPUs.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate device workspace for multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate device workspace for multiple GPUs.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create and initialize a matrix on multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create and initialize a matrix on multiple GPUs.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create and initialize a matrix on multiple GPUs.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy matrices on multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy matrices on multiple GPUs.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy data from host to device for multiple GPUs.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy data from device to host for multiple GPUs.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Main function performing SVD with cusolver and CUDA operations.", "relation": "calls", "tail": "cusolverDnCreate", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Main function performing SVD with cusolver and CUDA operations.", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Main function performing SVD with cusolver and CUDA operations.", "relation": "calls", "tail": "cusolverDnSetStream", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Main function performing SVD with cusolver and CUDA operations.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Main function performing SVD with cusolver and CUDA operations.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Main function performing SVD with cusolver and CUDA operations.", "relation": "calls", "tail": "cusolverDnSgesvdaStridedBatched_bufferSize", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Main function performing SVD with cusolver and CUDA operations.", "relation": "calls", "tail": "cusolverDnSgesvdaStridedBatched", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Main function performing SVD with cusolver and CUDA operations.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Main function performing SVD with cusolver and CUDA operations.", "relation": "calls", "tail": "cusolverDnDestroy", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Main function performing SVD with cusolver and CUDA operations.", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Main function performing SVD with cusolver and CUDA operations.", "relation": "calls", "tail": "cudaDeviceReset", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/MgPotrf/cusolver_MgPotrf_example2.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between multiple GPU devices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between multiple GPU devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between multiple GPU devices.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between multiple GPU devices.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between multiple GPU devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free the workspace allocated on multiple GPU devices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free the workspace allocated on multiple GPU devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free the workspace allocated on multiple GPU devices.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free the workspace allocated on multiple GPU devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate workspace on multiple GPU devices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate workspace on multiple GPU devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate workspace on multiple GPU devices.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate workspace on multiple GPU devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create an empty matrix on multiple GPU devices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create an empty matrix on multiple GPU devices.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create an empty matrix on multiple GPU devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create an empty matrix on multiple GPU devices.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create an empty matrix on multiple GPU devices.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create an empty matrix on multiple GPU devices.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create an empty matrix on multiple GPU devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy a matrix allocated on multiple GPU devices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy a matrix allocated on multiple GPU devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy a matrix allocated on multiple GPU devices.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy a matrix allocated on multiple GPU devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy memory from host to device for multiple GPU devices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy memory from host to device for multiple GPU devices.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy memory from host to device for multiple GPU devices.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy memory from host to device for multiple GPU devices.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy memory from host to device for multiple GPU devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy memory from device to host for multiple GPU devices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy memory from device to host for multiple GPU devices.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy memory from device to host for multiple GPU devices.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy memory from device to host for multiple GPU devices.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy memory from device to host for multiple GPU devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "vec_nrm_inf", "head_type": "__device__", "description": "Compute infinity norm of a vector.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "gen_1d_laplacian", "head_type": "__device__", "description": "Generate a 1D Laplacian matrix.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "gen_ref_B", "head_type": "__device__", "description": "Generate matrix B as A * X.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "solve_system_with_invA", "head_type": "__device__", "description": "Apply inverse to RHS matrix using full inverse.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/MgPotrf/cusolver_MgPotrf_example1.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "The function restores the input device before leaving.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "The function restores the input device before leaving.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free resources related to workspace.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate workspace resources.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create an empty matrix with all elements initialized to zero.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create an empty matrix with all elements initialized to zero.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy the matrix by freeing associated resources.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy data from host to device.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy data from device to host.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "cusolverMgDeviceSelect", "head_type": "__host__", "description": "Select devices for use with cuSolverMg.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverMgCreateDeviceGrid", "head_type": "__host__", "description": "Create a device grid for matrix operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverMgCreateMatrixDesc", "head_type": "__host__", "description": "Create a descriptor for a matrix.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverMgDestroyMatrixDesc", "head_type": "__host__", "description": "Destroy a matrix descriptor.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverMgDestroyGrid", "head_type": "__host__", "description": "Destroy a device grid configuration.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverMgCreate", "head_type": "__host__", "description": "Create a cuSolverMg handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverMgDestroy", "head_type": "__host__", "description": "Destroy a cuSolverMg handle.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/gesvdjBatched/cusolver_gesvdjBatched_example.cu", "model_response": [{"head": "print_matrix", "head_type": "__host__", "description": "Prints the matrix to the console.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access between multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access between multiple GPUs.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access between multiple GPUs.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees allocated workspace on the GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees allocated workspace on the GPUs.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees allocated workspace on the GPUs.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates workspace on multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates workspace on multiple GPUs.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates workspace on multiple GPUs.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates and initializes a matrix on multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates and initializes a matrix on multiple GPUs.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates and initializes a matrix on multiple GPUs.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates and initializes a matrix on multiple GPUs.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates and initializes a matrix on multiple GPUs.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys a matrix and frees resources on multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys a matrix and frees resources on multiple GPUs.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys a matrix and frees resources on multiple GPUs.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies data from host to device using multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies data from host to device using multiple GPUs.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies data from host to device using multiple GPUs.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies data from host to device using multiple GPUs.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies data from device to host using multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies data from device to host using multiple GPUs.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies data from device to host using multiple GPUs.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies data from device to host using multiple GPUs.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/sygvd/cusolver_sygvd_example.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access between GPUs specified in deviceList.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access between GPUs specified in deviceList.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access between GPUs specified in deviceList.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access between GPUs specified in deviceList.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees allocated device workspace.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees allocated device workspace.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees allocated device workspace.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates device workspace.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates device workspace.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates device workspace.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates and initializes matrix A to zeros.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates and initializes matrix A to zeros.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates and initializes matrix A to zeros.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates and initializes matrix A to zeros.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates and initializes matrix A to zeros.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys the allocated matrix A.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys the allocated matrix A.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys the allocated matrix A.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies a matrix from host to device.", "relation": "calls", "tail": "mat_pack2unpack", "tail_type": "CUDA_CLASS"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies a matrix from host to device.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies a matrix from host to device.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies a matrix from host to device.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies a matrix from device to host.", "relation": "calls", "tail": "mat_pack2unpack", "tail_type": "CUDA_CLASS"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies a matrix from device to host.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies a matrix from device to host.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies a matrix from device to host.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType value for the given type string.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cusolver_refinement_solver", "head_type": "__host__", "description": "Returns cusolverIRSRefinement_t value for the given solver string.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/ormqr/cusolver_ormqr_example.cu", "model_response": [{"head": "cusolverDnCreate", "head_type": "__host__", "description": "This function creates a CUDense handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "This function creates a cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "This function creates a CUDA stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnSetStream", "head_type": "__host__", "description": "Sets the stream associated with a CUDense operation.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the stream associated with a cuBLAS operation.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous host-to-device or device-to-host memory copy.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDgeqrf_bufferSize", "head_type": "__host__", "description": "Queries the working space required for QR factorization.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDormqr_bufferSize", "head_type": "__host__", "description": "Queries the working space required for applying Q to matrix B.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDgeqrf", "head_type": "__host__", "description": "Computes the QR factorization of a matrix.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous memory copy from device to host.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for a stream to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDormqr", "head_type": "__host__", "description": "Computes Q^T times matrix B using the orthogonal matrix Q from QR factorization.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous memory copy from device to host.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDtrsm", "head_type": "__host__", "description": "Solves a triangular system of equations with multiple right-hand sides.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous memory copy from device to host.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Deallocates device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDestroy", "head_type": "__host__", "description": "Destroys the CUDense handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the GPU device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/Xsyevd/cusolver_Xsyevd_example.cu", "model_response": [{"head": "generate_random_matrix", "head_type": "__host__", "description": "Generates a random matrix using cu library types.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "make_diag_dominant_matrix", "head_type": "__host__", "description": "Makes the given matrix diagonally dominant using cu library types.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns the CUDA library type for the given string.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cusolver_refinement_solver", "head_type": "__host__", "description": "Returns cusolver refinement solver type for the given string.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnCreate", "head_type": "__host__", "description": "Creates a new handle for the cusolverDn library context.", "relation": "calls", "tail": "cusolverDnHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cusolverDnSetStream", "head_type": "__host__", "description": "Sets the stream associated with the given cusolverDn context.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cusolverDnCreateParams", "head_type": "__host__", "description": "Creates a new set of parameters for use in cuSolverDn functions.", "relation": "calls", "tail": "cusolverDnParams_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "calls", "tail": "data_type", "tail_type": "CUDA_CLASS"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous copy between host and device memory.", "relation": "calls", "tail": "cudaMemcpyKind", "tail_type": "CUDA_CLASS"}, {"head": "cusolverDnXsyevd_bufferSize", "head_type": "__host__", "description": "Queries buffer size needed for Xsyevd operation in cusolver.", "relation": "calls", "tail": "cusolverDnHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cusolverDnXsyevd", "head_type": "__host__", "description": "Computes eigenvalues and optionally eigenvectors of a symmetric matrix.", "relation": "calls", "tail": "cusolverDnHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for all preceding commands in a stream to complete.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cusolverDnDestroy", "head_type": "__host__", "description": "Destroys the given cusolverDn handle and frees any resources.", "relation": "calls", "tail": "cusolverDnHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a specified stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device and destroys all allocations and contexts.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/sygvdx/cusolver_sygvdx_example.cu", "model_response": [{"head": "cusolverDnDsygvdx_bufferSize", "head_type": "__device__", "description": "Queries the amount of working space needed for the eigendecomposition of generalized symmetric eigenvalue problem using cusolver.", "relation": "calls", "tail": "cusolverDnHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cusolverDnDsygvdx_bufferSize", "head_type": "__device__", "description": "Queries the amount of working space needed for the eigendecomposition of generalized symmetric eigenvalue problem using cusolver.", "relation": "calls", "tail": "cusolverEigType_t", "tail_type": "CUDA_API"}, {"head": "cusolverDnDsygvdx_bufferSize", "head_type": "__device__", "description": "Queries the amount of working space needed for the eigendecomposition of generalized symmetric eigenvalue problem using cusolver.", "relation": "calls", "tail": "cusolverEigMode_t", "tail_type": "CUDA_API"}, {"head": "cusolverDnDsygvdx_bufferSize", "head_type": "__device__", "description": "Queries the amount of working space needed for the eigendecomposition of generalized symmetric eigenvalue problem using cusolver.", "relation": "calls", "tail": "cusolverEigRange_t", "tail_type": "CUDA_API"}, {"head": "cusolverDnDsygvdx_bufferSize", "head_type": "__device__", "description": "Queries the amount of working space needed for the eigendecomposition of generalized symmetric eigenvalue problem using cusolver.", "relation": "calls", "tail": "cublasFillMode_t", "tail_type": "CUDA_API"}, {"head": "cusolverDnDsygvdx", "head_type": "__device__", "description": "Performs the eigendecomposition of a generalized symmetric eigenvalue problem on the GPU.", "relation": "calls", "tail": "cusolverDnHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cusolverDnDsygvdx", "head_type": "__device__", "description": "Performs the eigendecomposition of a generalized symmetric eigenvalue problem on the GPU.", "relation": "calls", "tail": "cusolverEigType_t", "tail_type": "CUDA_API"}, {"head": "cusolverDnDsygvdx", "head_type": "__device__", "description": "Performs the eigendecomposition of a generalized symmetric eigenvalue problem on the GPU.", "relation": "calls", "tail": "cusolverEigMode_t", "tail_type": "CUDA_API"}, {"head": "cusolverDnDsygvdx", "head_type": "__device__", "description": "Performs the eigendecomposition of a generalized symmetric eigenvalue problem on the GPU.", "relation": "calls", "tail": "cusolverEigRange_t", "tail_type": "CUDA_API"}, {"head": "cusolverDnDsygvdx", "head_type": "__device__", "description": "Performs the eigendecomposition of a generalized symmetric eigenvalue problem on the GPU.", "relation": "calls", "tail": "cublasFillMode_t", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/gesvd/cusolver_gesvd_example.cu", "model_response": [{"head": "cusolverDnCreate", "head_type": "__host__", "description": "Creates a cuSolverDN handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a CUDA stream with specified behavior flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnSetStream", "head_type": "__host__", "description": "Sets the stream for a cuSolverDN handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a CUDA stream with a cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous memory copy.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDgesvd_bufferSize", "head_type": "__host__", "description": "Computes the required workspace size for SVD.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDgesvd", "head_type": "__host__", "description": "Computes the singular value decomposition (SVD).", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks the host until a stream's tasks are done.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDdgmm", "head_type": "__host__", "description": "Applies a diagonal matrix to another matrix on the left side.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDgemm", "head_type": "__host__", "description": "Performs matrix-matrix multiplication.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDnrm2", "head_type": "__host__", "description": "Computes the Euclidean norm of a vector.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDestroy", "head_type": "__host__", "description": "Destroys the cuSolverDN handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the current device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/gesvdj/cusolver_gesvdj_example.cu", "model_response": [{"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cusolverDnCreate", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cusolverDnSetStream", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cusolverDnCreateGesvdjInfo", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cusolverDnXgesvdjSetTolerance", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cusolverDnDgesvdj_bufferSize", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cusolverDnDgesvdj", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cusolverDnXgesvdjGetSweeps", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cusolverDnXgesvdjGetResidual", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cusolverDnDestroyGesvdjInfo", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cusolverDnDestroy", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Executes the main operations using cusolver for singular value decomposition.", "relation": "calls", "tail": "cudaDeviceReset", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/Xgesvd/cusolver_Xgesvd_example.cu", "model_response": [{"head": "cusolverDnCreate", "head_type": "__host__", "description": "Creates a cuSolver handle for managing solver operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS handle for managing BLAS operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a CUDA stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnSetStream", "head_type": "__host__", "description": "Sets the CUDA stream to be used by cuSolver operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the CUDA stream for cuBLAS operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnCreateParams", "head_type": "__host__", "description": "Creates parameters object for cuSolver operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs asynchronous memory copy between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnXgesvd_bufferSize", "head_type": "__host__", "description": "Queries the buffer size required for SVD operation.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnXgesvd", "head_type": "__host__", "description": "Performs Singular Value Decomposition (SVD) on a matrix.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDdgmm", "head_type": "__host__", "description": "Performs element-wise multiplication of matrix with diagonal matrix.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDgemm_v2", "head_type": "__host__", "description": "Performs matrix-matrix multiplication using cuBLAS.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDnrm2_v2", "head_type": "__host__", "description": "Computes the Euclidean norm of a vector using cuBLAS.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDestroy", "head_type": "__host__", "description": "Destroys the cuSolver handle and frees any resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS handle and frees any resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the GPU device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/Xgesvdp/cusolver_Xgesvdp_example.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "Restores the input device before leaving and enables Peer Access.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Restores the input device before leaving and enables Peer Access.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Restores the input device before leaving and enables Peer Access.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Restores the input device before leaving and enables Peer Access.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees allocated device workspace.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees allocated device workspace.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees allocated device workspace.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates workspace on device.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates workspace on device.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates workspace on device.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates an empty matrix on device.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates an empty matrix on device.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates an empty matrix on device.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates an empty matrix on device.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates an empty matrix on device.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates an empty matrix on device.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys matrix created on device and frees memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys matrix created on device and frees memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys matrix created on device and frees memory.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Memories copy from Host to Device.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Memories copy from Host to Device.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Memories copy from Host to Device.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Memories copy from Host to Device.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Memories copy from Host to Device.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Memories copy from Device to Host.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Memories copy from Device to Host.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Memories copy from Device to Host.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Memories copy from Device to Host.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Memories copy from Device to Host.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/syevd/cusolver_syevd_example.cu", "model_response": [{"head": "cusolverDnCreate", "head_type": "__host__", "description": "Create a cuSolver handle.", "relation": "calls", "tail": "cusolverDnSetStream", "tail_type": "CUDA_API"}, {"head": "cusolverDnCreate", "head_type": "__host__", "description": "Create a cuSolver handle.", "relation": "calls", "tail": "cusolverDnDsyevd_bufferSize", "tail_type": "CUDA_API"}, {"head": "cusolverDnCreate", "head_type": "__host__", "description": "Create a cuSolver handle.", "relation": "calls", "tail": "cusolverDnDsyevd", "tail_type": "CUDA_API"}, {"head": "cusolverDnDsyevd", "head_type": "__host__", "description": "Compute eigenvalues and eigenvectors using SYEVD solver.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "cusolverDnDsyevd", "head_type": "__host__", "description": "Compute eigenvalues and eigenvectors using SYEVD solver.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocate memory on the device.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Create a CUDA stream with specified flags.", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Reset the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/MgGetrf/cusolver_MgGetrf_example.cu", "model_response": [{"head": "createMat", "head_type": "__host__", "description": "Allocates and initializes a matrix on multiple devices.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access between devices.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access between devices.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees workspace memory on multiple devices.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates workspace memory on multiple devices.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Allocates and initializes a matrix on multiple devices.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies matrix data from host to devices.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies matrix data from devices to the host.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/Xtrtri/cusolver_Xtrtri_example.cu", "model_response": [{"head": "trtri", "head_type": "__host__", "description": "Computes the inverse of a triangular matrix using cuSOLVER.", "relation": "calls", "tail": "cusolverDnXtrtri_bufferSize", "tail_type": "CUDA_API"}, {"head": "trtri", "head_type": "__host__", "description": "Computes the inverse of a triangular matrix using cuSOLVER.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "trtri", "head_type": "__host__", "description": "Computes the inverse of a triangular matrix using cuSOLVER.", "relation": "calls", "tail": "cusolverDnXtrtri", "tail_type": "CUDA_API"}, {"head": "trtri", "head_type": "__host__", "description": "Computes the inverse of a triangular matrix using cuSOLVER.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "residual_check", "head_type": "__host__", "description": "Checks the residual of the matrix inversion operation.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "residual_check", "head_type": "__host__", "description": "Checks the residual of the matrix inversion operation.", "relation": "calls", "tail": "cudaMemcpy", "tail_type": "CUDA_API"}, {"head": "residual_check", "head_type": "__host__", "description": "Checks the residual of the matrix inversion operation.", "relation": "calls", "tail": "cublasCreate", "tail_type": "CUDA_API"}, {"head": "residual_check", "head_type": "__host__", "description": "Checks the residual of the matrix inversion operation.", "relation": "calls", "tail": "cublasGemmEx", "tail_type": "CUDA_API"}, {"head": "residual_check", "head_type": "__host__", "description": "Checks the residual of the matrix inversion operation.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "residual_check", "head_type": "__host__", "description": "Checks the residual of the matrix inversion operation.", "relation": "calls", "tail": "cublasDestroy", "tail_type": "CUDA_API"}, {"head": "residual_check", "head_type": "__host__", "description": "Checks the residual of the matrix inversion operation.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/gesv/cusolver_irs_expert_cuda-10.2.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "The function restores the input device before leaving, enabling peer access for multiple GPUs.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "The function restores the input device before leaving, enabling peer access for multiple GPUs.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees the workspace allocated previously on GPUs.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates workspace on multiple GPUs.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates an empty matrix A with all elements initialized to zero.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates an empty matrix A with all elements initialized to zero.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys the matrix by freeing memory on the GPU.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies data from host to device memory.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies data from device to host memory.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "generate_random_matrix", "head_type": "__host__", "description": "Generates a random matrix.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "make_diag_dominant_matrix", "head_type": "__host__", "description": "Modifies a matrix to be diagonally dominant.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns the cudaDataType value for the string containing the type name.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cusolver_refinement_solver", "head_type": "__host__", "description": "Returns the cusolverIRSRefinement_t value for the string containing the solver name.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/gesv/cusolver_irs_lapack.cu", "model_response": [{"head": "generate_random_matrix", "head_type": "__host__", "description": "Generates a random matrix on host.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "make_diag_dominant_matrix", "head_type": "__host__", "description": "Makes the host matrix diagonal dominant.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_matrix", "head_type": "__host__", "description": "Prints a matrix on the host.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Gets the cudaDataType value for given type string.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "CUDA_API", "description": "Creates a CUDA stream with specified flags.", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "cudaEventCreate", "head_type": "CUDA_API", "description": "Creates a CUDA event.", "relation": "calls", "tail": "cudaEventCreate", "tail_type": "CUDA_API"}, {"head": "cusolverDnCreate", "head_type": "CUDA_API", "description": "Creates a cuSolver handle.", "relation": "calls", "tail": "cusolverDnCreate", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "CUDA_API", "description": "Allocates memory on the device.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "cudaMemcpy2D", "head_type": "CUDA_API", "description": "Performs a 2D copy of memory.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "cusolverDnIRSXgesv_bufferSize", "head_type": "CUDA_API", "description": "Gets the required buffer size for IRSXgesv solver.", "relation": "calls", "tail": "cusolverDnIRSXgesv_bufferSize", "tail_type": "CUDA_API"}, {"head": "cusolverDnIRSXgesv", "head_type": "CUDA_API", "description": "Simplifies the solution of linear system using IRSXgesv.", "relation": "calls", "tail": "cusolverDnIRSXgesv", "tail_type": "CUDA_API"}, {"head": "cudaMemcpyAsync", "head_type": "CUDA_API", "description": "Performs an asynchronous memory copy.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "cudaStreamSynchronize", "head_type": "CUDA_API", "description": "Synchronizes the CUDA stream.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "cusolverDnDestroy", "head_type": "CUDA_API", "description": "Destroys the cuSolver handle.", "relation": "calls", "tail": "cusolverDnDestroy", "tail_type": "CUDA_API"}, {"head": "cudaEventDestroy", "head_type": "CUDA_API", "description": "Destroys a CUDA event.", "relation": "calls", "tail": "cudaEventDestroy", "tail_type": "CUDA_API"}, {"head": "cudaStreamDestroy", "head_type": "CUDA_API", "description": "Destroys a CUDA stream.", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "cusolverDnIRSParamsCreate", "head_type": "CUDA_API", "description": "Creates IRS parameter structure.", "relation": "calls", "tail": "cusolverDnIRSParamsCreate", "tail_type": "CUDA_API"}, {"head": "cusolverDnIRSInfosCreate", "head_type": "CUDA_API", "description": "Creates IRS info structure.", "relation": "calls", "tail": "cusolverDnIRSInfosCreate", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/gesv/cusolver_irs_expert_cuda-11.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between GPUs for a list of devices.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between GPUs for a list of devices.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free device workspace for specified device IDs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free device workspace for specified device IDs.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate device workspace for specified device IDs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate device workspace for specified device IDs.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a diagonal matrix A on device and initialize it to zeros.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a diagonal matrix A on device and initialize it to zeros.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a diagonal matrix A on device and initialize it to zeros.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy matrix A and free its memory on device.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy matrix A and free its memory on device.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy matrix from host to device.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy matrix from host to device.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy matrix from device to host.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy matrix from device to host.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "generate_random_matrix", "head_type": "__host__", "description": "Generate a random matrix using traits for element type.", "relation": "calls", "tail": "traits::rand", "tail_type": "CUDA_CLASS"}, {"head": "make_diag_dominant_matrix", "head_type": "__host__", "description": "Make a matrix diagonal dominant using traits for element type.", "relation": "calls", "tail": "traits::abs", "tail_type": "CUDA_CLASS"}, {"head": "make_diag_dominant_matrix", "head_type": "__host__", "description": "Make a matrix diagonal dominant using traits for element type.", "relation": "calls", "tail": "traits::add", "tail_type": "CUDA_CLASS"}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Get CUDA library type from a string representation.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cusolver_refinement_solver", "head_type": "__host__", "description": "Get cusolver refinement solver type from a string representation.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/sygvj/cusolver_sygvj_example.cu", "model_response": [{"head": "cusolverDnCreate", "head_type": "__host__", "description": "Creates a cuSolver handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a CUDA stream with specific flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnSetStream", "head_type": "__host__", "description": "Associates a CUDA stream with the cuSolver handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnCreateSyevjInfo", "head_type": "__host__", "description": "Creates syevj info object for cuSolver.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnXsyevjSetTolerance", "head_type": "__host__", "description": "Sets the tolerance for syevj computation.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnXsyevjSetMaxSweeps", "head_type": "__host__", "description": "Sets the maximum sweeps for syevj computation.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs asynchronous memory copy operations between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDsygvj_bufferSize", "head_type": "__host__", "description": "Queries the buffer size required by cusolverDnDsygvj function.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDsygvj", "head_type": "__host__", "description": "Computes eigenvalues and eigenvectors of a symmetric matrix pair using Jacobi method.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until all tasks in the CUDA stream are completed.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnXsyevjGetSweeps", "head_type": "__host__", "description": "Retrieves the number of sweeps executed in syevj computation.", "relation": "calls", "tail": "cusolverDnXsyevjSetMaxSweeps", "tail_type": "CUDA_API"}, {"head": "cusolverDnXsyevjGetResidual", "head_type": "__host__", "description": "Retrieves the residual of the syevj computation.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees the allocated memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDestroySyevjInfo", "head_type": "__host__", "description": "Destroys syevj info object.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDestroy", "head_type": "__host__", "description": "Destroys the cuSolver handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the CUDA device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/getrf/cusolver_getrf_example.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between multiple GPUs.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between multiple GPUs.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between multiple GPUs.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free device workspace memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free device workspace memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free device workspace memory.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate device workspace memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate device workspace memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate device workspace memory.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix with initialized zero values on device memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix with initialized zero values on device memory.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix with initialized zero values on device memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix with initialized zero values on device memory.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix with initialized zero values on device memory.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix with initialized zero values on device memory.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix with initialized zero values on device memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy or free the matrix allocated on each device.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy or free the matrix allocated on each device.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy or free the matrix allocated on each device.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy or free the matrix allocated on each device.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy data from host memory to device memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy data from host memory to device memory.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy data from host memory to device memory.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy data from host memory to device memory.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy data from host memory to device memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy data from device memory to host memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy data from device memory to host memory.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy data from device memory to host memory.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy data from device memory to host memory.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy data from device memory to host memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function for matrix LU factorization and solution using CUDA.", "relation": "calls", "tail": "cusolverDnCreate", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function for matrix LU factorization and solution using CUDA.", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function for matrix LU factorization and solution using CUDA.", "relation": "calls", "tail": "cusolverDnSetStream", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function for matrix LU factorization and solution using CUDA.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function for matrix LU factorization and solution using CUDA.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function for matrix LU factorization and solution using CUDA.", "relation": "calls", "tail": "cusolverDnDgetrf_bufferSize", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function for matrix LU factorization and solution using CUDA.", "relation": "calls", "tail": "cusolverDnDgetrf", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function for matrix LU factorization and solution using CUDA.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function for matrix LU factorization and solution using CUDA.", "relation": "calls", "tail": "cusolverDnDgetrs", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function for matrix LU factorization and solution using CUDA.", "relation": "calls", "tail": "cusolverDnDestroy", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function for matrix LU factorization and solution using CUDA.", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function for matrix LU factorization and solution using CUDA.", "relation": "calls", "tail": "cudaDeviceReset", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/Xgetrf/cusolver_Xgetrf_example.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "Grants peer access between multiple GPUs.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Grants peer access between multiple GPUs.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Grants peer access between multiple GPUs.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Grants peer access between multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees device memory workspace.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees device memory workspace.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees device memory workspace.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates device memory workspace.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates device memory workspace.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates device memory workspace.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a zero-initialized matrix on multiple GPUs.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a zero-initialized matrix on multiple GPUs.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a zero-initialized matrix on multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a zero-initialized matrix on multiple GPUs.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a zero-initialized matrix on multiple GPUs.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a zero-initialized matrix on multiple GPUs.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys a matrix object by freeing device memory on multiple GPUs.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys a matrix object by freeing device memory on multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys a matrix object by freeing device memory on multiple GPUs.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys a matrix object by freeing device memory on multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "mat_pack2unpack", "head_type": "__host__", "description": "Converts a packed matrix format to an unpacked format across multiple GPUs.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Transfers matrix data from host to device memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Transfers matrix data from host to device memory.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Transfers matrix data from host to device memory.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Transfers matrix data from host to device memory.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Transfers matrix data from host to device memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Transfers matrix data from device to host memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Transfers matrix data from device to host memory.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Transfers matrix data from device to host memory.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Transfers matrix data from device to host memory.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Transfers matrix data from device to host memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/Xgesvdr/cusolver_Xgesvdr_example.cu", "model_response": [{"head": "print_matrix", "head_type": "__host__", "description": "Prints matrix A with given dimensions.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access among multiple GPUs.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access among multiple GPUs.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access among multiple GPUs.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access among multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees device workspace on each GPU.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees device workspace on each GPU.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees device workspace on each GPU.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates workspace memory for devices.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates workspace memory for devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates workspace memory for devices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple devices.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple devices.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple devices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple devices.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys matrices and frees device memory.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys matrices and frees device memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys matrices and frees device memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies host memory to device memory.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies host memory to device memory.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies host memory to device memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies host memory to device memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies device memory to host memory.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies device memory to host memory.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies device memory to host memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies device memory to host memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns the cudaDataType for a string type representation.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cusolver_refinement_solver", "head_type": "__host__", "description": "Returns the cusolverIRSRefinement_t for a string solver type representation.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/Xgeqrf/cusolver_Xgeqrf_example.cu", "model_response": [{"head": "cusolverDnCreate", "head_type": "__host__", "description": "Creates a cuSolverDN handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a CUDA stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnSetStream", "head_type": "__host__", "description": "Sets a stream for a cuSolverDN handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnCreateParams", "head_type": "__host__", "description": "Creates parameters for cuSolverDN functions.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data asynchronously between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnXgeqrf_bufferSize", "head_type": "__host__", "description": "Queries workspace size for QR factorization using cusolverDN.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnXgeqrf", "head_type": "__host__", "description": "Performs QR factorization using cusolverDN.", "relation": "calls", "tail": "traits::cuda_data_type", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Synchronizes the cuda stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_matrix", "head_type": "__host__", "description": "Prints a matrix to standard output.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDestroy", "head_type": "__host__", "description": "Destroys a cuSolverDN handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the CUDA device, destroying all allocations and contexts.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/Xsyevdx/cusolver_Xsyevdx_example.cu", "model_response": [{"head": "cusolverDnXsyevdx_bufferSize", "head_type": "__host__", "description": "Queries working space for symmetric eigendecomposition.", "relation": "calls", "tail": "traits<data_type>::cuda_data_type", "tail_type": "CUDA_CLASS"}, {"head": "cusolverDnXsyevdx", "head_type": "__host__", "description": "Computes the spectrum for symmetric matrices.", "relation": "calls", "tail": "traits<data_type>::cuda_data_type", "tail_type": "CUDA_CLASS"}, {"head": "CUSOLVER_CHECK", "head_type": "__host__", "description": "Error check for cusolver calls.", "relation": "calls", "tail": "cusolverDnDestroy", "tail_type": "CUDA_API"}, {"head": "CUSOLVER_CHECK", "head_type": "__host__", "description": "Error check for cusolver calls.", "relation": "calls", "tail": "cusolverDnCreateParams", "tail_type": "CUDA_API"}, {"head": "CUSOLVER_CHECK", "head_type": "__host__", "description": "Error check for cusolver calls.", "relation": "calls", "tail": "cusolverDnSetStream", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs asynchronous memory copy operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until the specified stream has completed all operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees allocated device memory.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/Xgeev/cusolver_Xgeev_example1.cu", "model_response": [{"head": "cusolverDnCreate", "head_type": "__host__", "description": "Creates a cuSolverDN handle.", "relation": "calls", "tail": "cusolverDnSetStream", "tail_type": "CUDA_API"}, {"head": "cusolverDnCreate", "head_type": "__host__", "description": "Creates a cuSolverDN handle.", "relation": "calls", "tail": "cusolverDnXgeev_bufferSize", "tail_type": "CUDA_API"}, {"head": "cusolverDnCreate", "head_type": "__host__", "description": "Creates a cuSolverDN handle.", "relation": "calls", "tail": "cusolverDnXgeev", "tail_type": "CUDA_API"}, {"head": "cusolverDnCreate", "head_type": "__host__", "description": "Creates a cuSolverDN handle.", "relation": "calls", "tail": "cusolverDnDestroyParams", "tail_type": "CUDA_API"}, {"head": "cusolverDnCreate", "head_type": "__host__", "description": "Creates a cuSolverDN handle.", "relation": "calls", "tail": "cusolverDnDestroy", "tail_type": "CUDA_API"}, {"head": "cusolverDnSetStream", "head_type": "__host__", "description": "Sets the CUDA stream for cuSolverDN operations.", "relation": "calls", "tail": "cusolverDnXgeev_bufferSize", "tail_type": "CUDA_API"}, {"head": "cusolverDnSetStream", "head_type": "__host__", "description": "Sets the CUDA stream for cuSolverDN operations.", "relation": "calls", "tail": "cusolverDnXgeev", "tail_type": "CUDA_API"}, {"head": "cusolverDnXgeev_bufferSize", "head_type": "__host__", "description": "Queries the required workspace size in bytes for eigenvalue computations using cuSolverDN.", "relation": "calls", "tail": "cusolverDnXgeev", "tail_type": "CUDA_API"}, {"head": "cusolverDnXgeev", "head_type": "__host__", "description": "Computes the eigenvalues and eigenvectors of a matrix using cuSolverDN.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDestroyParams", "head_type": "__host__", "description": "Destroys cuSolverDN parameters object.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDestroy", "head_type": "__host__", "description": "Destroys a cuSolverDN handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS handle.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS handle.", "relation": "calls", "tail": "cublasDdgmm", "tail_type": "CUDA_API"}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS handle.", "relation": "calls", "tail": "cublasDgemm_v2", "tail_type": "CUDA_API"}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS handle.", "relation": "calls", "tail": "cublasDnrm2_v2", "tail_type": "CUDA_API"}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS handle.", "relation": "calls", "tail": "cublasDestroy", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the CUDA stream for cuBLAS operations.", "relation": "calls", "tail": "cublasDdgmm", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the CUDA stream for cuBLAS operations.", "relation": "calls", "tail": "cublasDgemm_v2", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the CUDA stream for cuBLAS operations.", "relation": "calls", "tail": "cublasDnrm2_v2", "tail_type": "CUDA_API"}, {"head": "cublasDdgmm", "head_type": "__host__", "description": "Performs diagonal matrix multiplication using cuBLAS.", "relation": "calls", "tail": "cublasDgemm_v2", "tail_type": "CUDA_API"}, {"head": "cublasDdgmm", "head_type": "__host__", "description": "Performs diagonal matrix multiplication using cuBLAS.", "relation": "calls", "tail": "cublasDnrm2_v2", "tail_type": "CUDA_API"}, {"head": "cublasDdgmm", "head_type": "__host__", "description": "Performs diagonal matrix multiplication using cuBLAS.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDgemm_v2", "head_type": "__host__", "description": "Performs matrix multiplication using cuBLAS.", "relation": "calls", "tail": "cublasDnrm2_v2", "tail_type": "CUDA_API"}, {"head": "cublasDgemm_v2", "head_type": "__host__", "description": "Performs matrix multiplication using cuBLAS.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDnrm2_v2", "head_type": "__host__", "description": "Computes the Euclidean norm of a vector using cuBLAS.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys a cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates and returns a new CUDA stream with the specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMallocHost", "head_type": "__host__", "description": "Allocates pinned memory on the host for better performance.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "cudaMallocHost", "head_type": "__host__", "description": "Allocates pinned memory on the host for better performance.", "relation": "calls", "tail": "cudaFreeHost", "tail_type": "CUDA_API"}, {"head": "cudaMallocHost", "head_type": "__host__", "description": "Allocates pinned memory on the host for better performance.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies memory asynchronously between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFreeHost", "head_type": "__host__", "description": "Frees pinned memory on the host.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until all operations in a CUDA stream are complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/Xgeev/cusolver_Xgeev_example3.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "The function restores the input device before leaving.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "The function restores the input device before leaving.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "The function restores the input device before leaving.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "The function restores the input device before leaving.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "A function to free allocated device workspace memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "A function to free allocated device workspace memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "A function to free allocated device workspace memory.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "A function to allocate device workspace memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "A function to allocate device workspace memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "A function to allocate device workspace memory.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Function to create a zero matrix in device memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Function to create a zero matrix in device memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Function to create a zero matrix in device memory.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Function to create a zero matrix in device memory.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "A function to free matrix memory allocated on device.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "A function to free matrix memory allocated on device.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "A function to free matrix memory allocated on device.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Function to copy a matrix from host to device.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Function to copy a matrix from host to device.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Function to copy a matrix from host to device.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Function to copy a matrix from device to host.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Function to copy a matrix from device to host.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Function to copy a matrix from device to host.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/Xgeev/cusolver_Xgeev_example2.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between GPUs.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access between GPUs.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free workspace memory on devices.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate workspace memory on devices.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix on multiple devices with initialization.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix on multiple devices with initialization.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy matrices on devices.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy matrix data from host to device.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy matrix data from device to host.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "Main function for eigenvalue computations using CUDA.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/syevjBatched/cusolver_syevjBatched_example.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access between GPUs.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access between GPUs.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees device workspace on multiple GPUs.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates device workspace on multiple GPUs.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple GPUs.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple GPUs.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys a matrix on multiple GPUs.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies data from host to device.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies data from device to host.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/csrqr/cusolver_csrqr_example2.cu", "model_response": [{"head": "cusolverSpCreate", "head_type": "__host__", "description": "Creates a new cusolver handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new CUDA stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverSpSetStream", "head_type": "__host__", "description": "Sets the stream in the cusolver handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseCreateMatDescr", "head_type": "__host__", "description": "Creates and initializes a matrix descriptor.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseSetMatType", "head_type": "__host__", "description": "Sets the type of a matrix descriptor.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseSetMatIndexBase", "head_type": "__host__", "description": "Sets the base for indexing in a matrix descriptor.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverSpCreateCsrqrInfo", "head_type": "__host__", "description": "Creates the QR info object used in the cusolver routines.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Asynchronously copies data between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverSpXcsrqrAnalysisBatched", "head_type": "__host__", "description": "Performs a symbolic analysis of the CSR format matrix in a batch.", "relation": "calls", "tail": "cusparseMatDescr_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks the CPU code until all previously issued commands in the CUDA stream are completed.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemGetInfo", "head_type": "__host__", "description": "Provides information on free and total memory available on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverSpDcsrqrBufferInfoBatched", "head_type": "__host__", "description": "Provides buffer info for Dcsrqr batches, which helps to determine workspace requirements.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverSpDcsrqrsvBatched", "head_type": "__host__", "description": "Solves a batch of CSR format linear systems using the QR factorization.", "relation": "calls", "tail": "cusolverSpHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cusparseGetMatIndexBase", "head_type": "__host__", "description": "Gets the matrix index base type from the cusparse matrix descriptor.", "relation": "calls", "tail": "cusparseMatDescr_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees previously allocated device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverSpDestroy", "head_type": "__host__", "description": "Destroys the cusolver handle and releases resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the CUDA stream and releases resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device, destroying all contexts, resources, and streams.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/csrqr/cusolver_csrqr_example1.cu", "model_response": [{"head": "cusolverSpCreate", "head_type": "__host__", "description": "Creates a handle for cuSolver sparse operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a CUDA stream with specific flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverSpSetStream", "head_type": "__host__", "description": "Sets the stream for cuSolver operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseCreateMatDescr", "head_type": "__host__", "description": "Creates a matrix descriptor for cuSparse operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseSetMatType", "head_type": "__host__", "description": "Sets the type of matrix for cuSparse operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusparseSetMatIndexBase", "head_type": "__host__", "description": "Sets the index base for matrices in cuSparse operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverSpCreateCsrqrInfo", "head_type": "__host__", "description": "Creates the information structure for cuSolver QR factorization.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates device memory for CUDA operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs asynchronous memory copying operations between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverSpXcsrqrAnalysisBatched", "head_type": "__host__", "description": "Performs symbolic analysis for batched QR factorization in cuSolver.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverSpDcsrqrBufferInfoBatched", "head_type": "__host__", "description": "Provides buffer info needed for batched QR factorization in cuSolver.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Synchronizes a CUDA stream ensuring operations within are completed.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverSpDcsrqrsvBatched", "head_type": "__host__", "description": "Solves sparse linear system batches using QR factorization in cuSolver.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverSpDestroy", "head_type": "__host__", "description": "Destroys the cusolver handle to clean up resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the CUDA stream and releases associated resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device, cleaning up all resources and states.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/MgSyevd/cusolver_MgSyevd_example1.cu", "model_response": [{"head": "cusolverMgCreate", "head_type": "__host__", "description": "Creates a cuSolverMg handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverMgDeviceSelect", "head_type": "__host__", "description": "Selects the number of GPUs to be used by cuSolverMg.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverMgCreateDeviceGrid", "head_type": "__host__", "description": "Creates a device grid for use in distributed matrices.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverMgCreateMatrixDesc", "head_type": "__host__", "description": "Creates a matrix descriptor for use with cuSolverMg.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverMgSyevd_bufferSize", "head_type": "__host__", "description": "Computes the size of the buffer to be provided for syevd computations.", "relation": "calls", "tail": "cusolverMgCreateDeviceGrid", "tail_type": "CUDA_API"}, {"head": "cusolverMgSyevd", "head_type": "__host__", "description": "Computes the eigenvalues and eigenvectors of a symmetric matrix in distributed form using multiple GPUs.", "relation": "calls", "tail": "cusolverMgCreateMatrixDesc", "tail_type": "CUDA_API"}, {"head": "cusolverMgDestroyMatrixDesc", "head_type": "__host__", "description": "Destroys the matrix descriptor created by cuSolverMg.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverMgDestroyGrid", "head_type": "__host__", "description": "Destroys the grid created by cuSolverMg for device management.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverMgDestroy", "head_type": "__host__", "description": "Destroys the cuSolverMg handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceCanAccessPeer", "head_type": "__host__", "description": "Detects if one device has access permissions to another device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates device memory on the CUDA device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpy2D", "head_type": "__host__", "description": "Copies 2D memory from one location to another.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyHostToDevice", "head_type": "__host__", "description": "Copies data from host to device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyDeviceToHost", "head_type": "__host__", "description": "Copies data from device to host memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceSynchronize", "head_type": "__host__", "description": "Blocks until the device has completed all preceding tasks.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceEnablePeerAccess", "head_type": "__host__", "description": "Enables direct access to memory allocations on another CUDA device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaGetDevice", "head_type": "__host__", "description": "Gets the current CUDA device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaSetDevice", "head_type": "__host__", "description": "Sets the active device for CUDA application.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access among devices.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees workspace allocated across multiple devices.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates workspace across multiple devices.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a distributed matrix across devices.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Handles memory copying from host to device.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Handles memory copying from device to host.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys a distributed matrix across devices.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/MgSyevd/cusolver_MgSyevd_example2.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access among GPUs.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access among GPUs.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access among GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enable peer access among GPUs.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free device workspace memory allocated.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free device workspace memory allocated.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Free device workspace memory allocated.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate memory for device workspaces.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate memory for device workspaces.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocate memory for device workspaces.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix with given specifications on multiple GPUs.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix with given specifications on multiple GPUs.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix with given specifications on multiple GPUs.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix with given specifications on multiple GPUs.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Create a matrix with given specifications on multiple GPUs.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy a matrix and free the associated memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy a matrix and free the associated memory.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroy a matrix and free the associated memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy data from host to device matrix.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy data from host to device matrix.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy data from host to device matrix.", "relation": "calls", "tail": "mat_pack2unpack", "tail_type": "CUDA_CLASS"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copy data from host to device matrix.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy data from device to host matrix.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy data from device to host matrix.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy data from device to host matrix.", "relation": "calls", "tail": "mat_pack2unpack", "tail_type": "CUDA_CLASS"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copy data from device to host matrix.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "mat_pack2unpack", "head_type": "__host__", "description": "Transform packed matrix data to unpacked format.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_matrix", "head_type": "__host__", "description": "Print a matrix on the console.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "generate_random_matrix", "head_type": "__host__", "description": "Generate a random matrix.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "make_diag_dominant_matrix", "head_type": "__host__", "description": "Modify matrix elements to make it diagonally dominant.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Return cudaDataType defined in library_types.h from type name.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cusolver_refinement_solver", "head_type": "__host__", "description": "Return cusolverIRSRefinement_t for solver name.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/MgSyevd/cusolver_MgSyevd_example3.cu", "model_response": [{"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access among CUDA devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access among CUDA devices.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access among CUDA devices.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access among CUDA devices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees device workspace on multiple devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees device workspace on multiple devices.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees device workspace on multiple devices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates device workspace memory on multiple devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates device workspace memory on multiple devices.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates device workspace memory on multiple devices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple CUDA devices.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple CUDA devices.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple CUDA devices.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple CUDA devices.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple CUDA devices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys matrices on multiple CUDA devices, freeing memory.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys matrices on multiple CUDA devices, freeing memory.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys matrices on multiple CUDA devices, freeing memory.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Performs host-to-device memory copy for distributed matrices.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Performs host-to-device memory copy for distributed matrices.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Performs host-to-device memory copy for distributed matrices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Performs device-to-host memory copy for distributed matrices.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Performs device-to-host memory copy for distributed matrices.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Performs device-to-host memory copy for distributed matrices.", "relation": "calls", "tail": "cudaGetDevice", "tail_type": "CUDA_API"}, {"head": "gen_1d_laplacian", "head_type": "__host__", "description": "Initializes a 1D Laplacian matrix distributed across CUDA devices.", "relation": "calls", "tail": "memcpyH2D", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/syevj/cusolver_syevj_example.cu", "model_response": [{"head": "cusolverDnCreate", "head_type": "__host__", "description": "Create a handle for the cuSolver Dn library context.", "relation": "calls", "tail": "cusolverDnSetStream", "tail_type": "CUDA_API"}, {"head": "cusolverDnSetStream", "head_type": "__host__", "description": "Set the stream associated with cuSolver Dn operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnCreateSyevjInfo", "head_type": "__host__", "description": "Create an opaque info object.", "relation": "calls", "tail": "cusolverDnXsyevjSetTolerance", "tail_type": "CUDA_API"}, {"head": "cusolverDnXsyevjSetTolerance", "head_type": "__host__", "description": "Set the tolerance for the Eigenvalue solver.", "relation": "calls", "tail": "cusolverDnXsyevjSetMaxSweeps", "tail_type": "CUDA_API"}, {"head": "cusolverDnXsyevjSetMaxSweeps", "head_type": "__host__", "description": "Set the maximum number of sweeps for the Eigenvalue solver.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDsyevj_bufferSize", "head_type": "__host__", "description": "Query the required buffer size for syevj operation.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDsyevj", "head_type": "__host__", "description": "Compute eigenvalues and eigenvectors.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnXsyevjGetSweeps", "head_type": "__host__", "description": "Get the number of sweeps performed by the Eigenvalue solver.", "relation": "calls", "tail": "cusolverDnXsyevjGetResidual", "tail_type": "CUDA_API"}, {"head": "cusolverDnXsyevjGetResidual", "head_type": "__host__", "description": "Get the residual of the Eigenvalue solver.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDestroySyevjInfo", "head_type": "__host__", "description": "Destroy an opaque info object.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDestroy", "head_type": "__host__", "description": "Destroy the cuSolver Dn library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocate device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copy memory asynchronously between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Create a new asynchronous stream.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "cudaDeviceSynchronize", "head_type": "__host__", "description": "Wait for all previous tasks on the device to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Wait for tasks on a specific stream to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Free device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroy an asynchronous stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Reset the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/Xpotrf/cusolver_Xpotrf_example.cu", "model_response": [{"head": "cusolverDnCreate", "head_type": "__host__", "description": "Creates a cusolver handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a CUDA stream with specific flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnSetStream", "head_type": "__host__", "description": "Sets the cusolver stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnCreateParams", "head_type": "__host__", "description": "Creates cusolver parameters.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies memory asynchronously between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnXpotrf_bufferSize", "head_type": "__host__", "description": "Queries workspace size for Cholesky factorization.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnXpotrf", "head_type": "__host__", "description": "Performs Cholesky factorization.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Synchronizes the stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnXpotrs", "head_type": "__host__", "description": "Solves A*X = B using Cholesky factorization.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDestroy", "head_type": "__host__", "description": "Destroys the cusolver handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the CUDA device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/orgqr/cusolver_orgqr_example.cu", "model_response": [{"head": "generate_random_matrix", "head_type": "__host__", "description": "Generates a random matrix using traits.", "relation": "calls", "tail": "traits::rand", "tail_type": "CUDA_CLASS"}, {"head": "make_diag_dominant_matrix", "head_type": "__host__", "description": "Makes a matrix diagonal dominant using traits.", "relation": "calls", "tail": "traits::abs", "tail_type": "CUDA_CLASS"}, {"head": "make_diag_dominant_matrix", "head_type": "__host__", "description": "Makes a matrix diagonal dominant using traits.", "relation": "calls", "tail": "traits::add", "tail_type": "CUDA_CLASS"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access between GPUs.", "relation": "calls", "tail": "cudaDeviceCanAccessPeer", "tail_type": "CUDA_API"}, {"head": "enablePeerAccess", "head_type": "__host__", "description": "Enables peer access between GPUs.", "relation": "calls", "tail": "cudaDeviceEnablePeerAccess", "tail_type": "CUDA_API"}, {"head": "workspaceFree", "head_type": "__host__", "description": "Frees workspace memory on multiple devices.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "workspaceAlloc", "head_type": "__host__", "description": "Allocates workspace memory on multiple devices.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple devices and initializes it to zero.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "createMat", "head_type": "__host__", "description": "Creates a matrix on multiple devices and initializes it to zero.", "relation": "calls", "tail": "cudaMemset", "tail_type": "CUDA_API"}, {"head": "destroyMat", "head_type": "__host__", "description": "Destroys matrices on multiple devices.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "memcpyH2D", "head_type": "__host__", "description": "Copies data from host to device.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "memcpyD2H", "head_type": "__host__", "description": "Copies data from device to host.", "relation": "calls", "tail": "cudaMemcpy2D", "tail_type": "CUDA_API"}, {"head": "malloc", "head_type": "__host__", "description": "Malloc function allocates memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaRuntimeGetVersion", "head_type": "__host__", "description": "Returns the version of the cuda runtime.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuSOLVER/potrfBatched/cusolver_potrfBatched_example.cu", "model_response": [{"head": "cusolverDnCreate", "head_type": "__host__", "description": "Creates a handle for cusolverDn.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnSetStream", "head_type": "__host__", "description": "Sets the stream for cusolverDn operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a CUDA stream with specific flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Synchronizes the specified stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data asynchronously between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDpotrfBatched", "head_type": "__host__", "description": "Performs batched Cholesky factorization.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDpotrsBatched", "head_type": "__host__", "description": "Solves batched linear systems using Cholesky factorized matrices.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cusolverDnDestroy", "head_type": "__host__", "description": "Destroys the cusolverDn handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device to a clean state.", "relation": "single", "tail": "", "tail_type": ""}]}
