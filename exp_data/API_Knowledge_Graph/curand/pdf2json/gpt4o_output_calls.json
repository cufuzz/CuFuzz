{"pdf_page": [8, 20], "model_response": [{"head": "curandGenerate", "head_type": "__host__", "description": "Generates pseudo- or quasirandom bits of output", "relation": "calls", "tail": "curandCreateGenerator", "tail_type": "CUDA_API"}, {"head": "curandSetPseudoRandomGeneratorSeed", "head_type": "__host__", "description": "Sets the seed for the random number generator", "relation": "calls", "tail": "curandCreateGenerator", "tail_type": "CUDA_API"}, {"head": "curandGenerateUniform", "head_type": "__host__", "description": "Generates uniformly distributed floating point values", "relation": "calls", "tail": "curandCreateGenerator", "tail_type": "CUDA_API"}, {"head": "curandGenerateNormal", "head_type": "__host__", "description": "Generates normally distributed floating point values", "relation": "calls", "tail": "curandCreateGenerator", "tail_type": "CUDA_API"}, {"head": "curandGenerateLogNormal", "head_type": "__host__", "description": "Generates log-normally distributed floating point values", "relation": "calls", "tail": "curandCreateGenerator", "tail_type": "CUDA_API"}, {"head": "curandGeneratePoisson", "head_type": "__host__", "description": "Generates Poisson-distributed integer values", "relation": "calls", "tail": "curandCreateGenerator", "tail_type": "CUDA_API"}, {"head": "curandGenerateUniformDouble", "head_type": "__host__", "description": "Generates uniformly distributed random numbers in double precision", "relation": "calls", "tail": "curandCreateGenerator", "tail_type": "CUDA_API"}, {"head": "curandGenerateNormalDouble", "head_type": "__host__", "description": "Generates normally distributed results in double precision.", "relation": "calls", "tail": "curandCreateGenerator", "tail_type": "CUDA_API"}, {"head": "curandGenerateLogNormalDouble", "head_type": "__host__", "description": "Generates log-normally distributed results in double precision", "relation": "calls", "tail": "curandCreateGenerator", "tail_type": "CUDA_API"}, {"head": "curand", "head_type": "__device__", "description": "Returns a sequence of pseudorandom numbers", "relation": "calls", "tail": "curand_init", "tail_type": "CUDA_API"}]}
{"pdf_page": [27, 37], "model_response": [{"head": "setup_kernel", "head_type": "__global__", "description": "Setup kernel initializes PRNG states with curand_init function for XORWOW generator.", "relation": "calls", "tail": "curand_init", "tail_type": "CUDA_API"}, {"head": "setup_kernel", "head_type": "__global__", "description": "Setup kernel initializes PRNG states with curand_init function for Philox generator.", "relation": "calls", "tail": "curand_init", "tail_type": "CUDA_API"}, {"head": "setup_kernel", "head_type": "__global__", "description": "Setup kernel initializes PRNG states with curand_init function for MRG32k3a generator.", "relation": "calls", "tail": "curand_init", "tail_type": "CUDA_API"}, {"head": "generate_kernel", "head_type": "__global__", "description": "Generate kernel uses the PRNG state to generate random unsigned integers using curand function.", "relation": "calls", "tail": "curand", "tail_type": "CUDA_API"}, {"head": "generate_uniform_kernel", "head_type": "__global__", "description": "Generate uniform kernel uses the PRNG state to generate random uniform numbers using curand_uniform function.", "relation": "calls", "tail": "curand_uniform", "tail_type": "CUDA_API"}, {"head": "generate_normal_kernel", "head_type": "__global__", "description": "Generate normal kernel uses the PRNG state to generate random normal numbers using curand_normal2 function.", "relation": "calls", "tail": "curand_normal2", "tail_type": "CUDA_API"}, {"head": "generate_kernel", "head_type": "__global__", "description": "Generate kernel uses the PRNG state to generate random unsigned integers using curand function for MRG32k3a.", "relation": "calls", "tail": "curand", "tail_type": "CUDA_API"}, {"head": "generate_uniform_kernel", "head_type": "__global__", "description": "Generate uniform kernel uses the PRNG state to generate random uniform double using curand_uniform_double function for MRG32k3a.", "relation": "calls", "tail": "curand_uniform_double", "tail_type": "CUDA_API"}, {"head": "generate_normal_kernel", "head_type": "__global__", "description": "Generate normal kernel uses the PRNG state to generate random normal double using curand_normal2_double function for MRG32k3a.", "relation": "calls", "tail": "curand_normal2_double", "tail_type": "CUDA_API"}, {"head": "generate_kernel", "head_type": "__global__", "description": "Generate kernel uses the PRNG state to generate random unsigned integers using curand function for MTGP32.", "relation": "calls", "tail": "curand", "tail_type": "CUDA_API"}, {"head": "setup_kernel", "head_type": "__global__", "description": "Setup kernel initializes Scrambled Sobol PRNG states with curand_init for Sobol states.", "relation": "calls", "tail": "curand_init", "tail_type": "CUDA_API"}, {"head": "generate_kernel", "head_type": "__global__", "description": "Generate kernel uses Scrambled Sobol states to generate 3D random points using curand_uniform_double.", "relation": "calls", "tail": "curand_uniform_double", "tail_type": "CUDA_API"}]}
{"pdf_page": [36, 40], "model_response": [{"head": "generate_kernel", "head_type": "__global__", "description": "This kernel generates random 3D points and increments a counter if a point is within a unit sphere.", "relation": "calls", "tail": "curand_uniform_double", "tail_type": "CUDA_API"}, {"head": "setup_kernel", "head_type": "__global__", "description": "Initializes states for Sobol sequences on the device.", "relation": "calls", "tail": "curand_init", "tail_type": "CUDA_API"}, {"head": "estimate_pi", "head_type": "__device__", "description": "This function estimates pi using random points within a quarter circle.", "relation": "calls", "tail": "curand_init", "tail_type": "CUDA_API"}, {"head": "estimate_pi", "head_type": "__device__", "description": "This function estimates pi using random points within a quarter circle.", "relation": "calls", "tail": "curand_uniform", "tail_type": "CUDA_API"}]}
{"pdf_page": [39, 47], "model_response": [{"head": "setup_kernel", "head_type": "__global__", "description": "Initializes the curand state for each thread.", "relation": "calls", "tail": "curand_init", "tail_type": "CUDA_API"}, {"head": "simple_device_API_kernel", "head_type": "__global__", "description": "Device kernel for simulating queues using simple device API Poisson distribution.", "relation": "calls", "tail": "curand_poisson", "tail_type": "CUDA_API"}, {"head": "simple_device_API_kernel", "head_type": "__global__", "description": "Device kernel for simulating queues using simple device API Poisson distribution.", "relation": "calls", "tail": "update_queue", "tail_type": "CUDA_API"}, {"head": "host_API_kernel", "head_type": "__global__", "description": "Host kernel for simulating queues using host API Poisson distribution.", "relation": "calls", "tail": "update_queue", "tail_type": "CUDA_API"}, {"head": "robust_device_API_kernel", "head_type": "__global__", "description": "Device kernel for simulating queues using robust device API Poisson distribution.", "relation": "calls", "tail": "curand_discrete", "tail_type": "CUDA_API"}, {"head": "robust_device_API_kernel", "head_type": "__global__", "description": "Device kernel for simulating queues using robust device API Poisson distribution.", "relation": "calls", "tail": "update_queue", "tail_type": "CUDA_API"}]}
