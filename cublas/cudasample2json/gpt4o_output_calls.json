{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/tpttr/cublas_tpttr_example.cu", "model_response": [{"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a CUDA stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data asynchronously between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for a stream's tasks to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the CUDA stream for cuBLAS operations.", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "cublasDtpttr", "head_type": "__host__", "description": "Performs a matrix conversion using cuBLAS.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys a cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/GemmStridedBatchedEx/cublas_GemmStridedBatchedEx_example.cu", "model_response": [{"head": "cublasGemmStridedBatchedEx", "head_type": "__host__", "description": "cublasGemmStridedBatchedEx performs a strided batched matrix-matrix multiplication.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "cublasGemmStridedBatchedEx", "head_type": "__host__", "description": "cublasGemmStridedBatchedEx performs a strided batched matrix-matrix multiplication.", "relation": "calls", "tail": "cublasCreate", "tail_type": "CUDA_API"}, {"head": "cublasGemmStridedBatchedEx", "head_type": "__host__", "description": "cublasGemmStridedBatchedEx performs a strided batched matrix-matrix multiplication.", "relation": "calls", "tail": "cublasDestroy", "tail_type": "CUDA_API"}, {"head": "cublasGemmStridedBatchedEx", "head_type": "__host__", "description": "cublasGemmStridedBatchedEx performs a strided batched matrix-matrix multiplication.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "cublasGemmStridedBatchedEx", "head_type": "__host__", "description": "cublasGemmStridedBatchedEx performs a strided batched matrix-matrix multiplication.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "cublasGemmStridedBatchedEx", "head_type": "__host__", "description": "cublasGemmStridedBatchedEx performs a strided batched matrix-matrix multiplication.", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "cublasGemmStridedBatchedEx", "head_type": "__host__", "description": "cublasGemmStridedBatchedEx performs a strided batched matrix-matrix multiplication.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "cublasGemmStridedBatchedEx", "head_type": "__host__", "description": "cublasGemmStridedBatchedEx performs a strided batched matrix-matrix multiplication.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "cublasGemmStridedBatchedEx", "head_type": "__host__", "description": "cublasGemmStridedBatchedEx performs a strided batched matrix-matrix multiplication.", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "cublasGemmStridedBatchedEx", "head_type": "__host__", "description": "cublasGemmStridedBatchedEx performs a strided batched matrix-matrix multiplication.", "relation": "calls", "tail": "cudaDeviceReset", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/GemmGroupedBatchedEx/cublas_GemmGroupedBatchedEx_example.cu", "model_response": [{"head": "cublasGemmGroupedBatchedEx", "head_type": "CUDA_API", "description": "Performs group batched matrix-matrix multiplication using cuBLAS.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "cublasGemmGroupedBatchedEx", "head_type": "CUDA_API", "description": "Performs group batched matrix-matrix multiplication using cuBLAS.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "cublasGemmGroupedBatchedEx", "head_type": "CUDA_API", "description": "Performs group batched matrix-matrix multiplication using cuBLAS.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "cublasGemmGroupedBatchedEx", "head_type": "CUDA_API", "description": "Performs group batched matrix-matrix multiplication using cuBLAS.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "cublasCreate", "head_type": "CUDA_API", "description": "Creates a cuBLAS library context.", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "cublasDestroy", "head_type": "CUDA_API", "description": "Destroys a cuBLAS library context.", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "cublasDestroy", "head_type": "CUDA_API", "description": "Destroys a cuBLAS library context.", "relation": "calls", "tail": "cudaDeviceReset", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/Csyrk3mEx/cublas_Csyrk3mEx_example.cu", "model_response": [{"head": "cublasCsyrk3mEx", "head_type": "__host__", "description": "The function cublasCsyrk3mEx executes a rank-k update operation for a symmetric matrix using mixed precision data types.", "relation": "calls", "tail": "traits", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "The function cudaStreamCreateWithFlags creates a new CUDA stream with specified flags.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "The function cublasSetStream sets the stream associated with a cublasHandle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "The function cudaMalloc allocates memory on the GPU.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "The function cudaMemcpyAsync asynchronously copies data between host and device memory.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "The function cudaStreamSynchronize waits for all preceding commands in a given stream to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "The function cudaFree frees memory on the GPU.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cublasDestroy", "head_type": "__host__", "description": "The function cublasDestroy destroys the cublas handle and releases resources.", "relation": "calls", "tail": "CUBLAS_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "The function cudaStreamDestroy destroys the CUDA stream.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "The function cudaDeviceReset resets the device.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/trttp/cublas_trttp_example.cu", "model_response": [{"head": "main", "head_type": "__host__", "description": "The main function initializes and manages CUDA resources.", "relation": "calls", "tail": "cublasCreate", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function initializes and manages CUDA resources.", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function initializes and manages CUDA resources.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function initializes and manages CUDA resources.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function initializes and manages CUDA resources.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function initializes and manages CUDA resources.", "relation": "calls", "tail": "cublasDtrttp", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function initializes and manages CUDA resources.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function initializes and manages CUDA resources.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function initializes and manages CUDA resources.", "relation": "calls", "tail": "cublasDestroy", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function initializes and manages CUDA resources.", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "The main function initializes and manages CUDA resources.", "relation": "calls", "tail": "cudaDeviceReset", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/GemmEx/cublas_GemmEx_example.cu", "model_response": [{"head": "print_matrix", "head_type": "__host__", "description": "Prints a matrix with given dimensions and leading dimension information.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_packed_matrix", "head_type": "__host__", "description": "Prints a packed matrix with specified fill mode and dimension.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_vector", "head_type": "__host__", "description": "Prints a vector with given dimension.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType according to the given string type name.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Performs error checking on CUDA API calls.", "relation": "calls", "tail": "cudaSuccess", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Performs error checking on cuBLAS API calls.", "relation": "calls", "tail": "CUBLAS_STATUS_SUCCESS", "tail_type": "CUDA_API"}, {"head": "cublasGemmEx", "head_type": "__host__", "description": "Performs a matrix-matrix multiplication operation using cuBLAS.", "relation": "calls", "tail": "traits<data_type>::cuda_data_type", "tail_type": "CUDA_CLASS"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/Nrm2Ex/cublas_Nrm2Ex_example.cu", "model_response": [{"head": "print_vector", "head_type": "__host__", "description": "Prints a vector of values using printf.", "relation": "calls", "tail": "printf", "tail_type": "CUDA_API"}, {"head": "print_matrix", "head_type": "__host__", "description": "Prints a matrix of values using printf.", "relation": "calls", "tail": "printf", "tail_type": "CUDA_API"}, {"head": "print_packed_matrix", "head_type": "__host__", "description": "Displays a packed matrix format using printf based on specified fill mode.", "relation": "calls", "tail": "printf", "tail_type": "CUDA_API"}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns the cudaDataType value for a given string representation of a type.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/geam/cublas_geam_example.cu", "model_response": [{"head": "print_matrix", "head_type": "__host__", "description": "Display matrix values to console output.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Convert string representation of cuda data type to cudaDataType enum.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Create and initialize the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Create a new asynchronous stream with the specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Set the stream to be used by cuBLAS operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocate device memory on the GPU.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Asynchronously copy memory between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDgeam", "head_type": "__host__", "description": "Perform matrix addition on double-precision matrices using cuBLAS.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Wait for all operations on the specified stream to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Free device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroy the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroy an asynchronous stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Reset the device and clean up all resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuCabsf", "head_type": "__device__", "description": "Calculate the absolute value of a cuFloatComplex number.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuCaddf", "head_type": "__device__", "description": "Add two cuFloatComplex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "make_cuFloatComplex", "head_type": "__device__", "description": "Construct a cuFloatComplex object from real and imaginary components.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuCabs", "head_type": "__device__", "description": "Calculate the absolute value of a cuDoubleComplex number.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuCadd", "head_type": "__device__", "description": "Add two cuDoubleComplex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "make_cuDoubleComplex", "head_type": "__device__", "description": "Construct a cuDoubleComplex object from real and imaginary components.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/Cherk3mEx/cublas_Cherk3mEx_example.cu", "model_response": [{"head": "print_matrix", "head_type": "CUDA_API", "description": "Prints a matrix of cuComplex data type.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "print_matrix", "head_type": "CUDA_API", "description": "Prints a matrix of cuDoubleComplex data type.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "print_packed_matrix", "head_type": "CUDA_API", "description": "Prints a packed matrix of cuComplex data type.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "print_packed_matrix", "head_type": "CUDA_API", "description": "Prints a packed matrix of cuDoubleComplex data type.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "print_vector", "head_type": "CUDA_API", "description": "Prints a vector of cuComplex data type.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "print_vector", "head_type": "CUDA_API", "description": "Prints a vector of cuDoubleComplex data type.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "CUDA_API", "description": "Creates a CUDA stream with specific flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "CUDA_API", "description": "Allocates device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "CUDA_API", "description": "Performs asynchronous memory copy.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "CUDA_API", "description": "Waits for stream tasks to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "CUDA_API", "description": "Frees allocated device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "CUDA_API", "description": "Destroys the CUDA stream object.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "CUDA_API", "description": "Resets the device state.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "CUDA_API", "description": "Creates the cuBLAS context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "CUDA_API", "description": "Sets the cuBLAS library for a specific CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCherk3mEx", "head_type": "CUDA_API", "description": "Performs a hermitian rank-k update using mixed precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "CUDA_API", "description": "Destroys the cuBLAS context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "CUDA_API", "description": "Returns cudaDataType based on the type string.", "relation": "calls", "tail": "cudaDataType", "tail_type": "CUDA_CLASS"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/CsyrkEx/cublas_CsyrkEx_example.cu", "model_response": [{"head": "cublasCsyrkEx", "head_type": "__host__", "description": "Compute symmetric rank-k update.", "relation": "calls", "tail": "traits<data_type>::cuda_data_type", "tail_type": "CUDA_CLASS"}, {"head": "cublasCreate", "head_type": "__host__", "description": "Create a new cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Set the stream to use within cuBLAS API calls.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_API"}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroy the cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_API"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a CUDA stream with the given flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies memory asynchronously.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until the stream has completed all operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the current device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/GemmBatchedEx/cublas_GemmBatchedEx_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates and returns a cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the stream associated with a cuBLAS context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies memory asynchronously between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGemmBatchedEx", "head_type": "__host__", "description": "Performs batched matrix-matrix multiplication using cuBLAS with specified computation and tensor options.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until the specified stream has completed all operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys an asynchronous stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device and terminates all ongoing operations.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/dgmm/cublas_dgmm_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS library handle, initialized for use.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with the specified flag options.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the stream associated with a cublasHandle_t object.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies memory asynchronously between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDdgmm", "head_type": "__host__", "description": "Computes matrix-matrix product of diagonal element multiplication on the GPU.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for all preceding commands in the command queue to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the asynchronous stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device, cleaning up resources.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/AxpyEx/cublas_AxpyEx_example.cu", "model_response": [{"head": "print_vector", "head_type": "__host__", "description": "Prints a vector of elements of a given type.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns the cudaDataType value based on the type name string.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Initializes the cuBLAS library and creates a handle for its operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the CUDA stream for cuBLAS operations associated with the specified cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasAxpyEx", "head_type": "__host__", "description": "Performs a vector-scalar multiplication and addition operation using cuBLAS with extended double precision support.", "relation": "calls", "tail": "traits", "tail_type": "CUDA_CLASS"}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS handle and releases resources allocated for cuBLAS operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the CUDA device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies memory asynchronously between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for a stream to complete all operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a stream and deallocates any resources associated with it.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/DotEx/cublas_DotEx_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates the cuBLAS library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with the specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the CUDA stream for cuBLAS operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Asynchronously copies memory between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDotEx", "head_type": "__host__", "description": "Computes the dot product of two vectors using extended functionality.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until the specified stream has completed all operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the current device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/DotEx/cublas_DotcEx_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the stream for a cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies memory asynchronously between host and device.", "relation": "calls", "tail": "cudaMemcpyHostToDevice", "tail_type": "CUDA_API"}, {"head": "cublasDotcEx", "head_type": "__host__", "description": "Computes the dot product of two complex vectors with extended options.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until the specified stream has completed all operations.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys a cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys an asynchronous stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/CherkEx/cublas_CherkEx_example.cu", "model_response": [{"head": "traits<cuFloatComplex>::abs", "head_type": "__host__", "description": "Return the absolute value of a cuFloatComplex", "relation": "calls", "tail": "cuCabsf", "tail_type": "CUDA_API"}, {"head": "traits<cuFloatComplex>::rand", "head_type": "__host__", "description": "Generate a random cuFloatComplex value", "relation": "calls", "tail": "make_cuFloatComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuFloatComplex>::add", "head_type": "__host__", "description": "Add two cuFloatComplex values", "relation": "calls", "tail": "cuCaddf", "tail_type": "CUDA_API"}, {"head": "traits<cuFloatComplex>::add", "head_type": "__host__", "description": "Add cuFloatComplex and scalar", "relation": "calls", "tail": "make_cuFloatComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuFloatComplex>::mul", "head_type": "__host__", "description": "Multiply cuFloatComplex by a scalar", "relation": "calls", "tail": "make_cuFloatComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::abs", "head_type": "__host__", "description": "Return the absolute value of a cuDoubleComplex", "relation": "calls", "tail": "cuCabs", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::rand", "head_type": "__host__", "description": "Generate a random cuDoubleComplex value", "relation": "calls", "tail": "make_cuDoubleComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::add", "head_type": "__host__", "description": "Add two cuDoubleComplex values", "relation": "calls", "tail": "cuCadd", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::add", "head_type": "__host__", "description": "Add cuDoubleComplex and scalar", "relation": "calls", "tail": "make_cuDoubleComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::mul", "head_type": "__host__", "description": "Multiply cuDoubleComplex by a scalar", "relation": "calls", "tail": "make_cuDoubleComplex", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "", "description": "Check CUDA errors", "relation": "single", "tail": "", "tail_type": ""}, {"head": "CUBLAS_CHECK", "head_type": "", "description": "Check cuBLAS errors", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_matrix", "head_type": "__host__", "description": "Print matrix with given dimensions and data pointer", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_packed_matrix", "head_type": "__host__", "description": "Print packed matrix with given dimensions and data pointer", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_vector", "head_type": "__host__", "description": "Print vector with given size and data pointer", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Map string-based type to cudaDataType", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/ScalEx/cublas_ScalEx_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Create and initialize a cuBLAS library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Create a new asynchronous stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the cuBLAS library stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data between host and device asynchronously.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasScalEx", "head_type": "__host__", "description": "Scales a vector by a scalar using the cuBLAS API.", "relation": "calls", "tail": "traits<data_type>::cuda_data_type", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for a stream to complete all operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Extensions/RotEx/cublas_RotEx_example.cu", "model_response": [{"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device and releases resources", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with the given flags", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks the host until the specified stream has completed all preceding work", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the specified stream", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous memory copy", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees the memory allocated on the device", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates the cuBLAS library context", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Binds a stream to the cuBLAS handle", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library context", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasRotEx", "head_type": "__host__", "description": "Applies a plane rotation with extended functionality", "relation": "calls", "tail": "traits<data_type>::cuda_data_type", "tail_type": "CUDA_CLASS"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/swap/cublas_swap_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates the cuBLAS library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with the specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a stream with a cuBLAS library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies memory asynchronously.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDswap", "head_type": "__host__", "description": "Swaps a vector with another vector using double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for a stream to complete all operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a previously created stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/nrm2/cublas_nrm2_example.cu", "model_response": [{"head": "print_vector", "head_type": "__host__", "description": "Prints a vector to standard output.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType value for a specified string type.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Checks for cublas errors.", "relation": "calls", "tail": "cublasCreate", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Checks for cublas errors.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Checks for cublas errors.", "relation": "calls", "tail": "cublasDnrm2", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Checks for cublas errors.", "relation": "calls", "tail": "cublasDestroy", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for CUDA errors.", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for CUDA errors.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for CUDA errors.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for CUDA errors.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for CUDA errors.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for CUDA errors.", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for CUDA errors.", "relation": "calls", "tail": "cudaDeviceReset", "tail_type": "CUDA_API"}, {"head": "print_matrix", "head_type": "__host__", "description": "Prints a matrix to standard output.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_packed_matrix", "head_type": "__host__", "description": "Prints a packed matrix to standard output.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/rotg/cublas_rotg_example.cu", "model_response": [{"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType value as defined in library_types.h for the string containing type name.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "CUDA_API", "description": "Creates the cuBLAS handle and sets the pointer to the handle.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "cudaStreamCreateWithFlags", "head_type": "CUDA_API", "description": "Creates a CUDA stream with specific flags.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "CUDA_API", "description": "Sets the stream for the cuBLAS library to use.", "relation": "calls", "tail": "cublasDrotg", "tail_type": "CUDA_API"}, {"head": "cublasDrotg", "head_type": "CUDA_API", "description": "Computes the parameters for a Givens rotation.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "CUDA_API", "description": "Synchronizes the specified stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "CUDA_API", "description": "Destroys the cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "CUDA_API", "description": "Destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "CUDA_API", "description": "Resets the CUDA device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/asum/cublas_asum_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Create a handle for cuBLAS context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Create an asynchronous stream with stream creation flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a stream with the cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous memory copy between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDasum", "head_type": "__host__", "description": "Computes the sum of absolute values for a vector in double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until a stream execution is complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS handle and releases resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys and cleans up the stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device and cleans up all resources.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/amin/cublas_amin_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "CUDA_API", "description": "Creates a cuBLAS library context, allocating resources as needed.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "CUDA_API", "description": "Creates a new asynchronous stream with the specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "CUDA_API", "description": "Associates a cuBLAS handle with a stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "CUDA_API", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "CUDA_API", "description": "Performs an asynchronous copy between host and device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasIdamin", "head_type": "CUDA_API", "description": "Finds the index of the smallest absolute value element in a vector using a cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "CUDA_API", "description": "Waits for stream tasks to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "CUDA_API", "description": "Frees memory allocated on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "CUDA_API", "description": "Destroys a cuBLAS library context, freeing resources as needed.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "CUDA_API", "description": "Destroys a stream and releases resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "CUDA_API", "description": "Resets the device, clearing device context.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/copy/cublas_copy_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new stream with given flags.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a stream with a cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies memory between host and device asynchronously.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDcopy", "head_type": "__host__", "description": "Copies a vector from device to device.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for all operations in a stream to complete.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/axpy/cublas_axpy_example.cu", "model_response": [{"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType value for the string containing type name.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "CUBLAS API error checking macro.", "relation": "calls", "tail": "cublasCreate", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "CUDA API error checking macro.", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "CUBLAS API error checking macro.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "CUDA API error checking macro.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "CUDA API error checking macro.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "CUBLAS API error checking macro.", "relation": "calls", "tail": "cublasDaxpy", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "CUDA API error checking macro.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "CUDA API error checking macro.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "CUBLAS API error checking macro.", "relation": "calls", "tail": "cublasDestroy", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "CUDA API error checking macro.", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "CUDA API error checking macro.", "relation": "calls", "tail": "cudaDeviceReset", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/amax/cublas_amax_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Create a cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Set the cuBLAS library stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasIdamax", "head_type": "__host__", "description": "Compute the index of the element with the maximum absolute value.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroy the cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Create a stream with specific flags.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Asynchronously copy memory from host to device.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Synchronize the specified stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaFree", "head_type": "__host__", "description": "Free device memory.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Reset the device and clean up resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroy the specified stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/rotm/cublas_rotm_example.cu", "model_response": [{"head": "get_cuda_library_type", "head_type": "__host__", "description": "get_cuda_library_type returns cudaDataType value for the given string containing type name.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_vector", "head_type": "__host__", "description": "Prints a vector of given data type.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Initializes the cuBLAS library and creates a handle to an opaque structure holding the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a CUDA stream with a cuBLAS library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous copy between the host and the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDrotm", "head_type": "__host__", "description": "Applies the modified Givens rotation to double precision vectors.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks the host until the stream operations complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device and marks all allocations as invalid.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/rot/cublas_rot_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS handle to store the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with the given flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a stream with the cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous memory copy.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDrot", "head_type": "__host__", "description": "Applies a plane rotation to points, using double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for all operations in a stream to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys a cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/scal/cublas_scal_example.cu", "model_response": [{"head": "CUDA_CHECK", "head_type": "__host__", "description": "Cuda error checking macro.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Cuda error checking macro.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Cuda error checking macro.", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Cuda error checking macro.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Cuda error checking macro.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Cuda error checking macro.", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Cuda error checking macro.", "relation": "calls", "tail": "cudaDeviceReset", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "CUBLAS error checking macro.", "relation": "calls", "tail": "cublasCreate", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "CUBLAS error checking macro.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "CUBLAS error checking macro.", "relation": "calls", "tail": "cublasDscal", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "CUBLAS error checking macro.", "relation": "calls", "tail": "cublasDestroy", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/rotmg/cublas_rotmg_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "This function creates a handle for cuBLAS context and initializes it.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "This function creates a CUDA stream with specific flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "This function sets a specific stream for cuBLAS operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDrotmg", "head_type": "__host__", "description": "This function constructs the modified Givens transformation matrix for double-precision data.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "This function blocks until all previously issued commands in the specified stream have completed.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "This function deallocates device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "This function destroys the cuBLAS handle and releases resources associated with it.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "This function destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "This function resets the device and cleans up all state.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuComplex", "head_type": "__host__", "description": "This is a CUDA-specific complex number type.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuFloatComplex", "head_type": "__host__", "description": "This is a single-precision floating-point complex number type in CUDA.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuDoubleComplex", "head_type": "__host__", "description": "This is a double-precision floating-point complex number type in CUDA.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/dot/cublas_dot_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a CUBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a CUDA stream with a CUBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDdot", "head_type": "__host__", "description": "Computes the dot product of two double-precision vectors.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the CUBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Asynchronously copies data between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for all commands in a stream to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device and destroys all resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates device memory.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-1/dot/cublas_dotc_example.cu", "model_response": [{"head": "cublasZdotc", "head_type": "CUDA_API", "description": "Compute the dot product conjugate of two vectors using cuBLAS.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "cublasCreate", "head_type": "CUDA_API", "description": "Create a cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "CUDA_API", "description": "Create a new CUDA stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "CUDA_API", "description": "Set the stream for the cuBLAS library to operate on.", "relation": "calls", "tail": "cublasCreate", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "CUDA_API", "description": "Allocate device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "CUDA_API", "description": "Copy data between host and device asynchronously.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "CUDA_API", "description": "Block until the specified stream finishes its tasks.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "CUDA_API", "description": "Free allocated device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "CUDA_API", "description": "Destroy the previously created cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "CUDA_API", "description": "Destroy a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "CUDA_API", "description": "Reset the CUDA device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/gbmv/cublas_gbmv_example.cu", "model_response": [{"head": "traits", "head_type": "__host__", "description": "Template struct for scalar and complex type traits", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_matrix", "head_type": "__host__", "description": "Function template to print a matrix of various data types", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_packed_matrix", "head_type": "__host__", "description": "Function template to print a packed matrix of various data types", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_vector", "head_type": "__host__", "description": "Function template to print a vector of various data types", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType based on string representation of type", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "CUDA_API", "description": "Create a cuBLAS library context", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "cudaStreamCreateWithFlags", "head_type": "CUDA_API", "description": "Creates a stream and sets various flags", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "CUDA_API", "description": "Associate a CUDA stream with the cuBLAS handle", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "CUDA_API", "description": "Allocates memory on the device", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "CUDA_API", "description": "Copies data asynchronously between host and device", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDgbmv", "head_type": "CUDA_API", "description": "Matrix-vector multiplication for band matrices using cuBLAS for double-precision", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "CUDA_API", "description": "Blocks host until stream operations are complete", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "CUDA_API", "description": "Frees memory on the device", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "CUDA_API", "description": "Destroys the cuBLAS library context", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "CUDA_API", "description": "Destroys a stream", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "CUDA_API", "description": "Resets the device and cleans up resources", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/tpmv/cublas_tpmv_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a new cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a CUDA stream with a cublas handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous memory copy.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDtpmv", "head_type": "__host__", "description": "Performs a triangular matrix-vector product using packed storage and double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until the specified stream completes.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/tbmv/cublas_tbmv_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a new cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Create a new asynchronous CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a CUDA stream with a cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data between host and device asynchronously.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDtbmv", "head_type": "__host__", "description": "Performs a triangular band matrix-vector multiplication using double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data between device and host asynchronously.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for all operations in a CUDA stream to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "traits", "head_type": "CUDA_CLASS", "description": "A template struct providing operations and constants for various types.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/spr/cublas_spr_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a handle to be used in all subsequent calls to the cuBLAS V2 API functions.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with the specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the stream to be used by all subsequent cuBLAS calls using the handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data between host and device asynchronously.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDspr", "head_type": "__host__", "description": "Computes the rank-1 update of a real symmetric packed matrix.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until the stream has finished its operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS handle and releases resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the asynchronous stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the current device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "make_cuFloatComplex", "head_type": "__device__", "description": "Constructs a complex number with float precision.", "relation": "calls", "tail": "cuCaddf", "tail_type": "CUDA_API"}, {"head": "make_cuDoubleComplex", "head_type": "__device__", "description": "Constructs a complex number with double precision.", "relation": "calls", "tail": "cuCadd", "tail_type": "CUDA_API"}, {"head": "traits<cuFloatComplex>::rand", "head_type": "__host__", "description": "Generates a random cuFloatComplex number.", "relation": "calls", "tail": "make_cuFloatComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::rand", "head_type": "__host__", "description": "Generates a random cuDoubleComplex number.", "relation": "calls", "tail": "make_cuDoubleComplex", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/trmv/cublas_trmv_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the cuBLAS library context to use a particular stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies memory asynchronously between host and device or device and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDtrmv", "head_type": "__host__", "description": "Performs matrix-vector operations for double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for commands to complete in a specified stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuCabsf", "head_type": "__device__", "description": "Computes the absolute value of a floating-point complex number.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuCaddf", "head_type": "__device__", "description": "Adds two floating-point complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuCabs", "head_type": "__device__", "description": "Computes the absolute value of a double precision complex number.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuCadd", "head_type": "__device__", "description": "Adds two double precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "make_cuFloatComplex", "head_type": "__device__", "description": "Creates a floating-point complex number from real values.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "make_cuDoubleComplex", "head_type": "__device__", "description": "Creates a double precision complex number from real values.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/gemv/cublas_gemv_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates and returns a handle to a new cuBLAS (CUDA Basic Linear Algebra Subprograms) library context.", "relation": "calls", "tail": "cublasStatus_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with specified flags.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a stream with a cuBLAS handle.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies memory between host and device asynchronously.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDgemv", "head_type": "__host__", "description": "Computes matrix-vector product using double precision floating-point elements for matrix A.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for the specified stream to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys a cuBLAS handle and releases associated resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys an asynchronous stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the current device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/hpr/cublas_hpr_example.cu", "model_response": [{"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Asynchronously copies data between host and device.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits until tasks in the specified stream are complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Initializes a cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys a cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a stream with cuBLAS routines.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZhpr", "head_type": "__host__", "description": "Computes the hermitian rank-1 update using complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Asynchronously copies data between host and device.", "relation": "calls", "tail": "cudaMemcpyHostToDevice", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/her/cublas_her_example.cu", "model_response": [{"head": "print_matrix", "head_type": "__host__", "description": "A function template to print matrix values based on type.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_vector", "head_type": "__host__", "description": "A function template to print vector values based on type.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "CUDA_API", "description": "Creates a CUDA stream with specified flags.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCreate", "head_type": "CUDA_API", "description": "Creates a cuBLAS handle.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetStream", "head_type": "CUDA_API", "description": "Sets the CUDA stream for cuBLAS operations.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMalloc", "head_type": "CUDA_API", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "CUDA_API", "description": "Asynchronously copies memory between host and device.", "relation": "calls", "tail": "cudaMemcpyKind", "tail_type": "CUDA_CLASS"}, {"head": "cublasZher", "head_type": "CUDA_API", "description": "Computes complex rank-1 update on Hermitian matrix with cuBLAS.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMemcpyAsync", "head_type": "CUDA_API", "description": "Asynchronously copies memory between device and host.", "relation": "calls", "tail": "cudaMemcpyKind", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "CUDA_API", "description": "Blocks host until CUDA stream operations complete.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaFree", "head_type": "CUDA_API", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "CUDA_API", "description": "Destroys the cuBLAS handle.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamDestroy", "head_type": "CUDA_API", "description": "Destroys a CUDA stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaDeviceReset", "head_type": "CUDA_API", "description": "Resets the current device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/ger/cublas_ger_example.cu", "model_response": [{"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for and handles CUDA API errors.", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for and handles CUDA API errors.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for and handles CUDA API errors.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for and handles CUDA API errors.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for and handles CUDA API errors.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for and handles CUDA API errors.", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for and handles CUDA API errors.", "relation": "calls", "tail": "cudaDeviceReset", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Checks for and handles cuBLAS API errors.", "relation": "calls", "tail": "cublasCreate", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Checks for and handles cuBLAS API errors.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Checks for and handles cuBLAS API errors.", "relation": "calls", "tail": "cublasDger", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Checks for and handles cuBLAS API errors.", "relation": "calls", "tail": "cublasDestroy", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/trsv/cublas_trsv_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the stream created for a cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the GPU device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data asynchronously between host and device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDtrsv", "head_type": "__host__", "description": "Performs the triangular matrix-vector multiplication.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data asynchronously between device and host memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Synchronizes the stream, waiting for the operations to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees allocated memory on the GPU device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys a cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys an asynchronous stream created on the GPU.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device, cleaning up all resources.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/symv/cublas_symv_example.cu", "model_response": [{"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType value as defined in library_types.h for the string containing type name.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets a stream for cuBLAS library.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Asynchronous memory copy between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDsymv", "head_type": "__host__", "description": "Performs the symmetric matrix-vector multiplication operation using cuBLAS.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until a stream has completed all operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Error checking macro for CUDA API calls.", "relation": "calls", "tail": "cudaError_t", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Error checking macro for cuBLAS API calls.", "relation": "calls", "tail": "cublasStatus_t", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/tbsv/cublas_tbsv_example.cu", "model_response": [{"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates and returns a handle for a new asynchronous stream.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data asynchronously between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until actions on the stream are completed.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the created stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device to a clean state.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS handle.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the stream for cuBLAS operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDtbsv", "head_type": "__host__", "description": "Computes a triangular band matrix-vector multiplication.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS handle and frees any resources used by cuBLAS.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/her2/cublas_her2_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Create and initialize the cuBLAS library context.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Create a CUDA stream with specified flags.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Set the CUDA stream for cuBLAS operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocate device memory.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copy data asynchronously between host and device.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "cublasZher2", "head_type": "__host__", "description": "Perform a symmetric rank 2 update with complex double precision inputs.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Free device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroy the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroy a CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Reset the current device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/hpr2/cublas_hpr2_example.cu", "model_response": [{"head": "__global__ void print_packed_matrix", "head_type": "__device__", "description": "Prints a packed matrix for cuDoubleComplex, possibly using CUDA facilities.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "__global__ void print_vector", "head_type": "__device__", "description": "Prints a vector for cuDoubleComplex, possibly using CUDA facilities.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns the CUDA library type as defined in library_types.h for a string containing type name.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/spr2/cublas_spr2_example.cu", "model_response": [{"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks for CUDA API errors.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Checks for cuBLAS API errors.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_packed_matrix", "head_type": "__host__", "description": "Prints matrices in packed format.", "relation": "calls", "tail": "std::printf", "tail_type": "CUDA_API"}, {"head": "print_vector", "head_type": "__host__", "description": "Prints vectors.", "relation": "calls", "tail": "std::printf", "tail_type": "CUDA_API"}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType value based on the string containing type name.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS context.", "relation": "calls", "tail": "CUBLAS_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new CUDA stream with the specified flags.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the CUDA stream used by cuBLAS library calls.", "relation": "calls", "tail": "CUBLAS_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data asynchronously between host and device.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cublasDspr2", "head_type": "__host__", "description": "Computes the symmetric rank-2 update in double precision.", "relation": "calls", "tail": "CUBLAS_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until the stream is empty.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the handle and cleans up all associated resources.", "relation": "calls", "tail": "CUBLAS_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the CUDA stream.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the GPU.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/hemv/cublas_hemv_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Create a cublas handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Create a cuda stream with specific flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Set a cuda stream to cublas handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocate memory on the device.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copy memory asynchronously from host to device or device to host.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasZhemv", "head_type": "__host__", "description": "Perform hermitian matrix-vector multiplication for double precision complex numbers.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Synchronize the specified stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Free the allocated memory on the device.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroy the cublas handle and release resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroy the specified stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Reset the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/spmv/cublas_spmv_example.cu", "model_response": [{"head": "CUDA_CHECK", "head_type": "__host__", "description": "Macro for checking CUDA API errors.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Macro for checking cuBLAS API errors.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Create a cuBLAS handle.", "relation": "calls", "tail": "cublasStatus_t", "tail_type": "CUDA_API"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Create a CUDA stream with specific flags.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Set a stream for the cuBLAS library.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocate device memory.", "relation": "calls", "tail": "cudaError_t", "tail_type": "CUDA_API"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copy memory asynchronously.", "relation": "calls", "tail": "cudaError_t", "tail_type": "CUDA_API"}, {"head": "cublasDspmv", "head_type": "__host__", "description": "Performs the symmetric packed matrix-vector multiplication for double precision.", "relation": "calls", "tail": "cublasStatus_t", "tail_type": "CUDA_API"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Block until a CUDA stream has completed.", "relation": "calls", "tail": "cudaError_t", "tail_type": "CUDA_API"}, {"head": "cudaFree", "head_type": "__host__", "description": "Free device memory.", "relation": "calls", "tail": "cudaError_t", "tail_type": "CUDA_API"}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroy a cuBLAS handle.", "relation": "calls", "tail": "cublasStatus_t", "tail_type": "CUDA_API"}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroy a CUDA stream.", "relation": "calls", "tail": "cudaError_t", "tail_type": "CUDA_API"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Reset the device and clean up all resources used.", "relation": "calls", "tail": "cudaError_t", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/sbmv/cublas_sbmv_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS handle.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the cuBLAS library stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDsbmv", "head_type": "__host__", "description": "Computes a symmetric banded matrix-vector product using double precision.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS handle.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "calls", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data asynchronously between host and device.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a stream with specified flags.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until all operations in the stream have finished.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees allocated device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the created stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/syr2/cublas_syr2_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the stream used by the cuBLAS library.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data between host and device asynchronously.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDsyr2", "head_type": "__host__", "description": "Performs the symmetric rank-2 update for double precision.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for all operations in the stream to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys an asynchronous stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets all states of the GPU.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/syr/cublas_syr_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the cuBLAS handle stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous memory copy.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDsyr", "head_type": "__host__", "description": "Performs symmetric rank 1 operation using double precision.", "relation": "calls", "tail": "cublasFillMode_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous memory copy.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until the stream has completed all operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys a cuBLAS handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/hpmv/cublas_hpmv_example.cu", "model_response": [{"head": "print_packed_matrix", "head_type": "__host__", "description": "Prints packed matrix using provided CUDA data.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_vector", "head_type": "__host__", "description": "Prints vector data using provided CUDA data.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType for string containing type name.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "main", "head_type": "__host__", "description": "", "relation": "calls", "tail": "cublasCreate", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "", "relation": "calls", "tail": "cublasZhpmv", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "", "relation": "calls", "tail": "cublasDestroy", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "main", "head_type": "__host__", "description": "", "relation": "calls", "tail": "cudaDeviceReset", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-2/tpsv/cublas_tpsv_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "CUDA_API", "description": "cublasCreate creates a CUBLAS handle.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "CUDA_API", "description": "Creates a new asynchronous stream of execution with the specified flags.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetStream", "head_type": "CUDA_API", "description": "Sets the stream used by the cuBLAS library.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMalloc", "head_type": "CUDA_API", "description": "Allocates device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "CUDA_API", "description": "Copies data asynchronously between host and device memory.", "relation": "calls", "tail": "cudaMemcpy", "tail_type": "CUDA_API"}, {"head": "cublasDtpsv", "head_type": "CUDA_API", "description": "Solves a triangular packed system of linear equations with multiple right-hand sides.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "CUDA_API", "description": "Blocks until actions in the specified stream have completed.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "CUDA_API", "description": "Deallocates device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "CUDA_API", "description": "Destroys the CUBLAS handle.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamDestroy", "head_type": "CUDA_API", "description": "Destroys the specified stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaDeviceReset", "head_type": "CUDA_API", "description": "Resets the device, cleaning up resources.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/syrk/cublas_syrk_example.cu", "model_response": [{"head": "print_matrix", "head_type": "__host__", "description": "Function to print a matrix of given dimensions.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Function to get the cudaDataType from a string description.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Create a new cuBLAS library handle.", "relation": "calls", "tail": "CUBLAS_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new CUDA stream with the specified flags.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Set the stream for cuBLAS operations.", "relation": "calls", "tail": "CUBLAS_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocate device memory.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Asynchronously copies data between host and device.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cublasDsyrk", "head_type": "__host__", "description": "Performs a symmetric rank-k update on a matrix.", "relation": "calls", "tail": "CUBLAS_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for the specified stream to complete.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroy the cuBLAS handle.", "relation": "calls", "tail": "CUBLAS_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the CUDA stream.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device to a clean state.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/syrkx/cublas_syrkx_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a CUDA stream with the cuBLAS handle.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDsyrkx", "head_type": "__host__", "description": "Performs a symmetric rank-k update.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys a cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates and returns a new async stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "calls", "tail": "void *", "tail_type": "CUDA_API"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous memory copy.", "relation": "calls", "tail": "cudaMemcpyKind", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for stream tasks to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys and cleans up a stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device and cleans up all resources.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/gemm/cublas_gemm_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "CUDA_API", "description": "Creates a new cublas handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "CUDA_API", "description": "Sets the stream for a cublas handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "CUDA_API", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "CUDA_API", "description": "Copies data between host and device asynchronously.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDgemm", "head_type": "CUDA_API", "description": "Performs double-precision matrix multiplication using cublas.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "CUDA_API", "description": "Blocks until a stream has completed all operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "CUDA_API", "description": "Frees device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "CUDA_API", "description": "Destroys a cublas handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "CUDA_API", "description": "Destroys a cuda stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "CUDA_API", "description": "Resets the device.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/hemm/cublas_hemm_example.cu", "model_response": [{"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a stream using flags", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data asynchronously", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Synchronizes the stream", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the CUDA stream", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the CUDA device", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS handle", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the cuBLAS stream", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZhemm", "head_type": "__host__", "description": "Performs Hermitian matrix multiplication", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS handle", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/herk/cublas_herk_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS library handle.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream within specific flags.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a cuBLAS handle with a stream.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous copy from host to device or device to host.", "relation": "calls", "tail": "cudaMemcpyKind", "tail_type": "CUDA_CLASS"}, {"head": "cublasZherk", "head_type": "__host__", "description": "Computes a Hermitian rank-k update of a matrix.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs an asynchronous copy, typically from device to host.", "relation": "calls", "tail": "cudaMemcpyKind", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for stream tasks to complete.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory allocated on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys a cuBLAS library handle.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys an asynchronous stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device and cleans up resources.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/symm/cublas_symm_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a CUDA stream object with the specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets the stream used by cuBLAS.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data asynchronously between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until the specified stream has completed all operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDsymm", "head_type": "__host__", "description": "Performs symmetric matrix multiplication using cuBLAS.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys the specified CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device to an initial state.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "traits<cuFloatComplex>::abs", "head_type": "__host__", "description": "Computes the absolute value of a cuFloatComplex number.", "relation": "calls", "tail": "cuCabsf", "tail_type": "CUDA_API"}, {"head": "traits<cuFloatComplex>::add", "head_type": "__host__", "description": "Adds two cuFloatComplex numbers.", "relation": "calls", "tail": "cuCaddf", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::abs", "head_type": "__host__", "description": "Computes the absolute value of a cuDoubleComplex number.", "relation": "calls", "tail": "cuCabs", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::add", "head_type": "__host__", "description": "Adds two cuDoubleComplex numbers.", "relation": "calls", "tail": "cuCadd", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/trsm/cublas_trsm_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Initializes the cuBLAS library and creates a handle.", "relation": "calls", "tail": "CUBLAS_CHECK", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Sets a stream for cuBLAS operations.", "relation": "calls", "tail": "CUBLAS_CHECK", "tail_type": "CUDA_API"}, {"head": "cublasDtrsm", "head_type": "__host__", "description": "Performs triangular matrix solve with double precision.", "relation": "calls", "tail": "CUBLAS_CHECK", "tail_type": "CUDA_API"}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library context.", "relation": "calls", "tail": "CUBLAS_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates device memory.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Performs asynchronous copy between host and device.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new CUDA stream with specific flags.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Synchronizes a CUDA stream.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the CUDA device.", "relation": "calls", "tail": "CUDA_CHECK", "tail_type": "CUDA_API"}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType value for the string containing type name.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/gemm3m/cublas_gemm3m_example.cu", "model_response": [{"head": "CUDA_CHECK", "head_type": "__host__", "description": "Error checking for CUDA functions.", "relation": "calls", "tail": "cudaStreamCreateWithFlags", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Error checking for CUDA functions.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Error checking for CUDA functions.", "relation": "calls", "tail": "cudaMemcpyAsync", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Error checking for CUDA functions.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Error checking for CUDA functions.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Error checking for CUDA functions.", "relation": "calls", "tail": "cudaStreamDestroy", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Error checking for CUDA functions.", "relation": "calls", "tail": "cudaDeviceReset", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Error checking for cuBLAS functions.", "relation": "calls", "tail": "cublasCreate", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Error checking for cuBLAS functions.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Error checking for cuBLAS functions.", "relation": "calls", "tail": "cublasCgemm3m", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Error checking for cuBLAS functions.", "relation": "calls", "tail": "cublasDestroy", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/syr2k/cublas_syr2k_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Creates a cuBLAS library context handle.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a new asynchronous stream with specified flags.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a CUDA stream with a cuBLAS library handle.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates memory on the device.", "relation": "calls", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies data asynchronously between host and device memory.", "relation": "calls", "tail": "cudaMemcpyKind", "tail_type": "CUDA_CLASS"}, {"head": "cublasDsyr2k", "head_type": "__host__", "description": "Performs a rank-2k update operation on symmetric matrices in double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks the host until a stream operation completes.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees allocated device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys and cleans up asynchronous stream resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device, clearing resource allocations.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/trsmBatched/cublas_trsmBatched_example.cu", "model_response": [{"head": "traits<cuFloatComplex>::rand", "head_type": "__host__", "description": "Generates a random cuFloatComplex using a provided RNG.", "relation": "calls", "tail": "make_cuFloatComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::rand", "head_type": "__host__", "description": "Generates a random cuDoubleComplex using a provided RNG.", "relation": "calls", "tail": "make_cuDoubleComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuFloatComplex>::abs", "head_type": "__host__", "description": "Computes the absolute value of a cuFloatComplex number.", "relation": "calls", "tail": "cuCabsf", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::abs", "head_type": "__host__", "description": "Computes the absolute value of a cuDoubleComplex number.", "relation": "calls", "tail": "cuCabs", "tail_type": "CUDA_API"}, {"head": "traits<cuFloatComplex>::add", "head_type": "__host__", "description": "Adds two cuFloatComplex numbers.", "relation": "calls", "tail": "cuCaddf", "tail_type": "CUDA_API"}, {"head": "traits<cuFloatComplex>::add", "head_type": "__host__", "description": "Adds a cuFloatComplex number and a scalar float as a cuFloatComplex.", "relation": "calls", "tail": "make_cuFloatComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::add", "head_type": "__host__", "description": "Adds two cuDoubleComplex numbers.", "relation": "calls", "tail": "cuCadd", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::add", "head_type": "__host__", "description": "Adds a cuDoubleComplex number and a scalar double as a cuDoubleComplex.", "relation": "calls", "tail": "make_cuDoubleComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuFloatComplex>::mul", "head_type": "__host__", "description": "Multiplies a cuFloatComplex number by a scalar double.", "relation": "calls", "tail": "make_cuFloatComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::mul", "head_type": "__host__", "description": "Multiplies a cuDoubleComplex number by a scalar double.", "relation": "calls", "tail": "make_cuDoubleComplex", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/her2k/cublas_her2k_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Create and initialize a handle for cublas.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Create a non-blocking CUDA stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Set stream to be used by cublas handle.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocates page-locked memory for use by CUDA.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copies memory asynchronously between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZher2k", "head_type": "__host__", "description": "Performs a Hermitian rank 2 update operation.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Blocks until stream completes all operations.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees memory allocated by cudaMalloc.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cublas handle and releases resources.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroys a CUDA stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Resets the device and releases all resources.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/gemmStridedBatched/cublas_gemmStridedBatched_example.cu", "model_response": [{"head": "CUDA_CHECK", "head_type": "__host__", "description": "Macro for checking CUDA API errors in a host function.", "relation": "calls", "tail": "cudaError_t", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Macro for checking cuBLAS API calls.", "relation": "calls", "tail": "cublasStatus_t", "tail_type": "CUDA_API"}, {"head": "make_cuFloatComplex", "head_type": "__device__", "description": "Creates a cuFloatComplex number from two single-precision floats.", "relation": "calls", "tail": "cuFloatComplex", "tail_type": "CUDA_CLASS"}, {"head": "make_cuDoubleComplex", "head_type": "__device__", "description": "Creates a double precision cuDoubleComplex number from two doubles.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cuCabsf", "head_type": "__device__", "description": "Calculates the absolute value of a cuFloatComplex number.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuCabs", "head_type": "__device__", "description": "Calculates the absolute value of a cuDoubleComplex number.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuCaddf", "head_type": "__device__", "description": "Adds two cuFloatComplex numbers.", "relation": "calls", "tail": "cuCrealf/cuCimagf", "tail_type": "CUDA_API"}, {"head": "cuCadd", "head_type": "__device__", "description": "Adds two cuDoubleComplex numbers.", "relation": "calls", "tail": "cuCreal/cuCimag", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Associates a CUDA stream with a cublasHandle.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cudaMemcpy", "head_type": "__device__", "description": "Copies data between host and device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Frees device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Creates a CUDA stream with specified flags.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Waits for a CUDA stream to complete.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuComplex", "head_type": "CUDA_CLASS", "description": "A CUDA class representing a complex number with single-precision floating-point real and imaginary components.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "__host__", "description": "Creates and initializes a cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetStream", "head_type": "CUDA_API", "description": "Associates a CUDA stream with a cuBLAS handle.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/trmm/cublas_trmm_example.cu", "model_response": [{"head": "cublasDtrmm", "head_type": "__host__", "description": "Perform triangular matrix multiplication using double precision.", "relation": "calls", "tail": "cublasCreate", "tail_type": "CUDA_API"}, {"head": "cublasDtrmm", "head_type": "__host__", "description": "Perform triangular matrix multiplication using double precision.", "relation": "calls", "tail": "cublasSetStream", "tail_type": "CUDA_API"}, {"head": "cublasDtrmm", "head_type": "__host__", "description": "Perform triangular matrix multiplication using double precision.", "relation": "calls", "tail": "cublasDestroy", "tail_type": "CUDA_API"}, {"head": "cublasDtrmm", "head_type": "__host__", "description": "Perform triangular matrix multiplication using double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copy data asynchronously from source to destination.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copy data asynchronously from source to destination.", "relation": "calls", "tail": "cudaMemcpy", "tail_type": "CUDA_API"}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copy data asynchronously from source to destination.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Create a stream with specified flags enabled.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamSynchronize", "head_type": "__host__", "description": "Wait until all tasks in the stream are completed.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFree", "head_type": "__host__", "description": "Free allocated device memory.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "cudaFree", "head_type": "__host__", "description": "Free allocated device memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroy the stream and release its resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Reset the device releasing all resources.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Get cudaDataType from string representation of type name.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/gemmGroupedBatched/cublas_gemmGroupedBatched_example.cu", "model_response": [{"head": "print_matrix", "head_type": "__host__", "description": "Prints a matrix given its dimensions and data.", "relation": "calls", "tail": "std::printf", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Checks cublas API calls for errors.", "relation": "calls", "tail": "std::printf", "tail_type": "CUDA_API"}, {"head": "CUBLAS_CHECK", "head_type": "__host__", "description": "Checks cublas API calls for errors.", "relation": "calls", "tail": "throw", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks CUDA runtime API calls for errors.", "relation": "calls", "tail": "std::printf", "tail_type": "CUDA_API"}, {"head": "CUDA_CHECK", "head_type": "__host__", "description": "Checks CUDA runtime API calls for errors.", "relation": "calls", "tail": "throw", "tail_type": "CUDA_API"}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType value for a given string containing the type name.", "relation": "calls", "tail": "CUDA_R_32F", "tail_type": "CUDA_CLASS"}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType value for a given string containing the type name.", "relation": "calls", "tail": "CUDA_C_32F", "tail_type": "CUDA_CLASS"}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType value for a given string containing the type name.", "relation": "calls", "tail": "CUDA_R_64F", "tail_type": "CUDA_CLASS"}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType value for a given string containing the type name.", "relation": "calls", "tail": "CUDA_C_64F", "tail_type": "CUDA_CLASS"}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType value for a given string containing the type name.", "relation": "calls", "tail": "throw", "tail_type": "CUDA_API"}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/herkx/cublas_herkx_example.cu", "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Function to create a new cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamCreateWithFlags", "head_type": "__host__", "description": "Create a new asynchronous CUDA stream without synchronization.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "__host__", "description": "Bind a CUDA stream to the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMalloc", "head_type": "__host__", "description": "Allocate memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copy data between host and device asynchronously.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZherkx", "head_type": "__host__", "description": "Perform a Hermitian rank-k operation for the double-precision complex data types.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMemcpyAsync", "head_type": "__host__", "description": "Copy data between device and host asynchronously.", "relation": "calls", "tail": "cudaStreamSynchronize", "tail_type": "CUDA_API"}, {"head": "cudaFree", "head_type": "__host__", "description": "Free memory on the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroy a previously created cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaStreamDestroy", "head_type": "__host__", "description": "Destroy a previously created CUDA stream.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaDeviceReset", "head_type": "__host__", "description": "Reset the device and clean up all resources.", "relation": "single", "tail": "", "tail_type": ""}]}
{"cu_path": "../CUDALibrarySamples/cuBLAS/Level-3/gemmBatched/cublas_gemmBatched_example.cu", "model_response": [{"head": "print_matrix", "head_type": "__host__", "description": "Prints a matrix in a formatted way.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_packed_matrix", "head_type": "__host__", "description": "Prints a packed matrix format.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "print_vector", "head_type": "__host__", "description": "Prints a vector in a formatted way.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "get_cuda_library_type", "head_type": "__host__", "description": "Returns cudaDataType value for the given type string.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "traits<cuFloatComplex>::abs", "head_type": "__host__", "description": "Computes the absolute value of a cuFloatComplex number.", "relation": "calls", "tail": "cuCabsf", "tail_type": "CUDA_API"}, {"head": "traits<cuFloatComplex>::add", "head_type": "__host__", "description": "Adds two cuFloatComplex numbers.", "relation": "calls", "tail": "cuCaddf", "tail_type": "CUDA_API"}, {"head": "traits<cuFloatComplex>::rand", "head_type": "__host__", "description": "Generates a random cuFloatComplex number.", "relation": "calls", "tail": "make_cuFloatComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuFloatComplex>::mul", "head_type": "__host__", "description": "Multiplies a cuFloatComplex number by a double scalar.", "relation": "calls", "tail": "make_cuFloatComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::abs", "head_type": "__host__", "description": "Computes the absolute value of a cuDoubleComplex number.", "relation": "calls", "tail": "cuCabs", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::add", "head_type": "__host__", "description": "Adds two cuDoubleComplex numbers.", "relation": "calls", "tail": "cuCadd", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::rand", "head_type": "__host__", "description": "Generates a random cuDoubleComplex number.", "relation": "calls", "tail": "make_cuDoubleComplex", "tail_type": "CUDA_API"}, {"head": "traits<cuDoubleComplex>::mul", "head_type": "__host__", "description": "Multiplies a cuDoubleComplex number by a double scalar.", "relation": "calls", "tail": "make_cuDoubleComplex", "tail_type": "CUDA_API"}]}
