{"pdf_page": [6, 12], "model_response": [{"head": "cublasSscal", "head_type": "__host__", "description": "Scales a vector by a constant using cuBLAS.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCreate", "head_type": "__host__", "description": "Initializes the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetMatrix", "head_type": "__host__", "description": "Copies a matrix from host memory to device memory using cuBLAS.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasGetMatrix", "head_type": "__host__", "description": "Copies a matrix from device memory to host memory using cuBLAS.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Destroys the cuBLAS library context.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [14, 18], "model_response": [{"head": "cublasCreate", "head_type": "CUDA_API", "description": "Initializes a handle to the cuBLAS library context.", "relation": "calls", "tail": "cudaSetDevice", "tail_type": "CUDA_API"}, {"head": "cublasCreate", "head_type": "CUDA_API", "description": "Initializes a handle to the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "CUDA_API", "description": "Releases resources associated with the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetWorkspace", "head_type": "CUDA_API", "description": "Provides a separate workspace for each stream to allow deterministic behavior.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetStream", "head_type": "CUDA_API", "description": "Sets the stream to be used by cuBLAS routines.", "relation": "calls", "tail": "cudaStreamCreate", "tail_type": "CUDA_API"}, {"head": "cublasSetStream", "head_type": "CUDA_API", "description": "Sets the stream to be used by cuBLAS routines.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFuncSetCacheConfig", "head_type": "CUDA_API", "description": "Sets the cache configuration specifically for some functions.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [18, 21], "model_response": [{"head": "cublasSetMathMode", "head_type": "CUDA_API", "description": "Sets the math mode used by cuBLAS library functions.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaMallocAsync", "head_type": "CUDA_API", "description": "Allocates memory asynchronously on the GPU.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cudaFreeAsync", "head_type": "CUDA_API", "description": "Frees memory asynchronously on the GPU.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCreate", "head_type": "CUDA_API", "description": "Initializes the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDestroy", "head_type": "CUDA_API", "description": "Destroys the cuBLAS library context.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [24, 27], "model_response": [{"head": "cublasSetMathMode", "head_type": "__host__", "description": "Sets the math mode for the cublas handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGemmEx", "head_type": "__host__", "description": "Performs a matrix-matrix multiplication with extended functionality.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtMatmul", "head_type": "__host__", "description": "Performs a matrix multiplication using cuBLASLt API.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetEmulationStrategy", "head_type": "__host__", "description": "Sets the floating point emulation strategy for the cublas handle.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [27, 30], "model_response": [{"head": "cublasCreate", "head_type": "__host__", "description": "Initializes the cuBLAS library and creates a handle to the cuBLAS library context.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "cublasDestroy", "head_type": "__host__", "description": "Releases hardware resources used by the cuBLAS library.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "cublasGetVersion", "head_type": "__host__", "description": "Returns the version number of the cuBLAS library.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetProperty", "head_type": "__host__", "description": "Returns the value of the requested property using libraryPropertyType.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetStatusName", "head_type": "__host__", "description": "Returns the string representation of a given status.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [30, 34], "model_response": [{"head": "cublasSetStream", "head_type": "__host__", "description": "This function sets the cuBLAS library stream for subsequent cuBLAS calls.", "relation": "calls", "tail": "cublasSetWorkspace", "tail_type": "CUDA_API"}, {"head": "cublasSetWorkspace", "head_type": "__host__", "description": "This function sets the cuBLAS library workspace to a user-owned device buffer.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetStream", "head_type": "__host__", "description": "This function retrieves the cuBLAS stream being used.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetPointerMode", "head_type": "__host__", "description": "This function obtains the pointer mode used by the cuBLAS library.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetPointerMode", "head_type": "__host__", "description": "This function sets the pointer mode used by the cuBLAS library.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetVector", "head_type": "__host__", "description": "This function copies elements from a host memory vector to a GPU memory vector.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetVector", "head_type": "__host__", "description": "This function copies elements from a GPU memory vector to a host memory vector.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetMatrix", "head_type": "__host__", "description": "This function copies a tile from a host matrix to a GPU matrix.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetMatrix", "head_type": "__host__", "description": "This function copies a tile from a GPU matrix to a host matrix.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [34, 38], "model_response": [{"head": "cublasSetVectorAsync", "head_type": "__host__", "description": "This function sets a vector asynchronously using the given CUDA stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasGetVectorAsync", "head_type": "__host__", "description": "This function gets a vector asynchronously using the given CUDA stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetMatrixAsync", "head_type": "__host__", "description": "This function sets a matrix asynchronously using the given CUDA stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasGetMatrixAsync", "head_type": "__host__", "description": "This function gets a matrix asynchronously using the given CUDA stream.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSetSmCountTarget", "head_type": "__host__", "description": "The function allows overriding the number of multiprocessors available to the library during kernels execution.", "relation": "calls", "tail": "cudaDeviceGetAttribute", "tail_type": "CUDA_API"}, {"head": "cublasSetAtomicsMode", "head_type": "__host__", "description": "This function allows or disallows the usage of atomics in the cuBLAS library for all routines which have an alternate implementation.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetAtomicsMode", "head_type": "__host__", "description": "This function queries the atomic mode of a specific cuBLAS context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetMathMode", "head_type": "__host__", "description": "The function enables you to choose the compute precision modes as defined by cublasMath_t.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetMathMode", "head_type": "__host__", "description": "This function returns the math mode used by the library routines.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetSmCountTarget", "head_type": "__host__", "description": "This function obtains the value previously programmed to the library handle.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetEmulationStrategy", "head_type": "__host__", "description": "This function enables you to select how the library should make use of floating point emulation.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetEmulationStrategy", "head_type": "__host__", "description": "This function obtains the value previously programmed to the library handle.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [38, 40], "model_response": [{"head": "cublasLoggerConfigure", "head_type": "__host__", "description": "This function configures logging during runtime", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetLoggerCallback", "head_type": "__host__", "description": "This function retrieves function pointer to previously installed custom user-defined callback function", "relation": "calls", "tail": "cublasSetLoggerCallback", "tail_type": "CUDA_API"}, {"head": "cublasSetLoggerCallback", "head_type": "__host__", "description": "This function installs a custom user-defined callback function via cublas C public API", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [40, 44], "model_response": [{"head": "cublasIsamax", "head_type": "CUDA_API", "description": "Finds the index of the element with the maximum magnitude in a float vector.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasIdamax", "head_type": "CUDA_API", "description": "Finds the index of the element with the maximum magnitude in a double vector.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasIcamax", "head_type": "CUDA_API", "description": "Finds the index of the element with the maximum magnitude in a complex vector using single precision.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasIzamax", "head_type": "CUDA_API", "description": "Finds the index of the element with the maximum magnitude in a complex vector using double precision.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasIsamin", "head_type": "CUDA_API", "description": "Finds the index of the element with the minimum magnitude in a float vector.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasIdamin", "head_type": "CUDA_API", "description": "Finds the index of the element with the minimum magnitude in a double vector.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasIcamin", "head_type": "CUDA_API", "description": "Finds the index of the element with the minimum magnitude in a complex vector using single precision.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasIzamin", "head_type": "CUDA_API", "description": "Finds the index of the element with the minimum magnitude in a complex vector using double precision.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasSasum", "head_type": "CUDA_API", "description": "Computes the sum of the absolute values of elements in a float vector.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasDasum", "head_type": "CUDA_API", "description": "Computes the sum of the absolute values of elements in a double vector.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasScasum", "head_type": "CUDA_API", "description": "Computes the sum of the absolute values of elements in a complex vector using single precision.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasDzasum", "head_type": "CUDA_API", "description": "Computes the sum of the absolute values of elements in a complex vector using double precision.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasSaxpy", "head_type": "CUDA_API", "description": "Performs saxpy operation, multiplying vector x by scalar alpha and adding to vector y for float data.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasDaxpy", "head_type": "CUDA_API", "description": "Performs daxpy operation, multiplying vector x by scalar alpha and adding to vector y for double data.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasCaxpy", "head_type": "CUDA_API", "description": "Performs caxpy operation, multiplying vector x by scalar alpha and adding to vector y for single precision complex data.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasZaxpy", "head_type": "CUDA_API", "description": "Performs zaxpy operation, multiplying vector x by scalar alpha and adding to vector y for double precision complex data.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasScopy", "head_type": "CUDA_API", "description": "Copies elements from vector x to vector y for float data.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasDcopy", "head_type": "CUDA_API", "description": "Copies elements from vector x to vector y for double data.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasCcopy", "head_type": "CUDA_API", "description": "Copies elements from vector x to vector y for single precision complex data.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasZcopy", "head_type": "CUDA_API", "description": "Copies elements from vector x to vector y for double precision complex data.", "relation": "calls", "tail": "cuDoubleComplex", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [44, 47], "model_response": [{"head": "cublasSdot", "head_type": "CUDA_API", "description": "This function computes the dot product of vectors x and y using single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDdot", "head_type": "CUDA_API", "description": "This function computes the dot product of vectors x and y using double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCdotu", "head_type": "CUDA_API", "description": "This function computes the dot product of complex vectors x and y using complex single precision, without conjugating x.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCdotc", "head_type": "CUDA_API", "description": "This function computes the dot product of complex vectors x and y using complex single precision, conjugating x.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZdotu", "head_type": "CUDA_API", "description": "This function computes the dot product of complex vectors x and y using complex double precision, without conjugating x.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZdotc", "head_type": "CUDA_API", "description": "This function computes the dot product of complex vectors x and y using complex double precision, conjugating x.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSnrm2", "head_type": "CUDA_API", "description": "This function computes the Euclidean norm of vector x using single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDnrm2", "head_type": "CUDA_API", "description": "This function computes the Euclidean norm of vector x using double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasScnrm2", "head_type": "CUDA_API", "description": "This function computes the Euclidean norm of complex vector x using single precision, returns a float result.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDznrm2", "head_type": "CUDA_API", "description": "This function computes the Euclidean norm of complex vector x using double precision, returns a double result.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSrot", "head_type": "CUDA_API", "description": "This function applies a Givens rotation to vectors x and y using single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDrot", "head_type": "CUDA_API", "description": "This function applies a Givens rotation to vectors x and y using double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCrot", "head_type": "CUDA_API", "description": "This function applies a Givens rotation to complex vectors x and y using complex single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCsrot", "head_type": "CUDA_API", "description": "This function applies a Givens rotation to complex vectors x and y using complex single precision but takes real components as rotation angles.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZrot", "head_type": "CUDA_API", "description": "This function applies a Givens rotation to complex vectors x and y using complex double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZdrot", "head_type": "CUDA_API", "description": "This function applies a Givens rotation to complex vectors x and y using complex double precision but takes real components as rotation angles.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [47, 50], "model_response": [{"head": "cublasSrotg", "head_type": "CUDA_API", "description": "This function constructs the Givens rotation matrix for single precision real numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDrotg", "head_type": "CUDA_API", "description": "This function constructs the Givens rotation matrix for double precision real numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCrotg", "head_type": "CUDA_API", "description": "This function constructs the Givens rotation matrix for single precision complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZrotg", "head_type": "CUDA_API", "description": "This function constructs the Givens rotation matrix for double precision complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSrotm", "head_type": "CUDA_API", "description": "This function applies the modified Givens transformation for single precision real numbers to vectors.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDrotm", "head_type": "CUDA_API", "description": "This function applies the modified Givens transformation for double precision real numbers to vectors.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSrotmg", "head_type": "CUDA_API", "description": "It constructs the modified Givens transformation for single precision real numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDrotmg", "head_type": "CUDA_API", "description": "This function constructs the modified Givens transformation for double precision real numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [50, 54], "model_response": [{"head": "cublas<t>scal()", "head_type": "CUDA_API", "description": "This function scales the vector x by the scalar \u03b1 and overwrites it with the result.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublas<t>swap()", "head_type": "CUDA_API", "description": "This function interchanges the elements of vector x and y.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublas<t>gbmv()", "head_type": "CUDA_API", "description": "This function performs the banded matrix-vector multiplication.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [54, 59], "model_response": [{"head": "cublasSgemv", "head_type": "__host__", "description": "This function performs the matrix-vector multiplication y=\u03b1op(A)x+\u03b2y for single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDgemv", "head_type": "__host__", "description": "This function performs the matrix-vector multiplication y=\u03b1op(A)x+\u03b2y for double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCgemv", "head_type": "__host__", "description": "This function performs the matrix-vector multiplication y=\u03b1op(A)x+\u03b2y for complex single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZgemv", "head_type": "__host__", "description": "This function performs the matrix-vector multiplication y=\u03b1op(A)x+\u03b2y for complex double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSger", "head_type": "__host__", "description": "This function performs the rank-1 update for single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDger", "head_type": "__host__", "description": "This function performs the rank-1 update for double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCgeru", "head_type": "__host__", "description": "This function performs the unconjugated rank-1 update for complex single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCgerc", "head_type": "__host__", "description": "This function performs the conjugated rank-1 update for complex single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZgeru", "head_type": "__host__", "description": "This function performs the unconjugated rank-1 update for complex double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZgerc", "head_type": "__host__", "description": "This function performs the conjugated rank-1 update for complex double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSsbmv", "head_type": "__host__", "description": "This function performs the symmetric banded matrix-vector multiplication for single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDsbmv", "head_type": "__host__", "description": "This function performs the symmetric banded matrix-vector multiplication for double precision.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [59, 63], "model_response": [{"head": "cublasSspmv", "head_type": "__global__", "description": "Performs symmetric packed matrix-vector multiplication.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_API"}, {"head": "cublasDspmv", "head_type": "__global__", "description": "Performs symmetric packed matrix-vector multiplication.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_API"}, {"head": "cublasSspr", "head_type": "__global__", "description": "Performs packed symmetric rank-1 update.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_API"}, {"head": "cublasDspr", "head_type": "__global__", "description": "Performs packed symmetric rank-1 update.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_API"}, {"head": "cublasSspr2", "head_type": "__global__", "description": "Performs packed symmetric rank-2 update.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_API"}, {"head": "cublasDspr2", "head_type": "__global__", "description": "Performs packed symmetric rank-2 update.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_API"}]}
{"pdf_page": [63, 66], "model_response": [{"head": "cublasSsymv", "head_type": "__host__", "description": "Performs the symmetric matrix-vector multiplication with single-precision.", "relation": "calls", "tail": "cublasSetAtomicsMode", "tail_type": "CUDA_API"}, {"head": "cublasDsymv", "head_type": "__host__", "description": "Performs the symmetric matrix-vector multiplication with double-precision.", "relation": "calls", "tail": "cublasSetAtomicsMode", "tail_type": "CUDA_API"}, {"head": "cublasCsymv", "head_type": "__host__", "description": "Performs the symmetric matrix-vector multiplication with cuComplex precision.", "relation": "calls", "tail": "cublasSetAtomicsMode", "tail_type": "CUDA_API"}, {"head": "cublasZsymv", "head_type": "__host__", "description": "Performs the symmetric matrix-vector multiplication with cuDoubleComplex precision.", "relation": "calls", "tail": "cublasSetAtomicsMode", "tail_type": "CUDA_API"}, {"head": "cublasSsyr", "head_type": "__host__", "description": "Performs the symmetric rank-1 update with single-precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDsyr", "head_type": "__host__", "description": "Performs the symmetric rank-1 update with double-precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCsyr", "head_type": "__host__", "description": "Performs the symmetric rank-1 update with cuComplex precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZsyr", "head_type": "__host__", "description": "Performs the symmetric rank-1 update with cuDoubleComplex precision.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [66, 71], "model_response": [{"head": "cublas<t>syr2", "head_type": "__global__", "description": "Performs the symmetric rank-2 update on matrix A with vectors x and y, and scalar alpha.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublas<t>tbmv", "head_type": "__global__", "description": "Performs the triangular banded matrix-vector multiplication.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublas<t>tbsv", "head_type": "__global__", "description": "Solves the triangular banded linear system with a single right-hand-side.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [71, 76], "model_response": [{"head": "cublasStpmv", "head_type": "__host__", "description": "Performs a triangular packed matrix-vector multiplication for single precision real numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDtpmv", "head_type": "__host__", "description": "Performs a triangular packed matrix-vector multiplication for double precision real numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCtpmv", "head_type": "__host__", "description": "Performs a triangular packed matrix-vector multiplication for single precision complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZtpmv", "head_type": "__host__", "description": "Performs a triangular packed matrix-vector multiplication for double precision complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasStpsv", "head_type": "__host__", "description": "Solves the packed triangular linear system for single precision real numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDtpsv", "head_type": "__host__", "description": "Solves the packed triangular linear system for double precision real numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCtpsv", "head_type": "__host__", "description": "Solves the packed triangular linear system for single precision complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZtpsv", "head_type": "__host__", "description": "Solves the packed triangular linear system for double precision complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasStrmv", "head_type": "__host__", "description": "Performs a triangular matrix-vector multiplication for single precision real numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDtrmv", "head_type": "__host__", "description": "Performs a triangular matrix-vector multiplication for double precision real numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCtrmv", "head_type": "__host__", "description": "Performs a triangular matrix-vector multiplication for single precision complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZtrmv", "head_type": "__host__", "description": "Performs a triangular matrix-vector multiplication for double precision complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [76, 81], "model_response": [{"head": "cublasStrsv", "head_type": "CUDA_API", "description": "This function solves the triangular linear system with a single right-hand-side using single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDtrsv", "head_type": "CUDA_API", "description": "This function solves the triangular linear system with a single right-hand-side using double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCtrsv", "head_type": "CUDA_API", "description": "This function solves the triangular linear system with a single right-hand-side using single precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZtrsv", "head_type": "CUDA_API", "description": "This function solves the triangular linear system with a single right-hand-side using double precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasChemv", "head_type": "CUDA_API", "description": "This function performs the Hermitian matrix-vector multiplication with single precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZhemv", "head_type": "CUDA_API", "description": "This function performs the Hermitian matrix-vector multiplication with double precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasChbmv", "head_type": "CUDA_API", "description": "This function performs Hermitian banded matrix-vector multiplication with single precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZhbmv", "head_type": "CUDA_API", "description": "This function performs Hermitian banded matrix-vector multiplication with double precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasChpmv", "head_type": "CUDA_API", "description": "This function performs Hermitian packed matrix-vector multiplication with single precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZhpmv", "head_type": "CUDA_API", "description": "This function performs Hermitian packed matrix-vector multiplication with double precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [81, 87], "model_response": [{"head": "cublasCher", "head_type": "__host__", "description": "This function performs the Hermitian rank-1 update on a matrix using a scalar and a vector.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZher", "head_type": "__host__", "description": "This function performs the Hermitian rank-1 update on a matrix using a double precision scalar and a complex vector.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCher2", "head_type": "__host__", "description": "This function performs the Hermitian rank-2 update on a matrix using a scalar and two vectors.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZher2", "head_type": "__host__", "description": "This function performs the Hermitian rank-2 update on a matrix using a double precision scalar and two complex vectors.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasChpr", "head_type": "__host__", "description": "This function performs the packed Hermitian rank-1 update on a matrix using a scalar and a vector.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZhpr", "head_type": "__host__", "description": "This function performs the packed Hermitian rank-1 update on a matrix using a double precision scalar and a complex vector.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasChpr2", "head_type": "__host__", "description": "This function performs the packed Hermitian rank-2 update on a matrix using a scalar and two vectors.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZhpr2", "head_type": "__host__", "description": "This function performs the packed Hermitian rank-2 update on a matrix using a double precision scalar and two complex vectors.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [87, 90], "model_response": [{"head": "cublasSgemvBatched", "head_type": "CUDA_API", "description": "Performs the matrix-vector multiplication of a batch of matrices and vectors with single precision.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDgemvBatched", "head_type": "CUDA_API", "description": "Performs the matrix-vector multiplication of a batch of matrices and vectors with double precision.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCgemvBatched", "head_type": "CUDA_API", "description": "Performs the matrix-vector multiplication of a batch of matrices and vectors with cuComplex precision.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZgemvBatched", "head_type": "CUDA_API", "description": "Performs the matrix-vector multiplication of a batch of matrices and vectors with cuDoubleComplex precision.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasHSHgemvBatched", "head_type": "CUDA_API", "description": "Performs the matrix-vector multiplication for half precision matrices and vectors.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasHSSgemvBatched", "head_type": "CUDA_API", "description": "Performs the matrix-vector multiplication of a batch of half precision matrices and single precision vectors.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasTSTgemvBatched", "head_type": "CUDA_API", "description": "Performs the matrix-vector multiplication using nv_bfloat16 precision for matrices and vectors.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasTSSgemvBatched", "head_type": "CUDA_API", "description": "Performs the matrix-vector multiplication using nv_bfloat16 precision for matrices and single precision for vectors.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [90, 93], "model_response": [{"head": "cublasSgemvStridedBatched", "head_type": "__host__", "description": "This function performs batched matrix-vector multiplication for single-precision data.", "relation": "calls", "tail": "cublas<t>gemv", "tail_type": "CUDA_API"}, {"head": "cublasDgemvStridedBatched", "head_type": "__host__", "description": "This function performs batched matrix-vector multiplication for double-precision data.", "relation": "calls", "tail": "cublas<t>gemv", "tail_type": "CUDA_API"}, {"head": "cublasCgemvStridedBatched", "head_type": "__host__", "description": "This function performs batched matrix-vector multiplication for complex single-precision data.", "relation": "calls", "tail": "cublas<t>gemv", "tail_type": "CUDA_API"}, {"head": "cublasZgemvStridedBatched", "head_type": "__host__", "description": "This function performs batched matrix-vector multiplication for complex double-precision data.", "relation": "calls", "tail": "cublas<t>gemv", "tail_type": "CUDA_API"}, {"head": "cublasHSHgemvStridedBatched", "head_type": "__host__", "description": "This function performs batched matrix-vector multiplication for half-single precision.", "relation": "calls", "tail": "cublas<t>gemv", "tail_type": "CUDA_API"}, {"head": "cublasHSSgemvStridedBatched", "head_type": "__host__", "description": "This function performs batched matrix-vector multiplication for half-single precision.", "relation": "calls", "tail": "cublas<t>gemv", "tail_type": "CUDA_API"}, {"head": "cublasTSTgemvStridedBatched", "head_type": "__host__", "description": "This function performs batched matrix-vector multiplication using nv_bfloat16 precision.", "relation": "calls", "tail": "cublas<t>gemv", "tail_type": "CUDA_API"}, {"head": "cublasTSSgemvStridedBatched", "head_type": "__host__", "description": "This function performs batched matrix-vector multiplication using nv_bfloat16 precision.", "relation": "calls", "tail": "cublas<t>gemv", "tail_type": "CUDA_API"}]}
{"pdf_page": [94, 98], "model_response": [{"head": "cublasSgemm", "head_type": "__global__", "description": "This function performs single precision matrix-matrix multiplication.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDgemm", "head_type": "__global__", "description": "This function performs double precision matrix-matrix multiplication.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCgemm", "head_type": "__global__", "description": "This function performs complex single precision matrix-matrix multiplication.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZgemm", "head_type": "__global__", "description": "This function performs complex double precision matrix-matrix multiplication.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasHgemm", "head_type": "__global__", "description": "This function performs half precision matrix-matrix multiplication.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCgemm3m", "head_type": "__global__", "description": "This function performs complex single precision matrix-matrix multiplication using Gauss complexity reduction.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZgemm3m", "head_type": "__global__", "description": "This function performs complex double precision matrix-matrix multiplication using Gauss complexity reduction.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [98, 104], "model_response": [{"head": "cublasHgemmBatched", "head_type": "__host__", "description": "Performs matrix-matrix multiplication on a batch of matrices using half precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSgemmBatched", "head_type": "__host__", "description": "Performs matrix-matrix multiplication on a batch of matrices using single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDgemmBatched", "head_type": "__host__", "description": "Performs matrix-matrix multiplication on a batch of matrices using double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCgemmBatched", "head_type": "__host__", "description": "Performs matrix-matrix multiplication on a batch of matrices using complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZgemmBatched", "head_type": "__host__", "description": "Performs matrix-matrix multiplication on a batch of matrices using double complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasHgemmStridedBatched", "head_type": "__host__", "description": "Performs strided matrix-matrix multiplication on a batch of matrices using half precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSgemmStridedBatched", "head_type": "__host__", "description": "Performs strided matrix-matrix multiplication on a batch of matrices using single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDgemmStridedBatched", "head_type": "__host__", "description": "Performs strided matrix-matrix multiplication on a batch of matrices using double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCgemmStridedBatched", "head_type": "__host__", "description": "Performs strided matrix-matrix multiplication on a batch of matrices using complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZgemmStridedBatched", "head_type": "__host__", "description": "Performs strided matrix-matrix multiplication on a batch of matrices using double complex numbers.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [104, 110], "model_response": [{"head": "cublasSgemmGroupedBatched", "head_type": "__host__", "description": "This function performs matrix-matrix multiplication on groups of matrices with uniform properties within each group.", "relation": "calls", "tail": "gemm", "tail_type": "CUDA_API"}, {"head": "cublasHgemmStridedBatched", "head_type": "__host__", "description": "This function performs batched matrix-matrix multiplication with a stride between each matrix in the batch.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSsymm", "head_type": "__host__", "description": "This function performs symmetric matrix-matrix multiplication, where A is a symmetric matrix.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [110, 113], "model_response": [{"head": "cublasSsyrk", "head_type": "__host__", "description": "This function performs the symmetric rank-k update on single precision data.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDsyrk", "head_type": "__host__", "description": "This function performs the symmetric rank-k update on double precision data.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCsyrk", "head_type": "__host__", "description": "This function performs the symmetric rank-k update on complex single precision data.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZsyrk", "head_type": "__host__", "description": "This function performs the symmetric rank-k update on complex double precision data.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSsyr2k", "head_type": "__host__", "description": "This function performs the symmetric rank-2k update on single precision data.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDsyr2k", "head_type": "__host__", "description": "This function performs the symmetric rank-2k update on double precision data.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCsyr2k", "head_type": "__host__", "description": "This function performs the symmetric rank-2k update on complex single precision data.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZsyr2k", "head_type": "__host__", "description": "This function performs the symmetric rank-2k update on complex double precision data.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [112, 116], "model_response": [{"head": "cublasSsyr2k", "head_type": "__host__", "description": "This function performs the symmetric rank-2k update for single-precision float matrices.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDsyr2k", "head_type": "__host__", "description": "This function performs the symmetric rank-2k update for double-precision float matrices.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCsyr2k", "head_type": "__host__", "description": "This function performs the symmetric rank-2k update for single-precision complex matrices.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZsyr2k", "head_type": "__host__", "description": "This function performs the symmetric rank-2k update for double-precision complex matrices.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSsyrkx", "head_type": "__host__", "description": "This function performs a variation of the symmetric rank-k update for single-precision float matrices.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDsyrkx", "head_type": "__host__", "description": "This function performs a variation of the symmetric rank-k update for double-precision float matrices.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCsyrkx", "head_type": "__host__", "description": "This function performs a variation of the symmetric rank-k update for single-precision complex matrices.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZsyrkx", "head_type": "__host__", "description": "This function performs a variation of the symmetric rank-k update for double-precision complex matrices.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [116, 120], "model_response": [{"head": "cublasStrmm", "head_type": "CUDA_API", "description": "This function performs the triangular matrix-matrix multiplication for single precision data types.", "relation": "calls", "tail": "cuBLAS library context", "tail_type": "CUDA_CLASS"}, {"head": "cublasDtrmm", "head_type": "CUDA_API", "description": "This function performs the triangular matrix-matrix multiplication for double precision data types.", "relation": "calls", "tail": "cuBLAS library context", "tail_type": "CUDA_CLASS"}, {"head": "cublasCtrmm", "head_type": "CUDA_API", "description": "This function performs the triangular matrix-matrix multiplication for cuComplex data types.", "relation": "calls", "tail": "cuBLAS library context", "tail_type": "CUDA_CLASS"}, {"head": "cublasZtrmm", "head_type": "CUDA_API", "description": "This function performs the triangular matrix-matrix multiplication for cuDoubleComplex data types.", "relation": "calls", "tail": "cuBLAS library context", "tail_type": "CUDA_CLASS"}, {"head": "cublasStrsm", "head_type": "CUDA_API", "description": "This function solves the triangular system with multiple right-hand sides for single precision data types.", "relation": "calls", "tail": "cuBLAS library context", "tail_type": "CUDA_CLASS"}, {"head": "cublasDtrsm", "head_type": "CUDA_API", "description": "This function solves the triangular system with multiple right-hand sides for double precision data types.", "relation": "calls", "tail": "cuBLAS library context", "tail_type": "CUDA_CLASS"}, {"head": "cublasCtrsm", "head_type": "CUDA_API", "description": "This function solves the triangular system with multiple right-hand sides for cuComplex data types.", "relation": "calls", "tail": "cuBLAS library context", "tail_type": "CUDA_CLASS"}, {"head": "cublasZtrsm", "head_type": "CUDA_API", "description": "This function solves the triangular system with multiple right-hand sides for cuDoubleComplex data types.", "relation": "calls", "tail": "cuBLAS library context", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [120, 124], "model_response": [{"head": "cublasStrsmBatched", "head_type": "CUDA_API", "description": "This function solves an array of triangular linear systems with multiple right-hand-sides using single precision.", "relation": "calls", "tail": "cublas<t>trsm", "tail_type": "CUDA_API"}, {"head": "cublasDtrsmBatched", "head_type": "CUDA_API", "description": "This function solves an array of triangular linear systems with multiple right-hand-sides using double precision.", "relation": "calls", "tail": "cublas<t>trsm", "tail_type": "CUDA_API"}, {"head": "cublasCtrsmBatched", "head_type": "CUDA_API", "description": "This function solves an array of triangular linear systems with multiple right-hand-sides using single precision complex numbers.", "relation": "calls", "tail": "cublas<t>trsm", "tail_type": "CUDA_API"}, {"head": "cublasZtrsmBatched", "head_type": "CUDA_API", "description": "This function solves an array of triangular linear systems with multiple right-hand-sides using double precision complex numbers.", "relation": "calls", "tail": "cublas<t>trsm", "tail_type": "CUDA_API"}, {"head": "cublasChemm", "head_type": "CUDA_API", "description": "This function performs Hermitian matrix-matrix multiplication using single precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZhemm", "head_type": "CUDA_API", "description": "This function performs Hermitian matrix-matrix multiplication using double precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [124, 128], "model_response": [{"head": "cublasCherk", "head_type": "CUDA_API", "description": "Performs the Hermitian rank-k update for a complex matrix.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZherk", "head_type": "CUDA_API", "description": "Performs the Hermitian rank-k update for a double precision complex matrix.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCher2k", "head_type": "CUDA_API", "description": "Performs the Hermitian rank-2k update for complex matrices.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZher2k", "head_type": "CUDA_API", "description": "Performs the Hermitian rank-2k update for double precision complex matrices.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [128, 130], "model_response": [{"head": "cublasCherkx", "head_type": "CUDA_API", "description": "This function performs a variation of the Hermitian rank-k update operation.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCherkx", "head_type": "CUDA_API", "description": "This function performs a variation of the Hermitian rank-k update operation.", "relation": "calls", "tail": "cublasFillMode_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCherkx", "head_type": "CUDA_API", "description": "This function performs a variation of the Hermitian rank-k update operation.", "relation": "calls", "tail": "cublasOperation_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZherkx", "head_type": "CUDA_API", "description": "This function performs a variation of the Hermitian rank-k update operation using double complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZherkx", "head_type": "CUDA_API", "description": "This function performs a variation of the Hermitian rank-k update operation using double complex numbers.", "relation": "calls", "tail": "cublasFillMode_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZherkx", "head_type": "CUDA_API", "description": "This function performs a variation of the Hermitian rank-k update operation using double complex numbers.", "relation": "calls", "tail": "cublasOperation_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [130, 134], "model_response": [{"head": "cublasSgeam", "head_type": "__host__", "description": "Performs matrix-matrix addition/transposition with single-precision floating-point.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSgeam", "head_type": "__host__", "description": "Performs matrix-matrix addition/transposition with single-precision floating-point.", "relation": "calls", "tail": "cublasOperation_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSgeam", "head_type": "__host__", "description": "Performs matrix-matrix addition/transposition with single-precision floating-point.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDgeam", "head_type": "__host__", "description": "Performs matrix-matrix addition/transposition with double-precision floating-point.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDgeam", "head_type": "__host__", "description": "Performs matrix-matrix addition/transposition with double-precision floating-point.", "relation": "calls", "tail": "cublasOperation_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDgeam", "head_type": "__host__", "description": "Performs matrix-matrix addition/transposition with double-precision floating-point.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCgeam", "head_type": "__host__", "description": "Performs matrix-matrix addition/transposition with single-precision complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCgeam", "head_type": "__host__", "description": "Performs matrix-matrix addition/transposition with single-precision complex numbers.", "relation": "calls", "tail": "cublasOperation_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCgeam", "head_type": "__host__", "description": "Performs matrix-matrix addition/transposition with single-precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZgeam", "head_type": "__host__", "description": "Performs matrix-matrix addition/transposition with double-precision complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZgeam", "head_type": "__host__", "description": "Performs matrix-matrix addition/transposition with double-precision complex numbers.", "relation": "calls", "tail": "cublasOperation_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZgeam", "head_type": "__host__", "description": "Performs matrix-matrix addition/transposition with double-precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSdgmm", "head_type": "__host__", "description": "Performs matrix general elementwise multiplication with single-precision floating-point.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSdgmm", "head_type": "__host__", "description": "Performs matrix general elementwise multiplication with single-precision floating-point.", "relation": "calls", "tail": "cublasSideMode_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasSdgmm", "head_type": "__host__", "description": "Performs matrix general elementwise multiplication with single-precision floating-point.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDdgmm", "head_type": "__host__", "description": "Performs matrix general elementwise multiplication with double-precision floating-point.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDdgmm", "head_type": "__host__", "description": "Performs matrix general elementwise multiplication with double-precision floating-point.", "relation": "calls", "tail": "cublasSideMode_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDdgmm", "head_type": "__host__", "description": "Performs matrix general elementwise multiplication with double-precision floating-point.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCdgmm", "head_type": "__host__", "description": "Performs matrix general elementwise multiplication with single-precision complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCdgmm", "head_type": "__host__", "description": "Performs matrix general elementwise multiplication with single-precision complex numbers.", "relation": "calls", "tail": "cublasSideMode_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCdgmm", "head_type": "__host__", "description": "Performs matrix general elementwise multiplication with single-precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZdgmm", "head_type": "__host__", "description": "Performs matrix general elementwise multiplication with double-precision complex numbers.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZdgmm", "head_type": "__host__", "description": "Performs matrix general elementwise multiplication with double-precision complex numbers.", "relation": "calls", "tail": "cublasSideMode_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasZdgmm", "head_type": "__host__", "description": "Performs matrix general elementwise multiplication with double-precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [134, 139], "model_response": [{"head": "cublas<t>getrfBatched", "head_type": "__host__", "description": "Performs LU factorization of matrices in batches with optional pivoting.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublas<t>getrsBatched", "head_type": "__host__", "description": "Solves systems of linear equations using previously LU factorized matrices in batches.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [139, 144], "model_response": [{"head": "cublas<t>getriBatched", "head_type": "CUDA_API", "description": "Performs the inversion of matrices A[i] for i = 0, \u2026, batchSize-1", "relation": "calls", "tail": "cublas<t>getrfBatched", "tail_type": "CUDA_API"}, {"head": "cublas<t>matinvBatched", "head_type": "CUDA_API", "description": "Performs the inversion of matrices A[i] for i = 0, \u2026, batchSize-1", "relation": "calls", "tail": "cublas<t>getrfBatched", "tail_type": "CUDA_API"}, {"head": "cublas<t>matinvBatched", "head_type": "CUDA_API", "description": "Performs the inversion of matrices A[i] for i = 0, \u2026, batchSize-1", "relation": "calls", "tail": "cublas<t>getriBatched", "tail_type": "CUDA_API"}, {"head": "cublas<t>geqrfBatched", "head_type": "CUDA_API", "description": "Performs the QR factorization of each Aarray[i] for i = 0, ..., batchSize-1 using Householder reflections", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [144, 147], "model_response": [{"head": "cublasSgelsBatched", "head_type": "CUDA_API", "description": "This function finds the least squares solution of a batch of overdetermined systems for single precision real data.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDgelsBatched", "head_type": "CUDA_API", "description": "This function finds the least squares solution of a batch of overdetermined systems for double precision real data.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCgelsBatched", "head_type": "CUDA_API", "description": "This function finds the least squares solution of a batch of overdetermined systems for single precision complex data.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZgelsBatched", "head_type": "CUDA_API", "description": "This function finds the least squares solution of a batch of overdetermined systems for double precision complex data.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [147, 151], "model_response": [{"head": "cublasStpttr", "head_type": "__host__", "description": "Performs the conversion from triangular packed format to triangular format for single precision floating-point numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDtpttr", "head_type": "__host__", "description": "Performs the conversion from triangular packed format to triangular format for double precision floating-point numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCtpttr", "head_type": "__host__", "description": "Performs the conversion from triangular packed format to triangular format for single precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZtpttr", "head_type": "__host__", "description": "Performs the conversion from triangular packed format to triangular format for double precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasStrttp", "head_type": "__host__", "description": "Performs the conversion from triangular format to triangular packed format for single precision floating-point numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasDtrttp", "head_type": "__host__", "description": "Performs the conversion from triangular format to triangular packed format for double precision floating-point numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasCtrttp", "head_type": "__host__", "description": "Performs the conversion from triangular format to triangular packed format for single precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasZtrttp", "head_type": "__host__", "description": "Performs the conversion from triangular format to triangular packed format for double precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSgemmEx", "head_type": "__host__", "description": "Extended matrix multiplication function for single precision floating-point numbers with lower precision support.", "relation": "calls", "tail": "cublasSgemm", "tail_type": "CUDA_API"}, {"head": "cublasCgemmEx", "head_type": "__host__", "description": "Extended matrix multiplication function for single precision complex numbers with lower precision support.", "relation": "calls", "tail": "cublasCgemm", "tail_type": "CUDA_API"}]}
{"pdf_page": [151, 156], "model_response": [{"head": "cublasGemmEx", "head_type": "__device__", "description": "This function is an extension of cublas<t>gemm() that allows the user to individually specify the data types for each of the A, B and C matrices, the precision of computation and the GEMM algorithm to be run.", "relation": "calls", "tail": "cublas<t>gemm", "tail_type": "CUDA_API"}]}
{"pdf_page": [156, 161], "model_response": [{"head": "cublasGemmBatchedEx", "head_type": "CUDA_API", "description": "This function performs the matrix-matrix multiplication of a batch of matrices.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [161, 166], "model_response": [{"head": "cublasGemmStridedBatchedEx", "head_type": "__host__", "description": "Performs matrix-matrix multiplication of a batch of matrices with specified precisions and algorithms.", "relation": "calls", "tail": "cublas<t>gemmStridedBatched", "tail_type": "CUDA_API"}]}
{"pdf_page": [166, 170], "model_response": [{"head": "cublasGemmGroupedBatchedEx", "head_type": "CUDA_API", "description": "Performs matrix-matrix multiplication on groups of matrices", "relation": "calls", "tail": "cublasGemmBatchedEx", "tail_type": "CUDA_API"}]}
{"pdf_page": [170, 174], "model_response": [{"head": "cublasCsyrkEx", "head_type": "__host__", "description": "This function performs the symmetric rank-k update.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasCsyrk3mEx", "head_type": "__host__", "description": "This function performs the symmetric rank-k update using the Gauss complexity reduction algorithm.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [174, 180], "model_response": [{"head": "cublasCherkEx", "head_type": "__host__", "description": "This function performs the Hermitian rank-k update with specified matrix and scalar parameters.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasCherk3mEx", "head_type": "__host__", "description": "This function is an extension using Gauss complexity reduction algorithm for Hermitian rank-k update.", "relation": "calls", "tail": "cuComplex", "tail_type": "CUDA_CLASS"}, {"head": "cublasNrm2Ex", "head_type": "__host__", "description": "This function computes the Euclidean norm of the vector x with specified datatype combinations.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [180, 183], "model_response": [{"head": "cublasAxpyEx", "head_type": "CUDA_API", "description": "Performs vector-scalar multiplication and addition for vectors, x and y.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDotEx", "head_type": "CUDA_API", "description": "Computes the dot product of vectors x and y.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasDotcEx", "head_type": "CUDA_API", "description": "Computes the conjugated dot product of vectors x and y.", "relation": "calls", "tail": "cublasHandle_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [183, 187], "model_response": [{"head": "cublasRotEx", "head_type": "__host__", "description": "This function applies the Givens rotation matrix to vectors x and y.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasScalEx", "head_type": "__host__", "description": "This function scales the vector x by the scalar \u03b1 and overwrites it with the result.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [188, 195], "model_response": []}
{"pdf_page": [197, 200], "model_response": [{"head": "cublasLtDisableCpuInstructionsSetMask", "head_type": "CUDA_API", "description": "The function allows the user to disable certain CPU instructions for the cuBLASLt library.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtMatmul", "head_type": "CUDA_API", "description": "This function performs matrix multiplication with optional atomics synchronization.", "relation": "calls", "tail": "memory_fence", "tail_type": "CUDA_API"}, {"head": "cudaDeviceSynchronize", "head_type": "CUDA_API", "description": "This function blocks the execution of the calling host thread until all the previously issued commands are completed by the device.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cuda::atomic_thread_fence", "head_type": "CUDA_API", "description": "Provides a memory fence for atomic operations to ensure consistency between threads.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [231, 234], "model_response": [{"head": "cublasLtCreate", "head_type": "__host__", "description": "This function initializes the cuBLASLt library and creates a handle to an opaque structure holding the cuBLASLt library context.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "cublasLtDestroy", "head_type": "__host__", "description": "This function releases hardware resources used by the cuBLASLt library.", "relation": "calls", "tail": "cudaDeviceSynchronize", "tail_type": "CUDA_API"}, {"head": "cublasLtDisableCpuInstructionsSetMask", "head_type": "__host__", "description": "Instructs cuBLASLt library to not use CPU instructions specified by the flags in the mask.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtGetCudartVersion", "head_type": "__host__", "description": "This function returns the version number of the CUDA Runtime library.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtGetProperty", "head_type": "__host__", "description": "This function returns the value of the requested property by writing it to the memory location pointed to by the value parameter.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtGetStatusName", "head_type": "__host__", "description": "Returns the string representation of a given status.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [234, 238], "model_response": [{"head": "cublasLtGetStatusString", "head_type": "__host__", "description": "Returns the description string for a given status.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtHeuristicsCacheGetCapacity", "head_type": "__host__", "description": "Returns the Heuristics Cache capacity.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtHeuristicsCacheSetCapacity", "head_type": "__host__", "description": "Sets the Heuristics Cache capacity.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtGetVersion", "head_type": "__host__", "description": "Returns the version number of cuBLASLt library.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtLoggerSetCallback", "head_type": "__host__", "description": "Sets the logging callback function.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtLoggerSetFile", "head_type": "__host__", "description": "Sets the logging output file.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtLoggerOpenFile", "head_type": "__host__", "description": "Opens a logging output file in the given path.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtLoggerSetLevel", "head_type": "__host__", "description": "Sets the value of the logging level.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtLoggerSetMask", "head_type": "__host__", "description": "Sets the value of the logging mask.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtLoggerForceDisable", "head_type": "__host__", "description": "Disables logging for the entire run.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtMatmul", "head_type": "__host__", "description": "Computes the matrix multiplication of matrices A and B to produce the output matrix D.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_API"}]}
{"pdf_page": [237, 243], "model_response": [{"head": "cublasLtLoggerForceDisable", "head_type": "CUDA_API", "description": "Function disables logging for the entire run.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtMatmul", "head_type": "CUDA_API", "description": "Function computes matrix multiplication of matrices A and B to produce the output matrix D.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoCapGetAttribute", "head_type": "CUDA_API", "description": "Function returns the value of the queried capability attribute for an initialized cublasLtMatmulAlgo descriptor structure.", "relation": "calls", "tail": "cublasLtMatmulAlgo_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [242, 248], "model_response": [{"head": "cublasLtMatmulAlgoCapGetAttribute", "head_type": "__host__", "description": "This function returns the value of the queried capability attribute for an initialized cublasLtMatmulAlgo_t descriptor.", "relation": "calls", "tail": "cublasLtMatmulAlgo_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoCapGetAttribute", "head_type": "__host__", "description": "This function returns the value of the queried capability attribute for an initialized cublasLtMatmulAlgo_t descriptor.", "relation": "calls", "tail": "cublasLtMatmulAlgoCapAttributes_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoCheck", "head_type": "__host__", "description": "This function performs the correctness check on the matrix multiply algorithm descriptor for the matrix multiply operation.", "relation": "calls", "tail": "cublasLtMatmulDesc_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoCheck", "head_type": "__host__", "description": "This function performs the correctness check on the matrix multiply algorithm descriptor for the matrix multiply operation.", "relation": "calls", "tail": "cublasLtMatrixLayout_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoCheck", "head_type": "__host__", "description": "This function performs the correctness check on the matrix multiply algorithm descriptor for the matrix multiply operation.", "relation": "calls", "tail": "cublasLtMatmulAlgo_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoCheck", "head_type": "__host__", "description": "This function performs the correctness check on the matrix multiply algorithm descriptor for the matrix multiply operation.", "relation": "calls", "tail": "cublasLtMatmulHeuristicResult_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoConfigGetAttribute", "head_type": "__host__", "description": "This function returns the value of the queried configuration attribute for an initialized cublasLtMatmulAlgo_t descriptor.", "relation": "calls", "tail": "cublasLtMatmulAlgo_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoConfigGetAttribute", "head_type": "__host__", "description": "This function returns the value of the queried configuration attribute for an initialized cublasLtMatmulAlgo_t descriptor.", "relation": "calls", "tail": "cublasLtMatmulAlgoConfigAttributes_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoConfigSetAttribute", "head_type": "__host__", "description": "This function sets the value of the specified configuration attribute for an initialized cublasLtMatmulAlgo_t descriptor.", "relation": "calls", "tail": "cublasLtMatmulAlgo_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoConfigSetAttribute", "head_type": "__host__", "description": "This function sets the value of the specified configuration attribute for an initialized cublasLtMatmulAlgo_t descriptor.", "relation": "calls", "tail": "cublasLtMatmulAlgoConfigAttributes_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoGetHeuristic", "head_type": "__host__", "description": "This function retrieves the possible algorithms for the matrix multiply operation.", "relation": "calls", "tail": "cublasLtMatmulDesc_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoGetHeuristic", "head_type": "__host__", "description": "This function retrieves the possible algorithms for the matrix multiply operation.", "relation": "calls", "tail": "cublasLtMatrixLayout_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoGetHeuristic", "head_type": "__host__", "description": "This function retrieves the possible algorithms for the matrix multiply operation.", "relation": "calls", "tail": "cublasLtMatmulPreference_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulAlgoGetHeuristic", "head_type": "__host__", "description": "This function retrieves the possible algorithms for the matrix multiply operation.", "relation": "calls", "tail": "cublasLtMatmulHeuristicResult_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [247, 252], "model_response": [{"head": "cublasLtMatmulAlgoGetIds", "head_type": "__host__", "description": "Retrieves the IDs of all valid matrix multiply algorithms for given input matrices.", "relation": "calls", "tail": "cublasLtMatmul", "tail_type": "CUDA_API"}, {"head": "cublasLtMatmulAlgoInit", "head_type": "__host__", "description": "Initializes the matrix multiply algorithm structure for a specified algorithm.", "relation": "calls", "tail": "cublasLtMatmulAlgoGetIds", "tail_type": "CUDA_API"}, {"head": "cublasLtMatmulDescCreate", "head_type": "__host__", "description": "Creates a matrix multiply descriptor by allocating the required memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtMatmulDescInit", "head_type": "__host__", "description": "Initializes a pre-allocated matrix multiply descriptor.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtMatmulDescDestroy", "head_type": "__host__", "description": "Destroys a previously created matrix multiply descriptor object.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtMatmulDescGetAttribute", "head_type": "__host__", "description": "Returns the value of a queried attribute from a matrix multiply descriptor.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [252, 255], "model_response": [{"head": "cublasLtMatmulDescSetAttribute", "head_type": "__host__", "description": "This function sets the value of the specified attribute belonging to a previously created matrix multiply descriptor.", "relation": "calls", "tail": "cublasLtMatmulDesc_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulPreferenceCreate", "head_type": "__host__", "description": "This function creates a matrix multiply heuristic search preferences descriptor by allocating the memory needed to hold its opaque structure.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtMatmulPreferenceInit", "head_type": "__host__", "description": "This function initializes a matrix multiply heuristic search preferences descriptor in a previously allocated one.", "relation": "calls", "tail": "cublasLtMatmulPreference_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulPreferenceDestroy", "head_type": "__host__", "description": "This function destroys a previously created matrix multiply preferences descriptor object.", "relation": "calls", "tail": "cublasLtMatmulPreference_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatmulPreferenceGetAttribute", "head_type": "__host__", "description": "This function returns the value of the queried attribute belonging to a previously created matrix multiply heuristic search preferences descriptor.", "relation": "calls", "tail": "cublasLtMatmulPreference_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [255, 260], "model_response": [{"head": "cublasLtMatmulPreferenceSetAttribute", "head_type": "__host__", "description": "Set an attribute for the matrix multiply preferences descriptor.", "relation": "calls", "tail": "cublasLtMatmulPreference_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatrixLayoutCreate", "head_type": "__host__", "description": "Create a matrix layout descriptor by allocating necessary memory.", "relation": "calls", "tail": "cudaDataType", "tail_type": "CUDA_API"}, {"head": "cublasLtMatrixLayoutInit", "head_type": "__host__", "description": "Initialize a matrix layout descriptor.", "relation": "calls", "tail": "cudaDataType", "tail_type": "CUDA_API"}, {"head": "cublasLtMatrixLayoutDestroy", "head_type": "__host__", "description": "Destroy a matrix layout descriptor.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtMatrixLayoutGetAttribute", "head_type": "__host__", "description": "Get the value of a matrix layout descriptor attribute.", "relation": "calls", "tail": "cublasLtMatrixLayoutAttribute_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatrixLayoutSetAttribute", "head_type": "__host__", "description": "Set the value of an attribute in a matrix layout descriptor.", "relation": "calls", "tail": "cublasLtMatrixLayoutAttribute_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatrixTransform", "head_type": "__host__", "description": "Perform matrix transformation with given operation parameters.", "relation": "calls", "tail": "cudaStream_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [260, 265], "model_response": [{"head": "cublasLtMatrixTransformDescCreate", "head_type": "__host__", "description": "This function creates a matrix transform descriptor by allocating the memory needed to hold its opaque structure.", "relation": "calls", "tail": "cudaDataType_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatrixTransformDescInit", "head_type": "__host__", "description": "This function initializes a matrix transform descriptor in a previously allocated one.", "relation": "calls", "tail": "cudaDataType_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatrixTransformDescDestroy", "head_type": "__host__", "description": "This function destroys a previously created matrix transform descriptor object.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasLtMatrixTransformDescGetAttribute", "head_type": "__host__", "description": "This function returns the value of the queried attribute belonging to a previously created matrix transform descriptor.", "relation": "calls", "tail": "cublasLtMatrixTransformDescAttributes_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasLtMatrixTransformDescSetAttribute", "head_type": "__host__", "description": "This function sets the value of the specified attribute belonging to a previously created matrix transform descriptor.", "relation": "calls", "tail": "cublasLtMatrixTransformDescAttributes_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [269, 272], "model_response": [{"head": "cublasXtCreate", "head_type": "CUDA_API", "description": "Initializes the cuBLASXt API and creates a handle to an opaque structure holding the cuBLASXt API context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtDestroy", "head_type": "CUDA_API", "description": "Releases hardware resources used by the cuBLASXt API context.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtDeviceSelect", "head_type": "CUDA_API", "description": "Allows the user to provide the number of GPU devices and their respective Ids for subsequent cuBLASXt API Math function calls.", "relation": "calls", "tail": "cublasXtCreate", "tail_type": "CUDA_API"}, {"head": "cublasXtSetBlockDim", "head_type": "CUDA_API", "description": "Allows the user to set the block dimension for the tiling of the matrices, effective for following Math function calls.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtGetBlockDim", "head_type": "CUDA_API", "description": "Allows the user to query the block dimension used for the tiling of the matrices.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [272, 276], "model_response": [{"head": "cublasXtSetCpuRoutine", "head_type": "CUDA_API", "description": "Provides a CPU implementation of the corresponding BLAS routine.", "relation": "calls", "tail": "cublasXtSetCpuRatio", "tail_type": "CUDA_API"}, {"head": "cublasXtSetCpuRatio", "head_type": "CUDA_API", "description": "Defines the percentage of workload that should be done on a CPU in a hybrid computation.", "relation": "calls", "tail": "cublasXtSetCpuRoutine", "tail_type": "CUDA_API"}, {"head": "cublasXtSetPinningMemMode", "head_type": "CUDA_API", "description": "Enables or disables the Pinning Memory mode.", "relation": "calls", "tail": "cudaHostRegister", "tail_type": "CUDA_API"}, {"head": "cublasXtSetPinningMemMode", "head_type": "CUDA_API", "description": "Enables or disables the Pinning Memory mode.", "relation": "calls", "tail": "cudaHostUnregister", "tail_type": "CUDA_API"}, {"head": "cublasXtSetPinningMemMode", "head_type": "CUDA_API", "description": "Enables or disables the Pinning Memory mode.", "relation": "calls", "tail": "cudaHostGetFlags", "tail_type": "CUDA_API"}, {"head": "cublasXtGetPinningMemMode", "head_type": "CUDA_API", "description": "Queries the current Pinning Memory mode.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtSgemm", "head_type": "CUDA_API", "description": "Performs single-precision floating point matrix-matrix multiplication.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtDgemm", "head_type": "CUDA_API", "description": "Performs double-precision floating point matrix-matrix multiplication.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtCgemm", "head_type": "CUDA_API", "description": "Performs complex single-precision matrix-matrix multiplication.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtZgemm", "head_type": "CUDA_API", "description": "Performs complex double-precision matrix-matrix multiplication.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [276, 282], "model_response": [{"head": "cublasXtChemm", "head_type": "__host__", "description": "Performs Hermitian matrix-matrix multiplication using single precision complex numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtZhemm", "head_type": "__host__", "description": "Performs Hermitian matrix-matrix multiplication using double precision complex numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtSsymm", "head_type": "__host__", "description": "Performs symmetric matrix-matrix multiplication using single precision floating point numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtDsymm", "head_type": "__host__", "description": "Performs symmetric matrix-matrix multiplication using double precision floating point numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtCsymm", "head_type": "__host__", "description": "Performs symmetric matrix-matrix multiplication using single precision complex numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtZsymm", "head_type": "__host__", "description": "Performs symmetric matrix-matrix multiplication using double precision complex numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtSsyrk", "head_type": "__host__", "description": "Performs symmetric rank-k update using single precision floating point numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtDsyrk", "head_type": "__host__", "description": "Performs symmetric rank-k update using double precision floating point numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtCsyrk", "head_type": "__host__", "description": "Performs symmetric rank-k update using single precision complex numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtZsyrk", "head_type": "__host__", "description": "Performs symmetric rank-k update using double precision complex numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtSsyr2k", "head_type": "__host__", "description": "Performs symmetric rank-2k update using single precision floating point numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtDsyr2k", "head_type": "__host__", "description": "Performs symmetric rank-2k update using double precision floating point numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtCsyr2k", "head_type": "__host__", "description": "Performs symmetric rank-2k update using single precision complex numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtZsyr2k", "head_type": "__host__", "description": "Performs symmetric rank-2k update using double precision complex numbers.", "relation": "calls", "tail": "cuBLASXtHandle_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [281, 285], "model_response": [{"head": "cublasXtSsyr2k", "head_type": "__host__", "description": "Performs the symmetric rank-2k update for single precision.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtDsyr2k", "head_type": "__host__", "description": "Performs the symmetric rank-2k update for double precision.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtCsyr2k", "head_type": "__host__", "description": "Performs the symmetric rank-2k update for complex single precision.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtZsyr2k", "head_type": "__host__", "description": "Performs the symmetric rank-2k update for complex double precision.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtSsyrkx", "head_type": "__host__", "description": "Performs a variation of the symmetric rank-k update for single precision.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtDsyrkx", "head_type": "__host__", "description": "Performs a variation of the symmetric rank-k update for double precision.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtCsyrkx", "head_type": "__host__", "description": "Performs a variation of the symmetric rank-k update for complex single precision.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtZsyrkx", "head_type": "__host__", "description": "Performs a variation of the symmetric rank-k update for complex double precision.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [285, 289], "model_response": [{"head": "cublasXtCherk", "head_type": "__host__", "description": "This function performs the Hermitian rank-k update.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtZherk", "head_type": "__host__", "description": "This function performs the Hermitian rank-k update.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtCher2k", "head_type": "__host__", "description": "This function performs the Hermitian rank-2k update.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtZher2k", "head_type": "__host__", "description": "This function performs the Hermitian rank-2k update.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtCherkx", "head_type": "__host__", "description": "This function performs a variation of the Hermitian rank-k update.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}, {"head": "cublasXtZherkx", "head_type": "__host__", "description": "This function performs a variation of the Hermitian rank-k update.", "relation": "calls", "tail": "cublasXtHandle_t", "tail_type": "CUDA_CLASS"}]}
{"pdf_page": [289, 293], "model_response": [{"head": "cublasXtStrsm", "head_type": "__host__", "description": "Solves the triangular linear system with multiple right-hand-sides for single-precision floats.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtDtrsm", "head_type": "__host__", "description": "Solves the triangular linear system with multiple right-hand-sides for double-precision floats.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtCtrsm", "head_type": "__host__", "description": "Solves the triangular linear system with multiple right-hand-sides for complex single-precision numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtZtrsm", "head_type": "__host__", "description": "Solves the triangular linear system with multiple right-hand-sides for complex double-precision numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtStrmm", "head_type": "__host__", "description": "Performs the triangular matrix-matrix multiplication for single-precision floats.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtDtrmm", "head_type": "__host__", "description": "Performs the triangular matrix-matrix multiplication for double-precision floats.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtCtrmm", "head_type": "__host__", "description": "Performs the triangular matrix-matrix multiplication for complex single-precision numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtZtrmm", "head_type": "__host__", "description": "Performs the triangular matrix-matrix multiplication for complex double-precision numbers.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [293, 295], "model_response": [{"head": "cublasXtSspmm", "head_type": "__global__", "description": "Performs symmetric packed matrix-matrix multiplication using single precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtDspmm", "head_type": "__global__", "description": "Performs symmetric packed matrix-matrix multiplication using double precision.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtCspmm", "head_type": "__global__", "description": "Performs symmetric packed matrix-matrix multiplication using single precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasXtZspmm", "head_type": "__global__", "description": "Performs symmetric packed matrix-matrix multiplication using double precision complex numbers.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [298, 301], "model_response": [{"head": "cublasInit", "head_type": "__host__", "description": "Initializes the cuBLAS library.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasShutdown", "head_type": "__host__", "description": "Shuts down the cuBLAS library.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetError", "head_type": "__host__", "description": "Retrieves the error status of the cuBLAS library.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetKernelStream", "head_type": "__host__", "description": "Sets the kernel stream to be used by the cuBLAS library.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasAlloc", "head_type": "__host__", "description": "Allocates device memory for the library.", "relation": "calls", "tail": "cudaMalloc", "tail_type": "CUDA_API"}, {"head": "cublasFree", "head_type": "__host__", "description": "Releases device memory allocated for the library.", "relation": "calls", "tail": "cudaFree", "tail_type": "CUDA_API"}, {"head": "cublasSetVector", "head_type": "__host__", "description": "Copies a vector from the host to the GPU.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetVector", "head_type": "__host__", "description": "Copies a vector from the GPU to the host.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetMatrix", "head_type": "__host__", "description": "Copies a matrix from the host to the GPU.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetMatrix", "head_type": "__host__", "description": "Copies a matrix from the GPU to the host.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetVectorAsync", "head_type": "__host__", "description": "Asynchronously copies a vector from the host to the GPU.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetVectorAsync", "head_type": "__host__", "description": "Asynchronously copies a vector from the GPU to the host.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasSetMatrixAsync", "head_type": "__host__", "description": "Asynchronously copies a matrix from the host to the GPU.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublasGetMatrixAsync", "head_type": "__host__", "description": "Asynchronously copies a matrix from the GPU to the host.", "relation": "single", "tail": "", "tail_type": ""}]}
{"pdf_page": [301, 304], "model_response": [{"head": "modify", "head_type": "__host__", "description": "A function that modifies parts of a matrix using cuBLAS scale functions.", "relation": "calls", "tail": "cublasSscal", "tail_type": "CUDA_API"}]}
{"pdf_page": [304, 308], "model_response": [{"head": "cublas_sscal", "head_type": "__global__", "description": "Scales a vector by a constant factor.", "relation": "calls", "tail": "cuBLAS API", "tail_type": "CUDA_API"}, {"head": "modify", "head_type": "__device__", "description": "Modifies a section of a matrix using cuBLAS functions.", "relation": "calls", "tail": "cublas_sscal", "tail_type": "CUDA_API"}, {"head": "cublas_init", "head_type": "__global__", "description": "Initializes the cuBLAS library environment.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublas_shutdown", "head_type": "__global__", "description": "Shuts down the cuBLAS library environment.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublas_alloc", "head_type": "__global__", "description": "Allocates memory on the GPU for a matrix.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublas_set_matrix", "head_type": "__global__", "description": "Copies a matrix from CPU to GPU memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublas_get_matrix", "head_type": "__global__", "description": "Copies a matrix from GPU to CPU memory.", "relation": "single", "tail": "", "tail_type": ""}, {"head": "cublas_free", "head_type": "__global__", "description": "Frees GPU memory previously allocated for a matrix.", "relation": "single", "tail": "", "tail_type": ""}]}
